/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all2) => {
  for (var name2 in all2)
    __defProp(target, name2, { get: all2[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/path-intersection/intersect.js
var require_intersect = __commonJS({
  "node_modules/path-intersection/intersect.js"(exports, module2) {
    "use strict";
    var p2s = /,?([a-z]),?/gi;
    var toFloat = parseFloat;
    var math = Math;
    var PI = math.PI;
    var mmin = math.min;
    var mmax = math.max;
    var pow = math.pow;
    var abs = math.abs;
    var pathCommand = /([a-z])[\s,]*((-?\d*\.?\d*(?:e[-+]?\d+)?[\s]*,?[\s]*)+)/ig;
    var pathValues = /(-?\d*\.?\d*(?:e[-+]?\d+)?)[\s]*,?[\s]*/ig;
    var isArray7 = Array.isArray || function(o) {
      return o instanceof Array;
    };
    function hasProperty(obj, property) {
      return Object.prototype.hasOwnProperty.call(obj, property);
    }
    function clone(obj) {
      if (typeof obj == "function" || Object(obj) !== obj) {
        return obj;
      }
      var res = new obj.constructor();
      for (var key in obj) {
        if (hasProperty(obj, key)) {
          res[key] = clone(obj[key]);
        }
      }
      return res;
    }
    function repush(array, item) {
      for (var i = 0, ii = array.length; i < ii; i++)
        if (array[i] === item) {
          return array.push(array.splice(i, 1)[0]);
        }
    }
    function cacher(f) {
      function newf() {
        var arg = Array.prototype.slice.call(arguments, 0), args = arg.join("\u2400"), cache = newf.cache = newf.cache || {}, count = newf.count = newf.count || [];
        if (hasProperty(cache, args)) {
          repush(count, args);
          return cache[args];
        }
        count.length >= 1e3 && delete cache[count.shift()];
        count.push(args);
        cache[args] = f.apply(0, arg);
        return cache[args];
      }
      return newf;
    }
    function parsePathString(pathString) {
      if (!pathString) {
        return null;
      }
      var pth = paths(pathString);
      if (pth.arr) {
        return clone(pth.arr);
      }
      var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 }, data = [];
      if (isArray7(pathString) && isArray7(pathString[0])) {
        data = clone(pathString);
      }
      if (!data.length) {
        String(pathString).replace(pathCommand, function(a, b, c) {
          var params = [], name2 = b.toLowerCase();
          c.replace(pathValues, function(a2, b2) {
            b2 && params.push(+b2);
          });
          if (name2 == "m" && params.length > 2) {
            data.push([b].concat(params.splice(0, 2)));
            name2 = "l";
            b = b == "m" ? "l" : "L";
          }
          while (params.length >= paramCounts[name2]) {
            data.push([b].concat(params.splice(0, paramCounts[name2])));
            if (!paramCounts[name2]) {
              break;
            }
          }
        });
      }
      data.toString = paths.toString;
      pth.arr = clone(data);
      return data;
    }
    function paths(ps) {
      var p = paths.ps = paths.ps || {};
      if (p[ps]) {
        p[ps].sleep = 100;
      } else {
        p[ps] = {
          sleep: 100
        };
      }
      setTimeout(function() {
        for (var key in p) {
          if (hasProperty(p, key) && key != ps) {
            p[key].sleep--;
            !p[key].sleep && delete p[key];
          }
        }
      });
      return p[ps];
    }
    function rectBBox(x, y, width, height) {
      if (arguments.length === 1) {
        y = x.y;
        width = x.width;
        height = x.height;
        x = x.x;
      }
      return {
        x,
        y,
        width,
        height,
        x2: x + width,
        y2: y + height
      };
    }
    function pathToString() {
      return this.join(",").replace(p2s, "$1");
    }
    function pathClone(pathArray) {
      var res = clone(pathArray);
      res.toString = pathToString;
      return res;
    }
    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
      var t1 = 1 - t, t13 = pow(t1, 3), t12 = pow(t1, 2), t2 = t * t, t3 = t2 * t, x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x, y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;
      return {
        x: fixError(x),
        y: fixError(y)
      };
    }
    function bezierBBox(points) {
      var bbox = curveBBox.apply(null, points);
      return rectBBox(bbox.x0, bbox.y0, bbox.x1 - bbox.x0, bbox.y1 - bbox.y0);
    }
    function isPointInsideBBox(bbox, x, y) {
      return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;
    }
    function isBBoxIntersect(bbox1, bbox2) {
      bbox1 = rectBBox(bbox1);
      bbox2 = rectBBox(bbox2);
      return isPointInsideBBox(bbox2, bbox1.x, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);
    }
    function base3(t, p1, p2, p3, p4) {
      var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4, t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
      return t * t2 - 3 * p1 + 3 * p2;
    }
    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
      if (z == null) {
        z = 1;
      }
      z = z > 1 ? 1 : z < 0 ? 0 : z;
      var z2 = z / 2, n = 12, Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816], Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472], sum = 0;
      for (var i = 0; i < n; i++) {
        var ct = z2 * Tvalues[i] + z2, xbase = base3(ct, x1, x2, x3, x4), ybase = base3(ct, y1, y2, y3, y4), comb = xbase * xbase + ybase * ybase;
        sum += Cvalues[i] * math.sqrt(comb);
      }
      return z2 * sum;
    }
    function intersectLines(x1, y1, x2, y2, x3, y3, x4, y4) {
      if (mmax(x1, x2) < mmin(x3, x4) || mmin(x1, x2) > mmax(x3, x4) || mmax(y1, y2) < mmin(y3, y4) || mmin(y1, y2) > mmax(y3, y4)) {
        return;
      }
      var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4), ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4), denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
      if (!denominator) {
        return;
      }
      var px = fixError(nx / denominator), py = fixError(ny / denominator), px2 = +px.toFixed(2), py2 = +py.toFixed(2);
      if (px2 < +mmin(x1, x2).toFixed(2) || px2 > +mmax(x1, x2).toFixed(2) || px2 < +mmin(x3, x4).toFixed(2) || px2 > +mmax(x3, x4).toFixed(2) || py2 < +mmin(y1, y2).toFixed(2) || py2 > +mmax(y1, y2).toFixed(2) || py2 < +mmin(y3, y4).toFixed(2) || py2 > +mmax(y3, y4).toFixed(2)) {
        return;
      }
      return { x: px, y: py };
    }
    function fixError(number) {
      return Math.round(number * 1e11) / 1e11;
    }
    function findBezierIntersections(bez1, bez2, justCount) {
      var bbox1 = bezierBBox(bez1), bbox2 = bezierBBox(bez2);
      if (!isBBoxIntersect(bbox1, bbox2)) {
        return justCount ? 0 : [];
      }
      var l1 = bezlen.apply(0, bez1), l2 = bezlen.apply(0, bez2), n1 = isLine(bez1) ? 1 : ~~(l1 / 5) || 1, n2 = isLine(bez2) ? 1 : ~~(l2 / 5) || 1, dots1 = [], dots2 = [], xy = {}, res = justCount ? 0 : [];
      for (var i = 0; i < n1 + 1; i++) {
        var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));
        dots1.push({ x: p.x, y: p.y, t: i / n1 });
      }
      for (i = 0; i < n2 + 1; i++) {
        p = findDotsAtSegment.apply(0, bez2.concat(i / n2));
        dots2.push({ x: p.x, y: p.y, t: i / n2 });
      }
      for (i = 0; i < n1; i++) {
        for (var j = 0; j < n2; j++) {
          var di = dots1[i], di1 = dots1[i + 1], dj = dots2[j], dj1 = dots2[j + 1], ci = abs(di1.x - di.x) < 0.01 ? "y" : "x", cj = abs(dj1.x - dj.x) < 0.01 ? "y" : "x", is2 = intersectLines(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y), key;
          if (is2) {
            key = is2.x.toFixed(9) + "#" + is2.y.toFixed(9);
            if (xy[key]) {
              continue;
            }
            xy[key] = true;
            var t1 = di.t + abs((is2[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t), t2 = dj.t + abs((is2[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);
            if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {
              if (justCount) {
                res++;
              } else {
                res.push({
                  x: is2.x,
                  y: is2.y,
                  t1,
                  t2
                });
              }
            }
          }
        }
      }
      return res;
    }
    function findPathIntersections(path1, path2, justCount) {
      path1 = pathToCurve(path1);
      path2 = pathToCurve(path2);
      var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2, res = justCount ? 0 : [];
      for (var i = 0, ii = path1.length; i < ii; i++) {
        var pi = path1[i];
        if (pi[0] == "M") {
          x1 = x1m = pi[1];
          y1 = y1m = pi[2];
        } else {
          if (pi[0] == "C") {
            bez1 = [x1, y1].concat(pi.slice(1));
            x1 = bez1[6];
            y1 = bez1[7];
          } else {
            bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];
            x1 = x1m;
            y1 = y1m;
          }
          for (var j = 0, jj = path2.length; j < jj; j++) {
            var pj = path2[j];
            if (pj[0] == "M") {
              x2 = x2m = pj[1];
              y2 = y2m = pj[2];
            } else {
              if (pj[0] == "C") {
                bez2 = [x2, y2].concat(pj.slice(1));
                x2 = bez2[6];
                y2 = bez2[7];
              } else {
                bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];
                x2 = x2m;
                y2 = y2m;
              }
              var intr = findBezierIntersections(bez1, bez2, justCount);
              if (justCount) {
                res += intr;
              } else {
                for (var k = 0, kk = intr.length; k < kk; k++) {
                  intr[k].segment1 = i;
                  intr[k].segment2 = j;
                  intr[k].bez1 = bez1;
                  intr[k].bez2 = bez2;
                }
                res = res.concat(intr);
              }
            }
          }
        }
      }
      return res;
    }
    function pathToAbsolute(pathArray) {
      var pth = paths(pathArray);
      if (pth.abs) {
        return pathClone(pth.abs);
      }
      if (!isArray7(pathArray) || !isArray7(pathArray && pathArray[0])) {
        pathArray = parsePathString(pathArray);
      }
      if (!pathArray || !pathArray.length) {
        return [["M", 0, 0]];
      }
      var res = [], x = 0, y = 0, mx = 0, my = 0, start = 0, pa0;
      if (pathArray[0][0] == "M") {
        x = +pathArray[0][1];
        y = +pathArray[0][2];
        mx = x;
        my = y;
        start++;
        res[0] = ["M", x, y];
      }
      for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
        res.push(r = []);
        pa = pathArray[i];
        pa0 = pa[0];
        if (pa0 != pa0.toUpperCase()) {
          r[0] = pa0.toUpperCase();
          switch (r[0]) {
            case "A":
              r[1] = pa[1];
              r[2] = pa[2];
              r[3] = pa[3];
              r[4] = pa[4];
              r[5] = pa[5];
              r[6] = +pa[6] + x;
              r[7] = +pa[7] + y;
              break;
            case "V":
              r[1] = +pa[1] + y;
              break;
            case "H":
              r[1] = +pa[1] + x;
              break;
            case "M":
              mx = +pa[1] + x;
              my = +pa[2] + y;
            default:
              for (var j = 1, jj = pa.length; j < jj; j++) {
                r[j] = +pa[j] + (j % 2 ? x : y);
              }
          }
        } else {
          for (var k = 0, kk = pa.length; k < kk; k++) {
            r[k] = pa[k];
          }
        }
        pa0 = pa0.toUpperCase();
        switch (r[0]) {
          case "Z":
            x = +mx;
            y = +my;
            break;
          case "H":
            x = r[1];
            break;
          case "V":
            y = r[1];
            break;
          case "M":
            mx = r[r.length - 2];
            my = r[r.length - 1];
          default:
            x = r[r.length - 2];
            y = r[r.length - 1];
        }
      }
      res.toString = pathToString;
      pth.abs = pathClone(res);
      return res;
    }
    function isLine(bez) {
      return bez[0] === bez[2] && bez[1] === bez[3] && bez[4] === bez[6] && bez[5] === bez[7];
    }
    function lineToCurve(x1, y1, x2, y2) {
      return [
        x1,
        y1,
        x2,
        y2,
        x2,
        y2
      ];
    }
    function qubicToCurve(x1, y1, ax, ay, x2, y2) {
      var _13 = 1 / 3, _23 = 2 / 3;
      return [
        _13 * x1 + _23 * ax,
        _13 * y1 + _23 * ay,
        _13 * x2 + _23 * ax,
        _13 * y2 + _23 * ay,
        x2,
        y2
      ];
    }
    function arcToCurve(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
      var _120 = PI * 120 / 180, rad = PI / 180 * (+angle || 0), res = [], xy, rotate = cacher(function(x3, y3, rad2) {
        var X = x3 * math.cos(rad2) - y3 * math.sin(rad2), Y = x3 * math.sin(rad2) + y3 * math.cos(rad2);
        return { x: X, y: Y };
      });
      if (!recursive) {
        xy = rotate(x1, y1, -rad);
        x1 = xy.x;
        y1 = xy.y;
        xy = rotate(x2, y2, -rad);
        x2 = xy.x;
        y2 = xy.y;
        var x = (x1 - x2) / 2, y = (y1 - y2) / 2;
        var h = x * x / (rx * rx) + y * y / (ry * ry);
        if (h > 1) {
          h = math.sqrt(h);
          rx = h * rx;
          ry = h * ry;
        }
        var rx2 = rx * rx, ry2 = ry * ry, k = (large_arc_flag == sweep_flag ? -1 : 1) * math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))), cx = k * rx * y / ry + (x1 + x2) / 2, cy = k * -ry * x / rx + (y1 + y2) / 2, f1 = math.asin(((y1 - cy) / ry).toFixed(9)), f2 = math.asin(((y2 - cy) / ry).toFixed(9));
        f1 = x1 < cx ? PI - f1 : f1;
        f2 = x2 < cx ? PI - f2 : f2;
        f1 < 0 && (f1 = PI * 2 + f1);
        f2 < 0 && (f2 = PI * 2 + f2);
        if (sweep_flag && f1 > f2) {
          f1 = f1 - PI * 2;
        }
        if (!sweep_flag && f2 > f1) {
          f2 = f2 - PI * 2;
        }
      } else {
        f1 = recursive[0];
        f2 = recursive[1];
        cx = recursive[2];
        cy = recursive[3];
      }
      var df = f2 - f1;
      if (abs(df) > _120) {
        var f2old = f2, x2old = x2, y2old = y2;
        f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
        x2 = cx + rx * math.cos(f2);
        y2 = cy + ry * math.sin(f2);
        res = arcToCurve(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
      }
      df = f2 - f1;
      var c1 = math.cos(f1), s1 = math.sin(f1), c2 = math.cos(f2), s2 = math.sin(f2), t = math.tan(df / 4), hx = 4 / 3 * rx * t, hy = 4 / 3 * ry * t, m1 = [x1, y1], m2 = [x1 + hx * s1, y1 - hy * c1], m3 = [x2 + hx * s2, y2 - hy * c2], m4 = [x2, y2];
      m2[0] = 2 * m1[0] - m2[0];
      m2[1] = 2 * m1[1] - m2[1];
      if (recursive) {
        return [m2, m3, m4].concat(res);
      } else {
        res = [m2, m3, m4].concat(res).join().split(",");
        var newres = [];
        for (var i = 0, ii = res.length; i < ii; i++) {
          newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
        }
        return newres;
      }
    }
    function curveBBox(x0, y0, x1, y1, x2, y2, x3, y3) {
      var tvalues = [], bounds = [[], []], a, b, c, t, t1, t2, b2ac, sqrtb2ac;
      for (var i = 0; i < 2; ++i) {
        if (i == 0) {
          b = 6 * x0 - 12 * x1 + 6 * x2;
          a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
          c = 3 * x1 - 3 * x0;
        } else {
          b = 6 * y0 - 12 * y1 + 6 * y2;
          a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
          c = 3 * y1 - 3 * y0;
        }
        if (abs(a) < 1e-12) {
          if (abs(b) < 1e-12) {
            continue;
          }
          t = -c / b;
          if (0 < t && t < 1) {
            tvalues.push(t);
          }
          continue;
        }
        b2ac = b * b - 4 * c * a;
        sqrtb2ac = math.sqrt(b2ac);
        if (b2ac < 0) {
          continue;
        }
        t1 = (-b + sqrtb2ac) / (2 * a);
        if (0 < t1 && t1 < 1) {
          tvalues.push(t1);
        }
        t2 = (-b - sqrtb2ac) / (2 * a);
        if (0 < t2 && t2 < 1) {
          tvalues.push(t2);
        }
      }
      var j = tvalues.length, jlen = j, mt;
      while (j--) {
        t = tvalues[j];
        mt = 1 - t;
        bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
        bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
      }
      bounds[0][jlen] = x0;
      bounds[1][jlen] = y0;
      bounds[0][jlen + 1] = x3;
      bounds[1][jlen + 1] = y3;
      bounds[0].length = bounds[1].length = jlen + 2;
      return {
        x0: mmin.apply(0, bounds[0]),
        y0: mmin.apply(0, bounds[1]),
        x1: mmax.apply(0, bounds[0]),
        y1: mmax.apply(0, bounds[1])
      };
    }
    function pathToCurve(path) {
      var pth = paths(path);
      if (pth.curve) {
        return pathClone(pth.curve);
      }
      var curvedPath = pathToAbsolute(path), attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null }, processPath = function(path2, d, pathCommand3) {
        var nx, ny;
        if (!path2) {
          return ["C", d.x, d.y, d.x, d.y, d.x, d.y];
        }
        !(path2[0] in { T: 1, Q: 1 }) && (d.qx = d.qy = null);
        switch (path2[0]) {
          case "M":
            d.X = path2[1];
            d.Y = path2[2];
            break;
          case "A":
            path2 = ["C"].concat(arcToCurve.apply(0, [d.x, d.y].concat(path2.slice(1))));
            break;
          case "S":
            if (pathCommand3 == "C" || pathCommand3 == "S") {
              nx = d.x * 2 - d.bx;
              ny = d.y * 2 - d.by;
            } else {
              nx = d.x;
              ny = d.y;
            }
            path2 = ["C", nx, ny].concat(path2.slice(1));
            break;
          case "T":
            if (pathCommand3 == "Q" || pathCommand3 == "T") {
              d.qx = d.x * 2 - d.qx;
              d.qy = d.y * 2 - d.qy;
            } else {
              d.qx = d.x;
              d.qy = d.y;
            }
            path2 = ["C"].concat(qubicToCurve(d.x, d.y, d.qx, d.qy, path2[1], path2[2]));
            break;
          case "Q":
            d.qx = path2[1];
            d.qy = path2[2];
            path2 = ["C"].concat(qubicToCurve(d.x, d.y, path2[1], path2[2], path2[3], path2[4]));
            break;
          case "L":
            path2 = ["C"].concat(lineToCurve(d.x, d.y, path2[1], path2[2]));
            break;
          case "H":
            path2 = ["C"].concat(lineToCurve(d.x, d.y, path2[1], d.y));
            break;
          case "V":
            path2 = ["C"].concat(lineToCurve(d.x, d.y, d.x, path2[1]));
            break;
          case "Z":
            path2 = ["C"].concat(lineToCurve(d.x, d.y, d.X, d.Y));
            break;
        }
        return path2;
      }, fixArc = function(pp, i2) {
        if (pp[i2].length > 7) {
          pp[i2].shift();
          var pi = pp[i2];
          while (pi.length) {
            pathCommands[i2] = "A";
            pp.splice(i2++, 0, ["C"].concat(pi.splice(0, 6)));
          }
          pp.splice(i2, 1);
          ii = curvedPath.length;
        }
      }, pathCommands = [], pfirst = "", pathCommand2 = "";
      for (var i = 0, ii = curvedPath.length; i < ii; i++) {
        curvedPath[i] && (pfirst = curvedPath[i][0]);
        if (pfirst != "C") {
          pathCommands[i] = pfirst;
          i && (pathCommand2 = pathCommands[i - 1]);
        }
        curvedPath[i] = processPath(curvedPath[i], attrs, pathCommand2);
        if (pathCommands[i] != "A" && pfirst == "C")
          pathCommands[i] = "C";
        fixArc(curvedPath, i);
        var seg = curvedPath[i], seglen = seg.length;
        attrs.x = seg[seglen - 2];
        attrs.y = seg[seglen - 1];
        attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;
        attrs.by = toFloat(seg[seglen - 3]) || attrs.y;
      }
      pth.curve = pathClone(curvedPath);
      return curvedPath;
    }
    module2.exports = findPathIntersections;
  }
});

// node_modules/object-refs/lib/collection.js
var require_collection = __commonJS({
  "node_modules/object-refs/lib/collection.js"(exports, module2) {
    "use strict";
    function extend2(collection, refs, property, target) {
      var inverseProperty = property.inverse;
      Object.defineProperty(collection, "remove", {
        value: function(element) {
          var idx = this.indexOf(element);
          if (idx !== -1) {
            this.splice(idx, 1);
            refs.unset(element, inverseProperty, target);
          }
          return element;
        }
      });
      Object.defineProperty(collection, "contains", {
        value: function(element) {
          return this.indexOf(element) !== -1;
        }
      });
      Object.defineProperty(collection, "add", {
        value: function(element, idx) {
          var currentIdx = this.indexOf(element);
          if (typeof idx === "undefined") {
            if (currentIdx !== -1) {
              return;
            }
            idx = this.length;
          }
          if (currentIdx !== -1) {
            this.splice(currentIdx, 1);
          }
          this.splice(idx, 0, element);
          if (currentIdx === -1) {
            refs.set(element, inverseProperty, target);
          }
        }
      });
      Object.defineProperty(collection, "__refs_collection", {
        value: true
      });
      return collection;
    }
    function isExtended(collection) {
      return collection.__refs_collection === true;
    }
    module2.exports.extend = extend2;
    module2.exports.isExtended = isExtended;
  }
});

// node_modules/object-refs/lib/refs.js
var require_refs = __commonJS({
  "node_modules/object-refs/lib/refs.js"(exports, module2) {
    "use strict";
    var Collection = require_collection();
    function hasOwnProperty2(e2, property) {
      return Object.prototype.hasOwnProperty.call(e2, property.name || property);
    }
    function defineCollectionProperty(ref, property, target) {
      var collection = Collection.extend(target[property.name] || [], ref, property, target);
      Object.defineProperty(target, property.name, {
        enumerable: property.enumerable,
        value: collection
      });
      if (collection.length) {
        collection.forEach(function(o) {
          ref.set(o, property.inverse, target);
        });
      }
    }
    function defineProperty3(ref, property, target) {
      var inverseProperty = property.inverse;
      var _value = target[property.name];
      Object.defineProperty(target, property.name, {
        configurable: property.configurable,
        enumerable: property.enumerable,
        get: function() {
          return _value;
        },
        set: function(value) {
          if (value === _value) {
            return;
          }
          var old = _value;
          _value = null;
          if (old) {
            ref.unset(old, inverseProperty, target);
          }
          _value = value;
          ref.set(_value, inverseProperty, target);
        }
      });
    }
    function Refs3(a, b) {
      if (!(this instanceof Refs3)) {
        return new Refs3(a, b);
      }
      a.inverse = b;
      b.inverse = a;
      this.props = {};
      this.props[a.name] = a;
      this.props[b.name] = b;
    }
    Refs3.prototype.bind = function(target, property) {
      if (typeof property === "string") {
        if (!this.props[property]) {
          throw new Error("no property <" + property + "> in ref");
        }
        property = this.props[property];
      }
      if (property.collection) {
        defineCollectionProperty(this, property, target);
      } else {
        defineProperty3(this, property, target);
      }
    };
    Refs3.prototype.ensureRefsCollection = function(target, property) {
      var collection = target[property.name];
      if (!Collection.isExtended(collection)) {
        defineCollectionProperty(this, property, target);
      }
      return collection;
    };
    Refs3.prototype.ensureBound = function(target, property) {
      if (!hasOwnProperty2(target, property)) {
        this.bind(target, property);
      }
    };
    Refs3.prototype.unset = function(target, property, value) {
      if (target) {
        this.ensureBound(target, property);
        if (property.collection) {
          this.ensureRefsCollection(target, property).remove(value);
        } else {
          target[property.name] = void 0;
        }
      }
    };
    Refs3.prototype.set = function(target, property, value) {
      if (target) {
        this.ensureBound(target, property);
        if (property.collection) {
          this.ensureRefsCollection(target, property).add(value);
        } else {
          target[property.name] = value;
        }
      }
    };
    module2.exports = Refs3;
  }
});

// node_modules/object-refs/index.js
var require_object_refs = __commonJS({
  "node_modules/object-refs/index.js"(exports, module2) {
    module2.exports = require_refs();
    module2.exports.Collection = require_collection();
  }
});

// node_modules/hat/index.js
var require_hat = __commonJS({
  "node_modules/hat/index.js"(exports, module2) {
    var hat = module2.exports = function(bits, base) {
      if (!base)
        base = 16;
      if (bits === void 0)
        bits = 128;
      if (bits <= 0)
        return "0";
      var digits = Math.log(Math.pow(2, bits)) / Math.log(base);
      for (var i = 2; digits === Infinity; i *= 2) {
        digits = Math.log(Math.pow(2, bits / i)) / Math.log(base) * i;
      }
      var rem = digits - Math.floor(digits);
      var res = "";
      for (var i = 0; i < Math.floor(digits); i++) {
        var x = Math.floor(Math.random() * base).toString(base);
        res = x + res;
      }
      if (rem) {
        var b = Math.pow(base, rem);
        var x = Math.floor(Math.random() * b).toString(base);
        res = x + res;
      }
      var parsed = parseInt(res, base);
      if (parsed !== Infinity && parsed >= Math.pow(2, bits)) {
        return hat(bits, base);
      } else
        return res;
    };
    hat.rack = function(bits, base, expandBy) {
      var fn = function(data) {
        var iters = 0;
        do {
          if (iters++ > 10) {
            if (expandBy)
              bits += expandBy;
            else
              throw new Error("too many ID collisions, use more bits");
          }
          var id = hat(bits, base);
        } while (Object.hasOwnProperty.call(hats, id));
        hats[id] = data;
        return id;
      };
      var hats = fn.hats = {};
      fn.get = function(id) {
        return fn.hats[id];
      };
      fn.set = function(id, value) {
        fn.hats[id] = value;
        return fn;
      };
      fn.bits = bits || 128;
      fn.base = base || 16;
      return fn;
    };
  }
});

// node_modules/ids/index.js
var require_ids = __commonJS({
  "node_modules/ids/index.js"(exports, module2) {
    "use strict";
    var hat = require_hat();
    function Ids2(seed) {
      if (!(this instanceof Ids2)) {
        return new Ids2(seed);
      }
      seed = seed || [128, 36, 1];
      this._seed = seed.length ? hat.rack(seed[0], seed[1], seed[2]) : seed;
    }
    module2.exports = Ids2;
    Ids2.prototype.next = function(element) {
      return this._seed(element || true);
    };
    Ids2.prototype.nextPrefixed = function(prefix4, element) {
      var id;
      do {
        id = prefix4 + this.next(true);
      } while (this.assigned(id));
      this.claim(id, element);
      return id;
    };
    Ids2.prototype.claim = function(id, element) {
      this._seed.set(id, element || true);
    };
    Ids2.prototype.assigned = function(id) {
      return this._seed.get(id) || false;
    };
    Ids2.prototype.unclaim = function(id) {
      delete this._seed.hats[id];
    };
    Ids2.prototype.clear = function() {
      var hats = this._seed.hats, id;
      for (id in hats) {
        this.unclaim(id);
      }
    };
  }
});

// node_modules/hammerjs/hammer.js
var require_hammer = __commonJS({
  "node_modules/hammerjs/hammer.js"(exports, module2) {
    (function(window2, document2, exportName, undefined2) {
      "use strict";
      var VENDOR_PREFIXES = ["", "webkit", "Moz", "MS", "ms", "o"];
      var TEST_ELEMENT = document2.createElement("div");
      var TYPE_FUNCTION = "function";
      var round2 = Math.round;
      var abs = Math.abs;
      var now = Date.now;
      function setTimeoutContext(fn, timeout, context) {
        return setTimeout(bindFn(fn, context), timeout);
      }
      function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
          each(arg, context[fn], context);
          return true;
        }
        return false;
      }
      function each(obj, iterator, context) {
        var i;
        if (!obj) {
          return;
        }
        if (obj.forEach) {
          obj.forEach(iterator, context);
        } else if (obj.length !== undefined2) {
          i = 0;
          while (i < obj.length) {
            iterator.call(context, obj[i], i, obj);
            i++;
          }
        } else {
          for (i in obj) {
            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
          }
        }
      }
      function deprecate(method, name2, message) {
        var deprecationMessage = "DEPRECATED METHOD: " + name2 + "\n" + message + " AT \n";
        return function() {
          var e2 = new Error("get-stack-trace");
          var stack = e2 && e2.stack ? e2.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
          var log2 = window2.console && (window2.console.warn || window2.console.log);
          if (log2) {
            log2.call(window2.console, deprecationMessage, stack);
          }
          return method.apply(this, arguments);
        };
      }
      var assign5;
      if (typeof Object.assign !== "function") {
        assign5 = function assign6(target) {
          if (target === undefined2 || target === null) {
            throw new TypeError("Cannot convert undefined or null to object");
          }
          var output = Object(target);
          for (var index2 = 1; index2 < arguments.length; index2++) {
            var source = arguments[index2];
            if (source !== undefined2 && source !== null) {
              for (var nextKey in source) {
                if (source.hasOwnProperty(nextKey)) {
                  output[nextKey] = source[nextKey];
                }
              }
            }
          }
          return output;
        };
      } else {
        assign5 = Object.assign;
      }
      var extend2 = deprecate(function extend3(dest, src, merge2) {
        var keys = Object.keys(src);
        var i = 0;
        while (i < keys.length) {
          if (!merge2 || merge2 && dest[keys[i]] === undefined2) {
            dest[keys[i]] = src[keys[i]];
          }
          i++;
        }
        return dest;
      }, "extend", "Use `assign`.");
      var merge = deprecate(function merge2(dest, src) {
        return extend2(dest, src, true);
      }, "merge", "Use `assign`.");
      function inherit(child, base, properties) {
        var baseP = base.prototype, childP;
        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;
        if (properties) {
          assign5(childP, properties);
        }
      }
      function bindFn(fn, context) {
        return function boundFn() {
          return fn.apply(context, arguments);
        };
      }
      function boolOrFn(val, args) {
        if (typeof val == TYPE_FUNCTION) {
          return val.apply(args ? args[0] || undefined2 : undefined2, args);
        }
        return val;
      }
      function ifUndefined(val1, val2) {
        return val1 === undefined2 ? val2 : val1;
      }
      function addEventListeners(target, types3, handler) {
        each(splitStr(types3), function(type) {
          target.addEventListener(type, handler, false);
        });
      }
      function removeEventListeners(target, types3, handler) {
        each(splitStr(types3), function(type) {
          target.removeEventListener(type, handler, false);
        });
      }
      function hasParent(node2, parent) {
        while (node2) {
          if (node2 == parent) {
            return true;
          }
          node2 = node2.parentNode;
        }
        return false;
      }
      function inStr(str, find3) {
        return str.indexOf(find3) > -1;
      }
      function splitStr(str) {
        return str.trim().split(/\s+/g);
      }
      function inArray(src, find3, findByKey) {
        if (src.indexOf && !findByKey) {
          return src.indexOf(find3);
        } else {
          var i = 0;
          while (i < src.length) {
            if (findByKey && src[i][findByKey] == find3 || !findByKey && src[i] === find3) {
              return i;
            }
            i++;
          }
          return -1;
        }
      }
      function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
      }
      function uniqueArray(src, key, sort) {
        var results = [];
        var values2 = [];
        var i = 0;
        while (i < src.length) {
          var val = key ? src[i][key] : src[i];
          if (inArray(values2, val) < 0) {
            results.push(src[i]);
          }
          values2[i] = val;
          i++;
        }
        if (sort) {
          if (!key) {
            results = results.sort();
          } else {
            results = results.sort(function sortUniqueArray(a, b) {
              return a[key] > b[key];
            });
          }
        }
        return results;
      }
      function prefixed(obj, property) {
        var prefix4, prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);
        var i = 0;
        while (i < VENDOR_PREFIXES.length) {
          prefix4 = VENDOR_PREFIXES[i];
          prop = prefix4 ? prefix4 + camelProp : property;
          if (prop in obj) {
            return prop;
          }
          i++;
        }
        return undefined2;
      }
      var _uniqueId = 1;
      function uniqueId() {
        return _uniqueId++;
      }
      function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return doc.defaultView || doc.parentWindow || window2;
      }
      var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
      var SUPPORT_TOUCH = "ontouchstart" in window2;
      var SUPPORT_POINTER_EVENTS = prefixed(window2, "PointerEvent") !== undefined2;
      var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
      var INPUT_TYPE_TOUCH = "touch";
      var INPUT_TYPE_PEN = "pen";
      var INPUT_TYPE_MOUSE = "mouse";
      var INPUT_TYPE_KINECT = "kinect";
      var COMPUTE_INTERVAL = 25;
      var INPUT_START = 1;
      var INPUT_MOVE = 2;
      var INPUT_END = 4;
      var INPUT_CANCEL = 8;
      var DIRECTION_NONE = 1;
      var DIRECTION_LEFT = 2;
      var DIRECTION_RIGHT = 4;
      var DIRECTION_UP = 8;
      var DIRECTION_DOWN = 16;
      var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
      var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
      var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
      var PROPS_XY = ["x", "y"];
      var PROPS_CLIENT_XY = ["clientX", "clientY"];
      function Input(manager, callback) {
        var self2 = this;
        this.manager = manager;
        this.callback = callback;
        this.element = manager.element;
        this.target = manager.options.inputTarget;
        this.domHandler = function(ev) {
          if (boolOrFn(manager.options.enable, [manager])) {
            self2.handler(ev);
          }
        };
        this.init();
      }
      Input.prototype = {
        handler: function() {
        },
        init: function() {
          this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
          this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
          this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        },
        destroy: function() {
          this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
          this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
          this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        }
      };
      function createInputInstance(manager) {
        var Type;
        var inputClass = manager.options.inputClass;
        if (inputClass) {
          Type = inputClass;
        } else if (SUPPORT_POINTER_EVENTS) {
          Type = PointerEventInput;
        } else if (SUPPORT_ONLY_TOUCH) {
          Type = TouchInput;
        } else if (!SUPPORT_TOUCH) {
          Type = MouseInput;
        } else {
          Type = TouchMouseInput;
        }
        return new Type(manager, inputHandler);
      }
      function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;
        if (isFirst) {
          manager.session = {};
        }
        input.eventType = eventType;
        computeInputData(manager, input);
        manager.emit("hammer.input", input);
        manager.recognize(input);
        manager.session.prevInput = input;
      }
      function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length;
        if (!session.firstInput) {
          session.firstInput = simpleCloneInputData(input);
        }
        if (pointersLength > 1 && !session.firstMultiple) {
          session.firstMultiple = simpleCloneInputData(input);
        } else if (pointersLength === 1) {
          session.firstMultiple = false;
        }
        var firstInput = session.firstInput;
        var firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;
        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);
        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);
        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
        computeIntervalInputData(session, input);
        var target = manager.element;
        if (hasParent(input.srcEvent.target, target)) {
          target = input.srcEvent.target;
        }
        input.target = target;
      }
      function computeDeltaXY(session, input) {
        var center = input.center;
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};
        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
          prevDelta = session.prevDelta = {
            x: prevInput.deltaX || 0,
            y: prevInput.deltaY || 0
          };
          offset = session.offsetDelta = {
            x: center.x,
            y: center.y
          };
        }
        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
      }
      function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input, deltaTime = input.timeStamp - last.timeStamp, velocity, velocityX, velocityY, direction;
        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined2)) {
          var deltaX = input.deltaX - last.deltaX;
          var deltaY = input.deltaY - last.deltaY;
          var v = getVelocity(deltaTime, deltaX, deltaY);
          velocityX = v.x;
          velocityY = v.y;
          velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
          direction = getDirection(deltaX, deltaY);
          session.lastInterval = input;
        } else {
          velocity = last.velocity;
          velocityX = last.velocityX;
          velocityY = last.velocityY;
          direction = last.direction;
        }
        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
      }
      function simpleCloneInputData(input) {
        var pointers = [];
        var i = 0;
        while (i < input.pointers.length) {
          pointers[i] = {
            clientX: round2(input.pointers[i].clientX),
            clientY: round2(input.pointers[i].clientY)
          };
          i++;
        }
        return {
          timeStamp: now(),
          pointers,
          center: getCenter(pointers),
          deltaX: input.deltaX,
          deltaY: input.deltaY
        };
      }
      function getCenter(pointers) {
        var pointersLength = pointers.length;
        if (pointersLength === 1) {
          return {
            x: round2(pointers[0].clientX),
            y: round2(pointers[0].clientY)
          };
        }
        var x = 0, y = 0, i = 0;
        while (i < pointersLength) {
          x += pointers[i].clientX;
          y += pointers[i].clientY;
          i++;
        }
        return {
          x: round2(x / pointersLength),
          y: round2(y / pointersLength)
        };
      }
      function getVelocity(deltaTime, x, y) {
        return {
          x: x / deltaTime || 0,
          y: y / deltaTime || 0
        };
      }
      function getDirection(x, y) {
        if (x === y) {
          return DIRECTION_NONE;
        }
        if (abs(x) >= abs(y)) {
          return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
      }
      function getDistance(p1, p2, props) {
        if (!props) {
          props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
        return Math.sqrt(x * x + y * y);
      }
      function getAngle(p1, p2, props) {
        if (!props) {
          props = PROPS_XY;
        }
        var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
      }
      function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
      }
      function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
      }
      var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
      };
      var MOUSE_ELEMENT_EVENTS = "mousedown";
      var MOUSE_WINDOW_EVENTS = "mousemove mouseup";
      function MouseInput() {
        this.evEl = MOUSE_ELEMENT_EVENTS;
        this.evWin = MOUSE_WINDOW_EVENTS;
        this.pressed = false;
        Input.apply(this, arguments);
      }
      inherit(MouseInput, Input, {
        handler: function MEhandler(ev) {
          var eventType = MOUSE_INPUT_MAP[ev.type];
          if (eventType & INPUT_START && ev.button === 0) {
            this.pressed = true;
          }
          if (eventType & INPUT_MOVE && ev.which !== 1) {
            eventType = INPUT_END;
          }
          if (!this.pressed) {
            return;
          }
          if (eventType & INPUT_END) {
            this.pressed = false;
          }
          this.callback(this.manager, eventType, {
            pointers: [ev],
            changedPointers: [ev],
            pointerType: INPUT_TYPE_MOUSE,
            srcEvent: ev
          });
        }
      });
      var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
      };
      var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT
      };
      var POINTER_ELEMENT_EVENTS = "pointerdown";
      var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel";
      if (window2.MSPointerEvent && !window2.PointerEvent) {
        POINTER_ELEMENT_EVENTS = "MSPointerDown";
        POINTER_WINDOW_EVENTS = "MSPointerMove MSPointerUp MSPointerCancel";
      }
      function PointerEventInput() {
        this.evEl = POINTER_ELEMENT_EVENTS;
        this.evWin = POINTER_WINDOW_EVENTS;
        Input.apply(this, arguments);
        this.store = this.manager.session.pointerEvents = [];
      }
      inherit(PointerEventInput, Input, {
        handler: function PEhandler(ev) {
          var store = this.store;
          var removePointer = false;
          var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
          var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
          var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
          var isTouch = pointerType == INPUT_TYPE_TOUCH;
          var storeIndex = inArray(store, ev.pointerId, "pointerId");
          if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
            if (storeIndex < 0) {
              store.push(ev);
              storeIndex = store.length - 1;
            }
          } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
            removePointer = true;
          }
          if (storeIndex < 0) {
            return;
          }
          store[storeIndex] = ev;
          this.callback(this.manager, eventType, {
            pointers: store,
            changedPointers: [ev],
            pointerType,
            srcEvent: ev
          });
          if (removePointer) {
            store.splice(storeIndex, 1);
          }
        }
      });
      var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
      };
      var SINGLE_TOUCH_TARGET_EVENTS = "touchstart";
      var SINGLE_TOUCH_WINDOW_EVENTS = "touchstart touchmove touchend touchcancel";
      function SingleTouchInput() {
        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
        this.started = false;
        Input.apply(this, arguments);
      }
      inherit(SingleTouchInput, Input, {
        handler: function TEhandler(ev) {
          var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
          if (type === INPUT_START) {
            this.started = true;
          }
          if (!this.started) {
            return;
          }
          var touches = normalizeSingleTouches.call(this, ev, type);
          if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
            this.started = false;
          }
          this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
          });
        }
      });
      function normalizeSingleTouches(ev, type) {
        var all2 = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);
        if (type & (INPUT_END | INPUT_CANCEL)) {
          all2 = uniqueArray(all2.concat(changed), "identifier", true);
        }
        return [all2, changed];
      }
      var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
      };
      var TOUCH_TARGET_EVENTS = "touchstart touchmove touchend touchcancel";
      function TouchInput() {
        this.evTarget = TOUCH_TARGET_EVENTS;
        this.targetIds = {};
        Input.apply(this, arguments);
      }
      inherit(TouchInput, Input, {
        handler: function MTEhandler(ev) {
          var type = TOUCH_INPUT_MAP[ev.type];
          var touches = getTouches.call(this, ev, type);
          if (!touches) {
            return;
          }
          this.callback(this.manager, type, {
            pointers: touches[0],
            changedPointers: touches[1],
            pointerType: INPUT_TYPE_TOUCH,
            srcEvent: ev
          });
        }
      });
      function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds;
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
          targetIds[allTouches[0].identifier] = true;
          return [allTouches, allTouches];
        }
        var i, targetTouches, changedTouches = toArray(ev.changedTouches), changedTargetTouches = [], target = this.target;
        targetTouches = allTouches.filter(function(touch) {
          return hasParent(touch.target, target);
        });
        if (type === INPUT_START) {
          i = 0;
          while (i < targetTouches.length) {
            targetIds[targetTouches[i].identifier] = true;
            i++;
          }
        }
        i = 0;
        while (i < changedTouches.length) {
          if (targetIds[changedTouches[i].identifier]) {
            changedTargetTouches.push(changedTouches[i]);
          }
          if (type & (INPUT_END | INPUT_CANCEL)) {
            delete targetIds[changedTouches[i].identifier];
          }
          i++;
        }
        if (!changedTargetTouches.length) {
          return;
        }
        return [
          uniqueArray(targetTouches.concat(changedTargetTouches), "identifier", true),
          changedTargetTouches
        ];
      }
      var DEDUP_TIMEOUT = 2500;
      var DEDUP_DISTANCE = 25;
      function TouchMouseInput() {
        Input.apply(this, arguments);
        var handler = bindFn(this.handler, this);
        this.touch = new TouchInput(this.manager, handler);
        this.mouse = new MouseInput(this.manager, handler);
        this.primaryTouch = null;
        this.lastTouches = [];
      }
      inherit(TouchMouseInput, Input, {
        handler: function TMEhandler(manager, inputEvent, inputData) {
          var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH, isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;
          if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
            return;
          }
          if (isTouch) {
            recordTouches.call(this, inputEvent, inputData);
          } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
            return;
          }
          this.callback(manager, inputEvent, inputData);
        },
        destroy: function destroy() {
          this.touch.destroy();
          this.mouse.destroy();
        }
      });
      function recordTouches(eventType, eventData) {
        if (eventType & INPUT_START) {
          this.primaryTouch = eventData.changedPointers[0].identifier;
          setLastTouch.call(this, eventData);
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
          setLastTouch.call(this, eventData);
        }
      }
      function setLastTouch(eventData) {
        var touch = eventData.changedPointers[0];
        if (touch.identifier === this.primaryTouch) {
          var lastTouch = { x: touch.clientX, y: touch.clientY };
          this.lastTouches.push(lastTouch);
          var lts = this.lastTouches;
          var removeLastTouch = function() {
            var i = lts.indexOf(lastTouch);
            if (i > -1) {
              lts.splice(i, 1);
            }
          };
          setTimeout(removeLastTouch, DEDUP_TIMEOUT);
        }
      }
      function isSyntheticEvent(eventData) {
        var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
        for (var i = 0; i < this.lastTouches.length; i++) {
          var t = this.lastTouches[i];
          var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
          if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
            return true;
          }
        }
        return false;
      }
      var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, "touchAction");
      var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined2;
      var TOUCH_ACTION_COMPUTE = "compute";
      var TOUCH_ACTION_AUTO = "auto";
      var TOUCH_ACTION_MANIPULATION = "manipulation";
      var TOUCH_ACTION_NONE = "none";
      var TOUCH_ACTION_PAN_X = "pan-x";
      var TOUCH_ACTION_PAN_Y = "pan-y";
      var TOUCH_ACTION_MAP = getTouchActionProps();
      function TouchAction(manager, value) {
        this.manager = manager;
        this.set(value);
      }
      TouchAction.prototype = {
        set: function(value) {
          if (value == TOUCH_ACTION_COMPUTE) {
            value = this.compute();
          }
          if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
          }
          this.actions = value.toLowerCase().trim();
        },
        update: function() {
          this.set(this.manager.options.touchAction);
        },
        compute: function() {
          var actions = [];
          each(this.manager.recognizers, function(recognizer) {
            if (boolOrFn(recognizer.options.enable, [recognizer])) {
              actions = actions.concat(recognizer.getTouchAction());
            }
          });
          return cleanTouchActions(actions.join(" "));
        },
        preventDefaults: function(input) {
          var srcEvent = input.srcEvent;
          var direction = input.offsetDirection;
          if (this.manager.session.prevented) {
            srcEvent.preventDefault();
            return;
          }
          var actions = this.actions;
          var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
          var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
          var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
          if (hasNone) {
            var isTapPointer = input.pointers.length === 1;
            var isTapMovement = input.distance < 2;
            var isTapTouchTime = input.deltaTime < 250;
            if (isTapPointer && isTapMovement && isTapTouchTime) {
              return;
            }
          }
          if (hasPanX && hasPanY) {
            return;
          }
          if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
            return this.preventSrc(srcEvent);
          }
        },
        preventSrc: function(srcEvent) {
          this.manager.session.prevented = true;
          srcEvent.preventDefault();
        }
      };
      function cleanTouchActions(actions) {
        if (inStr(actions, TOUCH_ACTION_NONE)) {
          return TOUCH_ACTION_NONE;
        }
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
        if (hasPanX && hasPanY) {
          return TOUCH_ACTION_NONE;
        }
        if (hasPanX || hasPanY) {
          return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
        }
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
          return TOUCH_ACTION_MANIPULATION;
        }
        return TOUCH_ACTION_AUTO;
      }
      function getTouchActionProps() {
        if (!NATIVE_TOUCH_ACTION) {
          return false;
        }
        var touchMap = {};
        var cssSupports = window2.CSS && window2.CSS.supports;
        ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function(val) {
          touchMap[val] = cssSupports ? window2.CSS.supports("touch-action", val) : true;
        });
        return touchMap;
      }
      var STATE_POSSIBLE = 1;
      var STATE_BEGAN = 2;
      var STATE_CHANGED = 4;
      var STATE_ENDED = 8;
      var STATE_RECOGNIZED = STATE_ENDED;
      var STATE_CANCELLED = 16;
      var STATE_FAILED = 32;
      function Recognizer(options2) {
        this.options = assign5({}, this.defaults, options2 || {});
        this.id = uniqueId();
        this.manager = null;
        this.options.enable = ifUndefined(this.options.enable, true);
        this.state = STATE_POSSIBLE;
        this.simultaneous = {};
        this.requireFail = [];
      }
      Recognizer.prototype = {
        defaults: {},
        set: function(options2) {
          assign5(this.options, options2);
          this.manager && this.manager.touchAction.update();
          return this;
        },
        recognizeWith: function(otherRecognizer) {
          if (invokeArrayArg(otherRecognizer, "recognizeWith", this)) {
            return this;
          }
          var simultaneous = this.simultaneous;
          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
          if (!simultaneous[otherRecognizer.id]) {
            simultaneous[otherRecognizer.id] = otherRecognizer;
            otherRecognizer.recognizeWith(this);
          }
          return this;
        },
        dropRecognizeWith: function(otherRecognizer) {
          if (invokeArrayArg(otherRecognizer, "dropRecognizeWith", this)) {
            return this;
          }
          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
          delete this.simultaneous[otherRecognizer.id];
          return this;
        },
        requireFailure: function(otherRecognizer) {
          if (invokeArrayArg(otherRecognizer, "requireFailure", this)) {
            return this;
          }
          var requireFail = this.requireFail;
          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
          if (inArray(requireFail, otherRecognizer) === -1) {
            requireFail.push(otherRecognizer);
            otherRecognizer.requireFailure(this);
          }
          return this;
        },
        dropRequireFailure: function(otherRecognizer) {
          if (invokeArrayArg(otherRecognizer, "dropRequireFailure", this)) {
            return this;
          }
          otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
          var index2 = inArray(this.requireFail, otherRecognizer);
          if (index2 > -1) {
            this.requireFail.splice(index2, 1);
          }
          return this;
        },
        hasRequireFailures: function() {
          return this.requireFail.length > 0;
        },
        canRecognizeWith: function(otherRecognizer) {
          return !!this.simultaneous[otherRecognizer.id];
        },
        emit: function(input) {
          var self2 = this;
          var state = this.state;
          function emit(event2) {
            self2.manager.emit(event2, input);
          }
          if (state < STATE_ENDED) {
            emit(self2.options.event + stateStr(state));
          }
          emit(self2.options.event);
          if (input.additionalEvent) {
            emit(input.additionalEvent);
          }
          if (state >= STATE_ENDED) {
            emit(self2.options.event + stateStr(state));
          }
        },
        tryEmit: function(input) {
          if (this.canEmit()) {
            return this.emit(input);
          }
          this.state = STATE_FAILED;
        },
        canEmit: function() {
          var i = 0;
          while (i < this.requireFail.length) {
            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
              return false;
            }
            i++;
          }
          return true;
        },
        recognize: function(inputData) {
          var inputDataClone = assign5({}, inputData);
          if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
            this.reset();
            this.state = STATE_FAILED;
            return;
          }
          if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
            this.state = STATE_POSSIBLE;
          }
          this.state = this.process(inputDataClone);
          if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
            this.tryEmit(inputDataClone);
          }
        },
        process: function(inputData) {
        },
        getTouchAction: function() {
        },
        reset: function() {
        }
      };
      function stateStr(state) {
        if (state & STATE_CANCELLED) {
          return "cancel";
        } else if (state & STATE_ENDED) {
          return "end";
        } else if (state & STATE_CHANGED) {
          return "move";
        } else if (state & STATE_BEGAN) {
          return "start";
        }
        return "";
      }
      function directionStr(direction) {
        if (direction == DIRECTION_DOWN) {
          return "down";
        } else if (direction == DIRECTION_UP) {
          return "up";
        } else if (direction == DIRECTION_LEFT) {
          return "left";
        } else if (direction == DIRECTION_RIGHT) {
          return "right";
        }
        return "";
      }
      function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) {
          return manager.get(otherRecognizer);
        }
        return otherRecognizer;
      }
      function AttrRecognizer() {
        Recognizer.apply(this, arguments);
      }
      inherit(AttrRecognizer, Recognizer, {
        defaults: {
          pointers: 1
        },
        attrTest: function(input) {
          var optionPointers = this.options.pointers;
          return optionPointers === 0 || input.pointers.length === optionPointers;
        },
        process: function(input) {
          var state = this.state;
          var eventType = input.eventType;
          var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
          var isValid = this.attrTest(input);
          if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
          } else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
              return state | STATE_ENDED;
            } else if (!(state & STATE_BEGAN)) {
              return STATE_BEGAN;
            }
            return state | STATE_CHANGED;
          }
          return STATE_FAILED;
        }
      });
      function PanRecognizer() {
        AttrRecognizer.apply(this, arguments);
        this.pX = null;
        this.pY = null;
      }
      inherit(PanRecognizer, AttrRecognizer, {
        defaults: {
          event: "pan",
          threshold: 10,
          pointers: 1,
          direction: DIRECTION_ALL
        },
        getTouchAction: function() {
          var direction = this.options.direction;
          var actions = [];
          if (direction & DIRECTION_HORIZONTAL) {
            actions.push(TOUCH_ACTION_PAN_Y);
          }
          if (direction & DIRECTION_VERTICAL) {
            actions.push(TOUCH_ACTION_PAN_X);
          }
          return actions;
        },
        directionTest: function(input) {
          var options2 = this.options;
          var hasMoved = true;
          var distance = input.distance;
          var direction = input.direction;
          var x = input.deltaX;
          var y = input.deltaY;
          if (!(direction & options2.direction)) {
            if (options2.direction & DIRECTION_HORIZONTAL) {
              direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
              hasMoved = x != this.pX;
              distance = Math.abs(input.deltaX);
            } else {
              direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
              hasMoved = y != this.pY;
              distance = Math.abs(input.deltaY);
            }
          }
          input.direction = direction;
          return hasMoved && distance > options2.threshold && direction & options2.direction;
        },
        attrTest: function(input) {
          return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
        },
        emit: function(input) {
          this.pX = input.deltaX;
          this.pY = input.deltaY;
          var direction = directionStr(input.direction);
          if (direction) {
            input.additionalEvent = this.options.event + direction;
          }
          this._super.emit.call(this, input);
        }
      });
      function PinchRecognizer() {
        AttrRecognizer.apply(this, arguments);
      }
      inherit(PinchRecognizer, AttrRecognizer, {
        defaults: {
          event: "pinch",
          threshold: 0,
          pointers: 2
        },
        getTouchAction: function() {
          return [TOUCH_ACTION_NONE];
        },
        attrTest: function(input) {
          return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        },
        emit: function(input) {
          if (input.scale !== 1) {
            var inOut = input.scale < 1 ? "in" : "out";
            input.additionalEvent = this.options.event + inOut;
          }
          this._super.emit.call(this, input);
        }
      });
      function PressRecognizer() {
        Recognizer.apply(this, arguments);
        this._timer = null;
        this._input = null;
      }
      inherit(PressRecognizer, Recognizer, {
        defaults: {
          event: "press",
          pointers: 1,
          time: 251,
          threshold: 9
        },
        getTouchAction: function() {
          return [TOUCH_ACTION_AUTO];
        },
        process: function(input) {
          var options2 = this.options;
          var validPointers = input.pointers.length === options2.pointers;
          var validMovement = input.distance < options2.threshold;
          var validTime = input.deltaTime > options2.time;
          this._input = input;
          if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
            this.reset();
          } else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function() {
              this.state = STATE_RECOGNIZED;
              this.tryEmit();
            }, options2.time, this);
          } else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
          }
          return STATE_FAILED;
        },
        reset: function() {
          clearTimeout(this._timer);
        },
        emit: function(input) {
          if (this.state !== STATE_RECOGNIZED) {
            return;
          }
          if (input && input.eventType & INPUT_END) {
            this.manager.emit(this.options.event + "up", input);
          } else {
            this._input.timeStamp = now();
            this.manager.emit(this.options.event, this._input);
          }
        }
      });
      function RotateRecognizer() {
        AttrRecognizer.apply(this, arguments);
      }
      inherit(RotateRecognizer, AttrRecognizer, {
        defaults: {
          event: "rotate",
          threshold: 0,
          pointers: 2
        },
        getTouchAction: function() {
          return [TOUCH_ACTION_NONE];
        },
        attrTest: function(input) {
          return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        }
      });
      function SwipeRecognizer() {
        AttrRecognizer.apply(this, arguments);
      }
      inherit(SwipeRecognizer, AttrRecognizer, {
        defaults: {
          event: "swipe",
          threshold: 10,
          velocity: 0.3,
          direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
          pointers: 1
        },
        getTouchAction: function() {
          return PanRecognizer.prototype.getTouchAction.call(this);
        },
        attrTest: function(input) {
          var direction = this.options.direction;
          var velocity;
          if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            velocity = input.overallVelocity;
          } else if (direction & DIRECTION_HORIZONTAL) {
            velocity = input.overallVelocityX;
          } else if (direction & DIRECTION_VERTICAL) {
            velocity = input.overallVelocityY;
          }
          return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        },
        emit: function(input) {
          var direction = directionStr(input.offsetDirection);
          if (direction) {
            this.manager.emit(this.options.event + direction, input);
          }
          this.manager.emit(this.options.event, input);
        }
      });
      function TapRecognizer() {
        Recognizer.apply(this, arguments);
        this.pTime = false;
        this.pCenter = false;
        this._timer = null;
        this._input = null;
        this.count = 0;
      }
      inherit(TapRecognizer, Recognizer, {
        defaults: {
          event: "tap",
          pointers: 1,
          taps: 1,
          interval: 300,
          time: 250,
          threshold: 9,
          posThreshold: 10
        },
        getTouchAction: function() {
          return [TOUCH_ACTION_MANIPULATION];
        },
        process: function(input) {
          var options2 = this.options;
          var validPointers = input.pointers.length === options2.pointers;
          var validMovement = input.distance < options2.threshold;
          var validTouchTime = input.deltaTime < options2.time;
          this.reset();
          if (input.eventType & INPUT_START && this.count === 0) {
            return this.failTimeout();
          }
          if (validMovement && validTouchTime && validPointers) {
            if (input.eventType != INPUT_END) {
              return this.failTimeout();
            }
            var validInterval = this.pTime ? input.timeStamp - this.pTime < options2.interval : true;
            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options2.posThreshold;
            this.pTime = input.timeStamp;
            this.pCenter = input.center;
            if (!validMultiTap || !validInterval) {
              this.count = 1;
            } else {
              this.count += 1;
            }
            this._input = input;
            var tapCount = this.count % options2.taps;
            if (tapCount === 0) {
              if (!this.hasRequireFailures()) {
                return STATE_RECOGNIZED;
              } else {
                this._timer = setTimeoutContext(function() {
                  this.state = STATE_RECOGNIZED;
                  this.tryEmit();
                }, options2.interval, this);
                return STATE_BEGAN;
              }
            }
          }
          return STATE_FAILED;
        },
        failTimeout: function() {
          this._timer = setTimeoutContext(function() {
            this.state = STATE_FAILED;
          }, this.options.interval, this);
          return STATE_FAILED;
        },
        reset: function() {
          clearTimeout(this._timer);
        },
        emit: function() {
          if (this.state == STATE_RECOGNIZED) {
            this._input.tapCount = this.count;
            this.manager.emit(this.options.event, this._input);
          }
        }
      });
      function Hammer2(element, options2) {
        options2 = options2 || {};
        options2.recognizers = ifUndefined(options2.recognizers, Hammer2.defaults.preset);
        return new Manager2(element, options2);
      }
      Hammer2.VERSION = "2.0.7";
      Hammer2.defaults = {
        domEvents: false,
        touchAction: TOUCH_ACTION_COMPUTE,
        enable: true,
        inputTarget: null,
        inputClass: null,
        preset: [
          [RotateRecognizer, { enable: false }],
          [PinchRecognizer, { enable: false }, ["rotate"]],
          [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }],
          [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ["swipe"]],
          [TapRecognizer],
          [TapRecognizer, { event: "doubletap", taps: 2 }, ["tap"]],
          [PressRecognizer]
        ],
        cssProps: {
          userSelect: "none",
          touchSelect: "none",
          touchCallout: "none",
          contentZooming: "none",
          userDrag: "none",
          tapHighlightColor: "rgba(0,0,0,0)"
        }
      };
      var STOP = 1;
      var FORCED_STOP = 2;
      function Manager2(element, options2) {
        this.options = assign5({}, Hammer2.defaults, options2 || {});
        this.options.inputTarget = this.options.inputTarget || element;
        this.handlers = {};
        this.session = {};
        this.recognizers = [];
        this.oldCssProps = {};
        this.element = element;
        this.input = createInputInstance(this);
        this.touchAction = new TouchAction(this, this.options.touchAction);
        toggleCssProps(this, true);
        each(this.options.recognizers, function(item) {
          var recognizer = this.add(new item[0](item[1]));
          item[2] && recognizer.recognizeWith(item[2]);
          item[3] && recognizer.requireFailure(item[3]);
        }, this);
      }
      Manager2.prototype = {
        set: function(options2) {
          assign5(this.options, options2);
          if (options2.touchAction) {
            this.touchAction.update();
          }
          if (options2.inputTarget) {
            this.input.destroy();
            this.input.target = options2.inputTarget;
            this.input.init();
          }
          return this;
        },
        stop: function(force) {
          this.session.stopped = force ? FORCED_STOP : STOP;
        },
        recognize: function(inputData) {
          var session = this.session;
          if (session.stopped) {
            return;
          }
          this.touchAction.preventDefaults(inputData);
          var recognizer;
          var recognizers = this.recognizers;
          var curRecognizer = session.curRecognizer;
          if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
            curRecognizer = session.curRecognizer = null;
          }
          var i = 0;
          while (i < recognizers.length) {
            recognizer = recognizers[i];
            if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer || recognizer.canRecognizeWith(curRecognizer))) {
              recognizer.recognize(inputData);
            } else {
              recognizer.reset();
            }
            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
              curRecognizer = session.curRecognizer = recognizer;
            }
            i++;
          }
        },
        get: function(recognizer) {
          if (recognizer instanceof Recognizer) {
            return recognizer;
          }
          var recognizers = this.recognizers;
          for (var i = 0; i < recognizers.length; i++) {
            if (recognizers[i].options.event == recognizer) {
              return recognizers[i];
            }
          }
          return null;
        },
        add: function(recognizer) {
          if (invokeArrayArg(recognizer, "add", this)) {
            return this;
          }
          var existing = this.get(recognizer.options.event);
          if (existing) {
            this.remove(existing);
          }
          this.recognizers.push(recognizer);
          recognizer.manager = this;
          this.touchAction.update();
          return recognizer;
        },
        remove: function(recognizer) {
          if (invokeArrayArg(recognizer, "remove", this)) {
            return this;
          }
          recognizer = this.get(recognizer);
          if (recognizer) {
            var recognizers = this.recognizers;
            var index2 = inArray(recognizers, recognizer);
            if (index2 !== -1) {
              recognizers.splice(index2, 1);
              this.touchAction.update();
            }
          }
          return this;
        },
        on: function(events, handler) {
          if (events === undefined2) {
            return;
          }
          if (handler === undefined2) {
            return;
          }
          var handlers = this.handlers;
          each(splitStr(events), function(event2) {
            handlers[event2] = handlers[event2] || [];
            handlers[event2].push(handler);
          });
          return this;
        },
        off: function(events, handler) {
          if (events === undefined2) {
            return;
          }
          var handlers = this.handlers;
          each(splitStr(events), function(event2) {
            if (!handler) {
              delete handlers[event2];
            } else {
              handlers[event2] && handlers[event2].splice(inArray(handlers[event2], handler), 1);
            }
          });
          return this;
        },
        emit: function(event2, data) {
          if (this.options.domEvents) {
            triggerDomEvent(event2, data);
          }
          var handlers = this.handlers[event2] && this.handlers[event2].slice();
          if (!handlers || !handlers.length) {
            return;
          }
          data.type = event2;
          data.preventDefault = function() {
            data.srcEvent.preventDefault();
          };
          var i = 0;
          while (i < handlers.length) {
            handlers[i](data);
            i++;
          }
        },
        destroy: function() {
          this.element && toggleCssProps(this, false);
          this.handlers = {};
          this.session = {};
          this.input.destroy();
          this.element = null;
        }
      };
      function toggleCssProps(manager, add3) {
        var element = manager.element;
        if (!element.style) {
          return;
        }
        var prop;
        each(manager.options.cssProps, function(value, name2) {
          prop = prefixed(element.style, name2);
          if (add3) {
            manager.oldCssProps[prop] = element.style[prop];
            element.style[prop] = value;
          } else {
            element.style[prop] = manager.oldCssProps[prop] || "";
          }
        });
        if (!add3) {
          manager.oldCssProps = {};
        }
      }
      function triggerDomEvent(event2, data) {
        var gestureEvent = document2.createEvent("Event");
        gestureEvent.initEvent(event2, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
      }
      assign5(Hammer2, {
        INPUT_START,
        INPUT_MOVE,
        INPUT_END,
        INPUT_CANCEL,
        STATE_POSSIBLE,
        STATE_BEGAN,
        STATE_CHANGED,
        STATE_ENDED,
        STATE_RECOGNIZED,
        STATE_CANCELLED,
        STATE_FAILED,
        DIRECTION_NONE,
        DIRECTION_LEFT,
        DIRECTION_RIGHT,
        DIRECTION_UP,
        DIRECTION_DOWN,
        DIRECTION_HORIZONTAL,
        DIRECTION_VERTICAL,
        DIRECTION_ALL,
        Manager: Manager2,
        Input,
        TouchAction,
        TouchInput,
        MouseInput,
        PointerEventInput,
        TouchMouseInput,
        SingleTouchInput,
        Recognizer,
        AttrRecognizer,
        Tap: TapRecognizer,
        Pan: PanRecognizer,
        Swipe: SwipeRecognizer,
        Pinch: PinchRecognizer,
        Rotate: RotateRecognizer,
        Press: PressRecognizer,
        on: addEventListeners,
        off: removeEventListeners,
        each,
        merge,
        extend: extend2,
        assign: assign5,
        inherit,
        bindFn,
        prefixed
      });
      var freeGlobal = typeof window2 !== "undefined" ? window2 : typeof self !== "undefined" ? self : {};
      freeGlobal.Hammer = Hammer2;
      if (typeof define === "function" && define.amd) {
        define(function() {
          return Hammer2;
        });
      } else if (typeof module2 != "undefined" && module2.exports) {
        module2.exports = Hammer2;
      } else {
        window2[exportName] = Hammer2;
      }
    })(window, document, "Hammer");
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianDmnPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");
var ObsidianDmnPluginSettings = class {
  constructor() {
    this.readonly_by_default = true;
    this.opendiagram_by_default = true;
    this.showzoom_by_default = true;
    this.height_by_default = 400;
    this.force_white_background_by_default = true;
  }
};
var ObsidianDmnPluginSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Default height").setDesc('Set the default height of the rendered DMN. Adjust this inline with e.g., `"height":600`').addSlider((slider) => slider.setValue(this.plugin.settings.height_by_default).onChange((value) => {
      this.plugin.settings.height_by_default = value;
      this.plugin.saveData(this.plugin.settings);
    }).setLimits(300, 1e3, 20).setDynamicTooltip());
    new import_obsidian.Setting(containerEl).setName("Default show open diagram").setDesc("Set the default for showing the 'Open diagram' link").addToggle((toggle2) => toggle2.setValue(this.plugin.settings.opendiagram_by_default).onChange((value) => {
      this.plugin.settings.opendiagram_by_default = value;
      this.plugin.saveData(this.plugin.settings);
    }));
    new import_obsidian.Setting(containerEl).setName("Default show zoom buttons").setDesc("Set the default for showing the zoom buttons (for DRD)").addToggle((toggle2) => toggle2.setValue(this.plugin.settings.showzoom_by_default).onChange((value) => {
      this.plugin.settings.showzoom_by_default = value;
      this.plugin.saveData(this.plugin.settings);
    }));
    new import_obsidian.Setting(containerEl).setName("Default force white background").setDesc("Set the default for forcing a white background").addToggle((toggle2) => toggle2.setValue(this.plugin.settings.force_white_background_by_default).onChange((value) => {
      this.plugin.settings.force_white_background_by_default = value;
      this.plugin.saveData(this.plugin.settings);
    }));
  }
};

// node_modules/diagram-js/node_modules/min-dash/dist/index.esm.js
var nativeToString = Object.prototype.toString;
var nativeHasOwnProperty = Object.prototype.hasOwnProperty;
function isUndefined(obj) {
  return obj === void 0;
}
function isDefined(obj) {
  return obj !== void 0;
}
function isArray(obj) {
  return nativeToString.call(obj) === "[object Array]";
}
function isObject(obj) {
  return nativeToString.call(obj) === "[object Object]";
}
function isNumber(obj) {
  return nativeToString.call(obj) === "[object Number]";
}
function isFunction(obj) {
  const tag = nativeToString.call(obj);
  return tag === "[object Function]" || tag === "[object AsyncFunction]" || tag === "[object GeneratorFunction]" || tag === "[object AsyncGeneratorFunction]" || tag === "[object Proxy]";
}
function isString(obj) {
  return nativeToString.call(obj) === "[object String]";
}
function has(target, key) {
  return nativeHasOwnProperty.call(target, key);
}
function find(collection, matcher) {
  matcher = toMatcher(matcher);
  let match2;
  forEach(collection, function(val, key) {
    if (matcher(val, key)) {
      match2 = val;
      return false;
    }
  });
  return match2;
}
function filter(collection, matcher) {
  let result = [];
  forEach(collection, function(val, key) {
    if (matcher(val, key)) {
      result.push(val);
    }
  });
  return result;
}
function forEach(collection, iterator) {
  let val, result;
  if (isUndefined(collection)) {
    return;
  }
  const convertKey = isArray(collection) ? toNum : identity;
  for (let key in collection) {
    if (has(collection, key)) {
      val = collection[key];
      result = iterator(val, convertKey(key));
      if (result === false) {
        return val;
      }
    }
  }
}
function reduce(collection, iterator, result) {
  forEach(collection, function(value, idx) {
    result = iterator(result, value, idx);
  });
  return result;
}
function every(collection, matcher) {
  return !!reduce(collection, function(matches4, val, key) {
    return matches4 && matcher(val, key);
  }, true);
}
function matchPattern(pattern) {
  return function(el) {
    return every(pattern, function(val, key) {
      return el[key] === val;
    });
  };
}
function toMatcher(matcher) {
  return isFunction(matcher) ? matcher : (e2) => {
    return e2 === matcher;
  };
}
function identity(arg) {
  return arg;
}
function toNum(arg) {
  return Number(arg);
}
function debounce(fn, timeout) {
  let timer;
  let lastArgs;
  let lastThis;
  let lastNow;
  function fire(force) {
    let now = Date.now();
    let scheduledDiff = force ? 0 : lastNow + timeout - now;
    if (scheduledDiff > 0) {
      return schedule(scheduledDiff);
    }
    fn.apply(lastThis, lastArgs);
    clear4();
  }
  function schedule(timeout2) {
    timer = setTimeout(fire, timeout2);
  }
  function clear4() {
    if (timer) {
      clearTimeout(timer);
    }
    timer = lastNow = lastArgs = lastThis = void 0;
  }
  function flush() {
    if (timer) {
      fire(true);
    }
    clear4();
  }
  function callback(...args) {
    lastNow = Date.now();
    lastArgs = args;
    lastThis = this;
    if (!timer) {
      schedule(timeout);
    }
  }
  callback.flush = flush;
  callback.cancel = clear4;
  return callback;
}
function bind(fn, target) {
  return fn.bind(target);
}
function assign(target, ...others) {
  return Object.assign(target, ...others);
}

// node_modules/diagram-js/lib/core/EventBus.js
var FN_REF = "__fn";
var DEFAULT_PRIORITY = 1e3;
var slice = Array.prototype.slice;
function EventBus() {
  this._listeners = {};
  this.on("diagram.destroy", 1, this._destroy, this);
}
EventBus.prototype.on = function(events, priority, callback, that) {
  events = isArray(events) ? events : [events];
  if (isFunction(priority)) {
    that = callback;
    callback = priority;
    priority = DEFAULT_PRIORITY;
  }
  if (!isNumber(priority)) {
    throw new Error("priority must be a number");
  }
  var actualCallback = callback;
  if (that) {
    actualCallback = bind(callback, that);
    actualCallback[FN_REF] = callback[FN_REF] || callback;
  }
  var self2 = this;
  events.forEach(function(e2) {
    self2._addListener(e2, {
      priority,
      callback: actualCallback,
      next: null
    });
  });
};
EventBus.prototype.once = function(event2, priority, callback, that) {
  var self2 = this;
  if (isFunction(priority)) {
    that = callback;
    callback = priority;
    priority = DEFAULT_PRIORITY;
  }
  if (!isNumber(priority)) {
    throw new Error("priority must be a number");
  }
  function wrappedCallback() {
    wrappedCallback.__isTomb = true;
    var result = callback.apply(that, arguments);
    self2.off(event2, wrappedCallback);
    return result;
  }
  wrappedCallback[FN_REF] = callback;
  this.on(event2, priority, wrappedCallback);
};
EventBus.prototype.off = function(events, callback) {
  events = isArray(events) ? events : [events];
  var self2 = this;
  events.forEach(function(event2) {
    self2._removeListener(event2, callback);
  });
};
EventBus.prototype.createEvent = function(data) {
  var event2 = new InternalEvent();
  event2.init(data);
  return event2;
};
EventBus.prototype.fire = function(type, data) {
  var event2, firstListener, returnValue, args;
  args = slice.call(arguments);
  if (typeof type === "object") {
    data = type;
    type = data.type;
  }
  if (!type) {
    throw new Error("no event type specified");
  }
  firstListener = this._listeners[type];
  if (!firstListener) {
    return;
  }
  if (data instanceof InternalEvent) {
    event2 = data;
  } else {
    event2 = this.createEvent(data);
  }
  args[0] = event2;
  var originalType = event2.type;
  if (type !== originalType) {
    event2.type = type;
  }
  try {
    returnValue = this._invokeListeners(event2, args, firstListener);
  } finally {
    if (type !== originalType) {
      event2.type = originalType;
    }
  }
  if (returnValue === void 0 && event2.defaultPrevented) {
    returnValue = false;
  }
  return returnValue;
};
EventBus.prototype.handleError = function(error3) {
  return this.fire("error", { error: error3 }) === false;
};
EventBus.prototype._destroy = function() {
  this._listeners = {};
};
EventBus.prototype._invokeListeners = function(event2, args, listener) {
  var returnValue;
  while (listener) {
    if (event2.cancelBubble) {
      break;
    }
    returnValue = this._invokeListener(event2, args, listener);
    listener = listener.next;
  }
  return returnValue;
};
EventBus.prototype._invokeListener = function(event2, args, listener) {
  var returnValue;
  if (listener.callback.__isTomb) {
    return returnValue;
  }
  try {
    returnValue = invokeFunction(listener.callback, args);
    if (returnValue !== void 0) {
      event2.returnValue = returnValue;
      event2.stopPropagation();
    }
    if (returnValue === false) {
      event2.preventDefault();
    }
  } catch (error3) {
    if (!this.handleError(error3)) {
      console.error("unhandled error in event listener", error3);
      throw error3;
    }
  }
  return returnValue;
};
EventBus.prototype._addListener = function(event2, newListener) {
  var listener = this._getListeners(event2), previousListener;
  if (!listener) {
    this._setListeners(event2, newListener);
    return;
  }
  while (listener) {
    if (listener.priority < newListener.priority) {
      newListener.next = listener;
      if (previousListener) {
        previousListener.next = newListener;
      } else {
        this._setListeners(event2, newListener);
      }
      return;
    }
    previousListener = listener;
    listener = listener.next;
  }
  previousListener.next = newListener;
};
EventBus.prototype._getListeners = function(name2) {
  return this._listeners[name2];
};
EventBus.prototype._setListeners = function(name2, listener) {
  this._listeners[name2] = listener;
};
EventBus.prototype._removeListener = function(event2, callback) {
  var listener = this._getListeners(event2), nextListener, previousListener, listenerCallback;
  if (!callback) {
    this._setListeners(event2, null);
    return;
  }
  while (listener) {
    nextListener = listener.next;
    listenerCallback = listener.callback;
    if (listenerCallback === callback || listenerCallback[FN_REF] === callback) {
      if (previousListener) {
        previousListener.next = nextListener;
      } else {
        this._setListeners(event2, nextListener);
      }
    }
    previousListener = listener;
    listener = nextListener;
  }
};
function InternalEvent() {
}
InternalEvent.prototype.stopPropagation = function() {
  this.cancelBubble = true;
};
InternalEvent.prototype.preventDefault = function() {
  this.defaultPrevented = true;
};
InternalEvent.prototype.init = function(data) {
  assign(this, data || {});
};
function invokeFunction(fn, args) {
  return fn.apply(null, args);
}

// node_modules/min-dash/dist/index.esm.js
var nativeToString2 = Object.prototype.toString;
var nativeHasOwnProperty2 = Object.prototype.hasOwnProperty;
function isUndefined2(obj) {
  return obj === void 0;
}
function isDefined2(obj) {
  return obj !== void 0;
}
function isArray2(obj) {
  return nativeToString2.call(obj) === "[object Array]";
}
function isObject2(obj) {
  return nativeToString2.call(obj) === "[object Object]";
}
function isNumber2(obj) {
  return nativeToString2.call(obj) === "[object Number]";
}
function isFunction2(obj) {
  var tag = nativeToString2.call(obj);
  return tag === "[object Function]" || tag === "[object AsyncFunction]" || tag === "[object GeneratorFunction]" || tag === "[object AsyncGeneratorFunction]" || tag === "[object Proxy]";
}
function isString2(obj) {
  return nativeToString2.call(obj) === "[object String]";
}
function has2(target, key) {
  return nativeHasOwnProperty2.call(target, key);
}
function find2(collection, matcher) {
  matcher = toMatcher2(matcher);
  var match2;
  forEach2(collection, function(val, key) {
    if (matcher(val, key)) {
      match2 = val;
      return false;
    }
  });
  return match2;
}
function findIndex(collection, matcher) {
  matcher = toMatcher2(matcher);
  var idx = isArray2(collection) ? -1 : void 0;
  forEach2(collection, function(val, key) {
    if (matcher(val, key)) {
      idx = key;
      return false;
    }
  });
  return idx;
}
function filter2(collection, matcher) {
  var result = [];
  forEach2(collection, function(val, key) {
    if (matcher(val, key)) {
      result.push(val);
    }
  });
  return result;
}
function forEach2(collection, iterator) {
  var val, result;
  if (isUndefined2(collection)) {
    return;
  }
  var convertKey = isArray2(collection) ? toNum2 : identity2;
  for (var key in collection) {
    if (has2(collection, key)) {
      val = collection[key];
      result = iterator(val, convertKey(key));
      if (result === false) {
        return val;
      }
    }
  }
}
function reduce2(collection, iterator, result) {
  forEach2(collection, function(value, idx) {
    result = iterator(result, value, idx);
  });
  return result;
}
function every2(collection, matcher) {
  return !!reduce2(collection, function(matches4, val, key) {
    return matches4 && matcher(val, key);
  }, true);
}
function map(collection, fn) {
  var result = [];
  forEach2(collection, function(val, key) {
    result.push(fn(val, key));
  });
  return result;
}
function toMatcher2(matcher) {
  return isFunction2(matcher) ? matcher : function(e2) {
    return e2 === matcher;
  };
}
function identity2(arg) {
  return arg;
}
function toNum2(arg) {
  return Number(arg);
}
function debounce2(fn, timeout) {
  var timer;
  var lastArgs;
  var lastThis;
  var lastNow;
  function fire(force) {
    var now = Date.now();
    var scheduledDiff = force ? 0 : lastNow + timeout - now;
    if (scheduledDiff > 0) {
      return schedule(scheduledDiff);
    }
    fn.apply(lastThis, lastArgs);
    clear4();
  }
  function schedule(timeout2) {
    timer = setTimeout(fire, timeout2);
  }
  function clear4() {
    if (timer) {
      clearTimeout(timer);
    }
    timer = lastNow = lastArgs = lastThis = void 0;
  }
  function flush() {
    if (timer) {
      fire(true);
    }
    clear4();
  }
  function callback() {
    lastNow = Date.now();
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    lastArgs = args;
    lastThis = this;
    if (!timer) {
      schedule(timeout);
    }
  }
  callback.flush = flush;
  callback.cancel = clear4;
  return callback;
}
function bind2(fn, target) {
  return fn.bind(target);
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function assign2(target) {
  for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    others[_key - 1] = arguments[_key];
  }
  return _extends.apply(void 0, [target].concat(others));
}
function pick(target, properties) {
  var result = {};
  var obj = Object(target);
  forEach2(properties, function(prop) {
    if (prop in obj) {
      result[prop] = target[prop];
    }
  });
  return result;
}

// node_modules/moddle/dist/index.esm.js
function Base() {
}
Base.prototype.get = function(name2) {
  return this.$model.properties.get(this, name2);
};
Base.prototype.set = function(name2, value) {
  this.$model.properties.set(this, name2, value);
};
function Factory(model, properties) {
  this.model = model;
  this.properties = properties;
}
Factory.prototype.createType = function(descriptor) {
  var model = this.model;
  var props = this.properties, prototype = Object.create(Base.prototype);
  forEach2(descriptor.properties, function(p) {
    if (!p.isMany && p.default !== void 0) {
      prototype[p.name] = p.default;
    }
  });
  props.defineModel(prototype, model);
  props.defineDescriptor(prototype, descriptor);
  var name2 = descriptor.ns.name;
  function ModdleElement(attrs) {
    props.define(this, "$type", { value: name2, enumerable: true });
    props.define(this, "$attrs", { value: {} });
    props.define(this, "$parent", { writable: true });
    forEach2(attrs, bind2(function(val, key) {
      this.set(key, val);
    }, this));
  }
  ModdleElement.prototype = prototype;
  ModdleElement.hasType = prototype.$instanceOf = this.model.hasType;
  props.defineModel(ModdleElement, model);
  props.defineDescriptor(ModdleElement, descriptor);
  return ModdleElement;
};
var BUILTINS = {
  String: true,
  Boolean: true,
  Integer: true,
  Real: true,
  Element: true
};
var TYPE_CONVERTERS = {
  String: function(s) {
    return s;
  },
  Boolean: function(s) {
    return s === "true";
  },
  Integer: function(s) {
    return parseInt(s, 10);
  },
  Real: function(s) {
    return parseFloat(s);
  }
};
function coerceType(type, value) {
  var converter = TYPE_CONVERTERS[type];
  if (converter) {
    return converter(value);
  } else {
    return value;
  }
}
function isBuiltIn(type) {
  return !!BUILTINS[type];
}
function isSimple(type) {
  return !!TYPE_CONVERTERS[type];
}
function parseName(name2, defaultPrefix) {
  var parts = name2.split(/:/), localName, prefix4;
  if (parts.length === 1) {
    localName = name2;
    prefix4 = defaultPrefix;
  } else if (parts.length === 2) {
    localName = parts[1];
    prefix4 = parts[0];
  } else {
    throw new Error("expected <prefix:localName> or <localName>, got " + name2);
  }
  name2 = (prefix4 ? prefix4 + ":" : "") + localName;
  return {
    name: name2,
    prefix: prefix4,
    localName
  };
}
function DescriptorBuilder(nameNs) {
  this.ns = nameNs;
  this.name = nameNs.name;
  this.allTypes = [];
  this.allTypesByName = {};
  this.properties = [];
  this.propertiesByName = {};
}
DescriptorBuilder.prototype.build = function() {
  return pick(this, [
    "ns",
    "name",
    "allTypes",
    "allTypesByName",
    "properties",
    "propertiesByName",
    "bodyProperty",
    "idProperty"
  ]);
};
DescriptorBuilder.prototype.addProperty = function(p, idx, validate) {
  if (typeof idx === "boolean") {
    validate = idx;
    idx = void 0;
  }
  this.addNamedProperty(p, validate !== false);
  var properties = this.properties;
  if (idx !== void 0) {
    properties.splice(idx, 0, p);
  } else {
    properties.push(p);
  }
};
DescriptorBuilder.prototype.replaceProperty = function(oldProperty, newProperty, replace) {
  var oldNameNs = oldProperty.ns;
  var props = this.properties, propertiesByName = this.propertiesByName, rename = oldProperty.name !== newProperty.name;
  if (oldProperty.isId) {
    if (!newProperty.isId) {
      throw new Error("property <" + newProperty.ns.name + "> must be id property to refine <" + oldProperty.ns.name + ">");
    }
    this.setIdProperty(newProperty, false);
  }
  if (oldProperty.isBody) {
    if (!newProperty.isBody) {
      throw new Error("property <" + newProperty.ns.name + "> must be body property to refine <" + oldProperty.ns.name + ">");
    }
    this.setBodyProperty(newProperty, false);
  }
  var idx = props.indexOf(oldProperty);
  if (idx === -1) {
    throw new Error("property <" + oldNameNs.name + "> not found in property list");
  }
  props.splice(idx, 1);
  this.addProperty(newProperty, replace ? void 0 : idx, rename);
  propertiesByName[oldNameNs.name] = propertiesByName[oldNameNs.localName] = newProperty;
};
DescriptorBuilder.prototype.redefineProperty = function(p, targetPropertyName, replace) {
  var nsPrefix = p.ns.prefix;
  var parts = targetPropertyName.split("#");
  var name2 = parseName(parts[0], nsPrefix);
  var attrName = parseName(parts[1], name2.prefix).name;
  var redefinedProperty = this.propertiesByName[attrName];
  if (!redefinedProperty) {
    throw new Error("refined property <" + attrName + "> not found");
  } else {
    this.replaceProperty(redefinedProperty, p, replace);
  }
  delete p.redefines;
};
DescriptorBuilder.prototype.addNamedProperty = function(p, validate) {
  var ns3 = p.ns, propsByName = this.propertiesByName;
  if (validate) {
    this.assertNotDefined(p, ns3.name);
    this.assertNotDefined(p, ns3.localName);
  }
  propsByName[ns3.name] = propsByName[ns3.localName] = p;
};
DescriptorBuilder.prototype.removeNamedProperty = function(p) {
  var ns3 = p.ns, propsByName = this.propertiesByName;
  delete propsByName[ns3.name];
  delete propsByName[ns3.localName];
};
DescriptorBuilder.prototype.setBodyProperty = function(p, validate) {
  if (validate && this.bodyProperty) {
    throw new Error("body property defined multiple times (<" + this.bodyProperty.ns.name + ">, <" + p.ns.name + ">)");
  }
  this.bodyProperty = p;
};
DescriptorBuilder.prototype.setIdProperty = function(p, validate) {
  if (validate && this.idProperty) {
    throw new Error("id property defined multiple times (<" + this.idProperty.ns.name + ">, <" + p.ns.name + ">)");
  }
  this.idProperty = p;
};
DescriptorBuilder.prototype.assertNotDefined = function(p, name2) {
  var propertyName = p.name, definedProperty = this.propertiesByName[propertyName];
  if (definedProperty) {
    throw new Error("property <" + propertyName + "> already defined; override of <" + definedProperty.definedBy.ns.name + "#" + definedProperty.ns.name + "> by <" + p.definedBy.ns.name + "#" + p.ns.name + "> not allowed without redefines");
  }
};
DescriptorBuilder.prototype.hasProperty = function(name2) {
  return this.propertiesByName[name2];
};
DescriptorBuilder.prototype.addTrait = function(t, inherited) {
  var typesByName = this.allTypesByName, types3 = this.allTypes;
  var typeName = t.name;
  if (typeName in typesByName) {
    return;
  }
  forEach2(t.properties, bind2(function(p) {
    p = assign2({}, p, {
      name: p.ns.localName,
      inherited
    });
    Object.defineProperty(p, "definedBy", {
      value: t
    });
    var replaces = p.replaces, redefines = p.redefines;
    if (replaces || redefines) {
      this.redefineProperty(p, replaces || redefines, replaces);
    } else {
      if (p.isBody) {
        this.setBodyProperty(p);
      }
      if (p.isId) {
        this.setIdProperty(p);
      }
      this.addProperty(p);
    }
  }, this));
  types3.push(t);
  typesByName[typeName] = t;
};
function Registry(packages2, properties) {
  this.packageMap = {};
  this.typeMap = {};
  this.packages = [];
  this.properties = properties;
  forEach2(packages2, bind2(this.registerPackage, this));
}
Registry.prototype.getPackage = function(uriOrPrefix) {
  return this.packageMap[uriOrPrefix];
};
Registry.prototype.getPackages = function() {
  return this.packages;
};
Registry.prototype.registerPackage = function(pkg) {
  pkg = assign2({}, pkg);
  var pkgMap = this.packageMap;
  ensureAvailable(pkgMap, pkg, "prefix");
  ensureAvailable(pkgMap, pkg, "uri");
  forEach2(pkg.types, bind2(function(descriptor) {
    this.registerType(descriptor, pkg);
  }, this));
  pkgMap[pkg.uri] = pkgMap[pkg.prefix] = pkg;
  this.packages.push(pkg);
};
Registry.prototype.registerType = function(type, pkg) {
  type = assign2({}, type, {
    superClass: (type.superClass || []).slice(),
    extends: (type.extends || []).slice(),
    properties: (type.properties || []).slice(),
    meta: assign2(type.meta || {})
  });
  var ns3 = parseName(type.name, pkg.prefix), name2 = ns3.name, propertiesByName = {};
  forEach2(type.properties, bind2(function(p) {
    var propertyNs = parseName(p.name, ns3.prefix), propertyName = propertyNs.name;
    if (!isBuiltIn(p.type)) {
      p.type = parseName(p.type, propertyNs.prefix).name;
    }
    assign2(p, {
      ns: propertyNs,
      name: propertyName
    });
    propertiesByName[propertyName] = p;
  }, this));
  assign2(type, {
    ns: ns3,
    name: name2,
    propertiesByName
  });
  forEach2(type.extends, bind2(function(extendsName) {
    var extended = this.typeMap[extendsName];
    extended.traits = extended.traits || [];
    extended.traits.push(name2);
  }, this));
  this.definePackage(type, pkg);
  this.typeMap[name2] = type;
};
Registry.prototype.mapTypes = function(nsName2, iterator, trait) {
  var type = isBuiltIn(nsName2.name) ? { name: nsName2.name } : this.typeMap[nsName2.name];
  var self2 = this;
  function traverseTrait(cls) {
    return traverseSuper(cls, true);
  }
  function traverseSuper(cls, trait2) {
    var parentNs = parseName(cls, isBuiltIn(cls) ? "" : nsName2.prefix);
    self2.mapTypes(parentNs, iterator, trait2);
  }
  if (!type) {
    throw new Error("unknown type <" + nsName2.name + ">");
  }
  forEach2(type.superClass, trait ? traverseTrait : traverseSuper);
  iterator(type, !trait);
  forEach2(type.traits, traverseTrait);
};
Registry.prototype.getEffectiveDescriptor = function(name2) {
  var nsName2 = parseName(name2);
  var builder = new DescriptorBuilder(nsName2);
  this.mapTypes(nsName2, function(type, inherited) {
    builder.addTrait(type, inherited);
  });
  var descriptor = builder.build();
  this.definePackage(descriptor, descriptor.allTypes[descriptor.allTypes.length - 1].$pkg);
  return descriptor;
};
Registry.prototype.definePackage = function(target, pkg) {
  this.properties.define(target, "$pkg", { value: pkg });
};
function ensureAvailable(packageMap, pkg, identifierKey) {
  var value = pkg[identifierKey];
  if (value in packageMap) {
    throw new Error("package with " + identifierKey + " <" + value + "> already defined");
  }
}
function Properties(model) {
  this.model = model;
}
Properties.prototype.set = function(target, name2, value) {
  if (!isString2(name2) || !name2.length) {
    throw new TypeError("property name must be a non-empty string");
  }
  var property = this.model.getPropertyDescriptor(target, name2);
  var propertyName = property && property.name;
  if (isUndefined3(value)) {
    if (property) {
      delete target[propertyName];
    } else {
      delete target.$attrs[name2];
    }
  } else {
    if (property) {
      if (propertyName in target) {
        target[propertyName] = value;
      } else {
        defineProperty(target, property, value);
      }
    } else {
      target.$attrs[name2] = value;
    }
  }
};
Properties.prototype.get = function(target, name2) {
  var property = this.model.getPropertyDescriptor(target, name2);
  if (!property) {
    return target.$attrs[name2];
  }
  var propertyName = property.name;
  if (!target[propertyName] && property.isMany) {
    defineProperty(target, property, []);
  }
  return target[propertyName];
};
Properties.prototype.define = function(target, name2, options2) {
  if (!options2.writable) {
    var value = options2.value;
    options2 = assign2({}, options2, {
      get: function() {
        return value;
      }
    });
    delete options2.value;
  }
  Object.defineProperty(target, name2, options2);
};
Properties.prototype.defineDescriptor = function(target, descriptor) {
  this.define(target, "$descriptor", { value: descriptor });
};
Properties.prototype.defineModel = function(target, model) {
  this.define(target, "$model", { value: model });
};
function isUndefined3(val) {
  return typeof val === "undefined";
}
function defineProperty(target, property, value) {
  Object.defineProperty(target, property.name, {
    enumerable: !property.isReference,
    writable: true,
    value,
    configurable: true
  });
}
function Moddle(packages2) {
  this.properties = new Properties(this);
  this.factory = new Factory(this, this.properties);
  this.registry = new Registry(packages2, this.properties);
  this.typeCache = {};
}
Moddle.prototype.create = function(descriptor, attrs) {
  var Type = this.getType(descriptor);
  if (!Type) {
    throw new Error("unknown type <" + descriptor + ">");
  }
  return new Type(attrs);
};
Moddle.prototype.getType = function(descriptor) {
  var cache = this.typeCache;
  var name2 = isString2(descriptor) ? descriptor : descriptor.ns.name;
  var type = cache[name2];
  if (!type) {
    descriptor = this.registry.getEffectiveDescriptor(name2);
    type = cache[name2] = this.factory.createType(descriptor);
  }
  return type;
};
Moddle.prototype.createAny = function(name2, nsUri, properties) {
  var nameNs = parseName(name2);
  var element = {
    $type: name2,
    $instanceOf: function(type) {
      return type === this.$type;
    }
  };
  var descriptor = {
    name: name2,
    isGeneric: true,
    ns: {
      prefix: nameNs.prefix,
      localName: nameNs.localName,
      uri: nsUri
    }
  };
  this.properties.defineDescriptor(element, descriptor);
  this.properties.defineModel(element, this);
  this.properties.define(element, "$parent", { enumerable: false, writable: true });
  this.properties.define(element, "$instanceOf", { enumerable: false, writable: true });
  forEach2(properties, function(a, key) {
    if (isObject2(a) && a.value !== void 0) {
      element[a.name] = a.value;
    } else {
      element[key] = a;
    }
  });
  return element;
};
Moddle.prototype.getPackage = function(uriOrPrefix) {
  return this.registry.getPackage(uriOrPrefix);
};
Moddle.prototype.getPackages = function() {
  return this.registry.getPackages();
};
Moddle.prototype.getElementDescriptor = function(element) {
  return element.$descriptor;
};
Moddle.prototype.hasType = function(element, type) {
  if (type === void 0) {
    type = element;
    element = this;
  }
  var descriptor = element.$model.getElementDescriptor(element);
  return type in descriptor.allTypesByName;
};
Moddle.prototype.getPropertyDescriptor = function(element, property) {
  return this.getElementDescriptor(element).propertiesByName[property];
};
Moddle.prototype.getTypeDescriptor = function(type) {
  return this.registry.typeMap[type];
};

// node_modules/saxen/dist/index.esm.js
var fromCharCode = String.fromCharCode;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var ENTITY_PATTERN = /&#(\d+);|&#x([0-9a-f]+);|&(\w+);/ig;
var ENTITY_MAPPING = {
  "amp": "&",
  "apos": "'",
  "gt": ">",
  "lt": "<",
  "quot": '"'
};
Object.keys(ENTITY_MAPPING).forEach(function(k) {
  ENTITY_MAPPING[k.toUpperCase()] = ENTITY_MAPPING[k];
});
function replaceEntities(_, d, x, z) {
  if (z) {
    if (hasOwnProperty.call(ENTITY_MAPPING, z)) {
      return ENTITY_MAPPING[z];
    } else {
      return "&" + z + ";";
    }
  }
  if (d) {
    return fromCharCode(d);
  }
  return fromCharCode(parseInt(x, 16));
}
function decodeEntities(s) {
  if (s.length > 3 && s.indexOf("&") !== -1) {
    return s.replace(ENTITY_PATTERN, replaceEntities);
  }
  return s;
}
var XSI_URI = "http://www.w3.org/2001/XMLSchema-instance";
var XSI_PREFIX = "xsi";
var XSI_TYPE = "xsi:type";
var NON_WHITESPACE_OUTSIDE_ROOT_NODE = "non-whitespace outside of root node";
function error(msg) {
  return new Error(msg);
}
function missingNamespaceForPrefix(prefix4) {
  return "missing namespace for prefix <" + prefix4 + ">";
}
function getter(getFn) {
  return {
    "get": getFn,
    "enumerable": true
  };
}
function cloneNsMatrix(nsMatrix) {
  var clone = {}, key;
  for (key in nsMatrix) {
    clone[key] = nsMatrix[key];
  }
  return clone;
}
function uriPrefix(prefix4) {
  return prefix4 + "$uri";
}
function buildNsMatrix(nsUriToPrefix) {
  var nsMatrix = {}, uri2, prefix4;
  for (uri2 in nsUriToPrefix) {
    prefix4 = nsUriToPrefix[uri2];
    nsMatrix[prefix4] = prefix4;
    nsMatrix[uriPrefix(prefix4)] = uri2;
  }
  return nsMatrix;
}
function noopGetContext() {
  return { "line": 0, "column": 0 };
}
function throwFunc(err) {
  throw err;
}
function Parser(options2) {
  if (!this) {
    return new Parser(options2);
  }
  var proxy = options2 && options2["proxy"];
  var onText, onOpenTag, onCloseTag, onCDATA, onError = throwFunc, onWarning, onComment, onQuestion, onAttention;
  var getContext = noopGetContext;
  var maybeNS = false;
  var isNamespace = false;
  var returnError = null;
  var parseStop = false;
  var nsUriToPrefix;
  function handleError(err) {
    if (!(err instanceof Error)) {
      err = error(err);
    }
    returnError = err;
    onError(err, getContext);
  }
  function handleWarning(err) {
    if (!onWarning) {
      return;
    }
    if (!(err instanceof Error)) {
      err = error(err);
    }
    onWarning(err, getContext);
  }
  this["on"] = function(name2, cb) {
    if (typeof cb !== "function") {
      throw error("required args <name, cb>");
    }
    switch (name2) {
      case "openTag":
        onOpenTag = cb;
        break;
      case "text":
        onText = cb;
        break;
      case "closeTag":
        onCloseTag = cb;
        break;
      case "error":
        onError = cb;
        break;
      case "warn":
        onWarning = cb;
        break;
      case "cdata":
        onCDATA = cb;
        break;
      case "attention":
        onAttention = cb;
        break;
      case "question":
        onQuestion = cb;
        break;
      case "comment":
        onComment = cb;
        break;
      default:
        throw error("unsupported event: " + name2);
    }
    return this;
  };
  this["ns"] = function(nsMap) {
    if (typeof nsMap === "undefined") {
      nsMap = {};
    }
    if (typeof nsMap !== "object") {
      throw error("required args <nsMap={}>");
    }
    var _nsUriToPrefix = {}, k;
    for (k in nsMap) {
      _nsUriToPrefix[k] = nsMap[k];
    }
    _nsUriToPrefix[XSI_URI] = XSI_PREFIX;
    isNamespace = true;
    nsUriToPrefix = _nsUriToPrefix;
    return this;
  };
  this["parse"] = function(xml2) {
    if (typeof xml2 !== "string") {
      throw error("required args <xml=string>");
    }
    returnError = null;
    parse5(xml2);
    getContext = noopGetContext;
    parseStop = false;
    return returnError;
  };
  this["stop"] = function() {
    parseStop = true;
  };
  function parse5(xml2) {
    var nsMatrixStack = isNamespace ? [] : null, nsMatrix = isNamespace ? buildNsMatrix(nsUriToPrefix) : null, _nsMatrix, nodeStack = [], anonymousNsCount = 0, tagStart = false, tagEnd = false, i = 0, j = 0, x, y, q, w, v, xmlns, elementName, _elementName, elementProxy;
    var attrsString = "", attrsStart = 0, cachedAttrs;
    function getAttrs() {
      if (cachedAttrs !== null) {
        return cachedAttrs;
      }
      var nsUri, nsUriPrefix, nsName2, defaultAlias = isNamespace && nsMatrix["xmlns"], attrList = isNamespace && maybeNS ? [] : null, i2 = attrsStart, s = attrsString, l = s.length, hasNewMatrix, newalias, value, alias, name2, attrs = {}, seenAttrs = {}, skipAttr, w2, j2;
      parseAttr:
        for (; i2 < l; i2++) {
          skipAttr = false;
          w2 = s.charCodeAt(i2);
          if (w2 === 32 || w2 < 14 && w2 > 8) {
            continue;
          }
          if (w2 < 65 || w2 > 122 || w2 > 90 && w2 < 97) {
            if (w2 !== 95 && w2 !== 58) {
              handleWarning("illegal first char attribute name");
              skipAttr = true;
            }
          }
          for (j2 = i2 + 1; j2 < l; j2++) {
            w2 = s.charCodeAt(j2);
            if (w2 > 96 && w2 < 123 || w2 > 64 && w2 < 91 || w2 > 47 && w2 < 59 || w2 === 46 || w2 === 45 || w2 === 95) {
              continue;
            }
            if (w2 === 32 || w2 < 14 && w2 > 8) {
              handleWarning("missing attribute value");
              i2 = j2;
              continue parseAttr;
            }
            if (w2 === 61) {
              break;
            }
            handleWarning("illegal attribute name char");
            skipAttr = true;
          }
          name2 = s.substring(i2, j2);
          if (name2 === "xmlns:xmlns") {
            handleWarning("illegal declaration of xmlns");
            skipAttr = true;
          }
          w2 = s.charCodeAt(j2 + 1);
          if (w2 === 34) {
            j2 = s.indexOf('"', i2 = j2 + 2);
            if (j2 === -1) {
              j2 = s.indexOf("'", i2);
              if (j2 !== -1) {
                handleWarning("attribute value quote missmatch");
                skipAttr = true;
              }
            }
          } else if (w2 === 39) {
            j2 = s.indexOf("'", i2 = j2 + 2);
            if (j2 === -1) {
              j2 = s.indexOf('"', i2);
              if (j2 !== -1) {
                handleWarning("attribute value quote missmatch");
                skipAttr = true;
              }
            }
          } else {
            handleWarning("missing attribute value quotes");
            skipAttr = true;
            for (j2 = j2 + 1; j2 < l; j2++) {
              w2 = s.charCodeAt(j2 + 1);
              if (w2 === 32 || w2 < 14 && w2 > 8) {
                break;
              }
            }
          }
          if (j2 === -1) {
            handleWarning("missing closing quotes");
            j2 = l;
            skipAttr = true;
          }
          if (!skipAttr) {
            value = s.substring(i2, j2);
          }
          i2 = j2;
          for (; j2 + 1 < l; j2++) {
            w2 = s.charCodeAt(j2 + 1);
            if (w2 === 32 || w2 < 14 && w2 > 8) {
              break;
            }
            if (i2 === j2) {
              handleWarning("illegal character after attribute end");
              skipAttr = true;
            }
          }
          i2 = j2 + 1;
          if (skipAttr) {
            continue parseAttr;
          }
          if (name2 in seenAttrs) {
            handleWarning("attribute <" + name2 + "> already defined");
            continue;
          }
          seenAttrs[name2] = true;
          if (!isNamespace) {
            attrs[name2] = value;
            continue;
          }
          if (maybeNS) {
            newalias = name2 === "xmlns" ? "xmlns" : name2.charCodeAt(0) === 120 && name2.substr(0, 6) === "xmlns:" ? name2.substr(6) : null;
            if (newalias !== null) {
              nsUri = decodeEntities(value);
              nsUriPrefix = uriPrefix(newalias);
              alias = nsUriToPrefix[nsUri];
              if (!alias) {
                if (newalias === "xmlns" || nsUriPrefix in nsMatrix && nsMatrix[nsUriPrefix] !== nsUri) {
                  do {
                    alias = "ns" + anonymousNsCount++;
                  } while (typeof nsMatrix[alias] !== "undefined");
                } else {
                  alias = newalias;
                }
                nsUriToPrefix[nsUri] = alias;
              }
              if (nsMatrix[newalias] !== alias) {
                if (!hasNewMatrix) {
                  nsMatrix = cloneNsMatrix(nsMatrix);
                  hasNewMatrix = true;
                }
                nsMatrix[newalias] = alias;
                if (newalias === "xmlns") {
                  nsMatrix[uriPrefix(alias)] = nsUri;
                  defaultAlias = alias;
                }
                nsMatrix[nsUriPrefix] = nsUri;
              }
              attrs[name2] = value;
              continue;
            }
            attrList.push(name2, value);
            continue;
          }
          w2 = name2.indexOf(":");
          if (w2 === -1) {
            attrs[name2] = value;
            continue;
          }
          if (!(nsName2 = nsMatrix[name2.substring(0, w2)])) {
            handleWarning(missingNamespaceForPrefix(name2.substring(0, w2)));
            continue;
          }
          name2 = defaultAlias === nsName2 ? name2.substr(w2 + 1) : nsName2 + name2.substr(w2);
          if (name2 === XSI_TYPE) {
            w2 = value.indexOf(":");
            if (w2 !== -1) {
              nsName2 = value.substring(0, w2);
              nsName2 = nsMatrix[nsName2] || nsName2;
              value = nsName2 + value.substring(w2);
            } else {
              value = defaultAlias + ":" + value;
            }
          }
          attrs[name2] = value;
        }
      if (maybeNS) {
        for (i2 = 0, l = attrList.length; i2 < l; i2++) {
          name2 = attrList[i2++];
          value = attrList[i2];
          w2 = name2.indexOf(":");
          if (w2 !== -1) {
            if (!(nsName2 = nsMatrix[name2.substring(0, w2)])) {
              handleWarning(missingNamespaceForPrefix(name2.substring(0, w2)));
              continue;
            }
            name2 = defaultAlias === nsName2 ? name2.substr(w2 + 1) : nsName2 + name2.substr(w2);
            if (name2 === XSI_TYPE) {
              w2 = value.indexOf(":");
              if (w2 !== -1) {
                nsName2 = value.substring(0, w2);
                nsName2 = nsMatrix[nsName2] || nsName2;
                value = nsName2 + value.substring(w2);
              } else {
                value = defaultAlias + ":" + value;
              }
            }
          }
          attrs[name2] = value;
        }
      }
      return cachedAttrs = attrs;
    }
    function getParseContext() {
      var splitsRe = /(\r\n|\r|\n)/g;
      var line = 0;
      var column = 0;
      var startOfLine = 0;
      var endOfLine = j;
      var match2;
      var data;
      while (i >= startOfLine) {
        match2 = splitsRe.exec(xml2);
        if (!match2) {
          break;
        }
        endOfLine = match2[0].length + match2.index;
        if (endOfLine > i) {
          break;
        }
        line += 1;
        startOfLine = endOfLine;
      }
      if (i == -1) {
        column = endOfLine;
        data = xml2.substring(j);
      } else if (j === 0) {
        data = xml2.substring(j, i);
      } else {
        column = i - startOfLine;
        data = j == -1 ? xml2.substring(i) : xml2.substring(i, j + 1);
      }
      return {
        "data": data,
        "line": line,
        "column": column
      };
    }
    getContext = getParseContext;
    if (proxy) {
      elementProxy = Object.create({}, {
        "name": getter(function() {
          return elementName;
        }),
        "originalName": getter(function() {
          return _elementName;
        }),
        "attrs": getter(getAttrs),
        "ns": getter(function() {
          return nsMatrix;
        })
      });
    }
    while (j !== -1) {
      if (xml2.charCodeAt(j) === 60) {
        i = j;
      } else {
        i = xml2.indexOf("<", j);
      }
      if (i === -1) {
        if (nodeStack.length) {
          return handleError("unexpected end of file");
        }
        if (j === 0) {
          return handleError("missing start tag");
        }
        if (j < xml2.length) {
          if (xml2.substring(j).trim()) {
            handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);
          }
        }
        return;
      }
      if (j !== i) {
        if (nodeStack.length) {
          if (onText) {
            onText(xml2.substring(j, i), decodeEntities, getContext);
            if (parseStop) {
              return;
            }
          }
        } else {
          if (xml2.substring(j, i).trim()) {
            handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);
            if (parseStop) {
              return;
            }
          }
        }
      }
      w = xml2.charCodeAt(i + 1);
      if (w === 33) {
        q = xml2.charCodeAt(i + 2);
        if (q === 91 && xml2.substr(i + 3, 6) === "CDATA[") {
          j = xml2.indexOf("]]>", i);
          if (j === -1) {
            return handleError("unclosed cdata");
          }
          if (onCDATA) {
            onCDATA(xml2.substring(i + 9, j), getContext);
            if (parseStop) {
              return;
            }
          }
          j += 3;
          continue;
        }
        if (q === 45 && xml2.charCodeAt(i + 3) === 45) {
          j = xml2.indexOf("-->", i);
          if (j === -1) {
            return handleError("unclosed comment");
          }
          if (onComment) {
            onComment(xml2.substring(i + 4, j), decodeEntities, getContext);
            if (parseStop) {
              return;
            }
          }
          j += 3;
          continue;
        }
      }
      if (w === 63) {
        j = xml2.indexOf("?>", i);
        if (j === -1) {
          return handleError("unclosed question");
        }
        if (onQuestion) {
          onQuestion(xml2.substring(i, j + 2), getContext);
          if (parseStop) {
            return;
          }
        }
        j += 2;
        continue;
      }
      for (x = i + 1; ; x++) {
        v = xml2.charCodeAt(x);
        if (isNaN(v)) {
          j = -1;
          return handleError("unclosed tag");
        }
        if (v === 34) {
          q = xml2.indexOf('"', x + 1);
          x = q !== -1 ? q : x;
        } else if (v === 39) {
          q = xml2.indexOf("'", x + 1);
          x = q !== -1 ? q : x;
        } else if (v === 62) {
          j = x;
          break;
        }
      }
      if (w === 33) {
        if (onAttention) {
          onAttention(xml2.substring(i, j + 1), decodeEntities, getContext);
          if (parseStop) {
            return;
          }
        }
        j += 1;
        continue;
      }
      cachedAttrs = {};
      if (w === 47) {
        tagStart = false;
        tagEnd = true;
        if (!nodeStack.length) {
          return handleError("missing open tag");
        }
        x = elementName = nodeStack.pop();
        q = i + 2 + x.length;
        if (xml2.substring(i + 2, q) !== x) {
          return handleError("closing tag mismatch");
        }
        for (; q < j; q++) {
          w = xml2.charCodeAt(q);
          if (w === 32 || w > 8 && w < 14) {
            continue;
          }
          return handleError("close tag");
        }
      } else {
        if (xml2.charCodeAt(j - 1) === 47) {
          x = elementName = xml2.substring(i + 1, j - 1);
          tagStart = true;
          tagEnd = true;
        } else {
          x = elementName = xml2.substring(i + 1, j);
          tagStart = true;
          tagEnd = false;
        }
        if (!(w > 96 && w < 123 || w > 64 && w < 91 || w === 95 || w === 58)) {
          return handleError("illegal first char nodeName");
        }
        for (q = 1, y = x.length; q < y; q++) {
          w = x.charCodeAt(q);
          if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w == 46) {
            continue;
          }
          if (w === 32 || w < 14 && w > 8) {
            elementName = x.substring(0, q);
            cachedAttrs = null;
            break;
          }
          return handleError("invalid nodeName");
        }
        if (!tagEnd) {
          nodeStack.push(elementName);
        }
      }
      if (isNamespace) {
        _nsMatrix = nsMatrix;
        if (tagStart) {
          if (!tagEnd) {
            nsMatrixStack.push(_nsMatrix);
          }
          if (cachedAttrs === null) {
            if (maybeNS = x.indexOf("xmlns", q) !== -1) {
              attrsStart = q;
              attrsString = x;
              getAttrs();
              maybeNS = false;
            }
          }
        }
        _elementName = elementName;
        w = elementName.indexOf(":");
        if (w !== -1) {
          xmlns = nsMatrix[elementName.substring(0, w)];
          if (!xmlns) {
            return handleError("missing namespace on <" + _elementName + ">");
          }
          elementName = elementName.substr(w + 1);
        } else {
          xmlns = nsMatrix["xmlns"];
        }
        if (xmlns) {
          elementName = xmlns + ":" + elementName;
        }
      }
      if (tagStart) {
        attrsStart = q;
        attrsString = x;
        if (onOpenTag) {
          if (proxy) {
            onOpenTag(elementProxy, decodeEntities, tagEnd, getContext);
          } else {
            onOpenTag(elementName, getAttrs, decodeEntities, tagEnd, getContext);
          }
          if (parseStop) {
            return;
          }
        }
      }
      if (tagEnd) {
        if (onCloseTag) {
          onCloseTag(proxy ? elementProxy : elementName, decodeEntities, tagStart, getContext);
          if (parseStop) {
            return;
          }
        }
        if (isNamespace) {
          if (!tagStart) {
            nsMatrix = nsMatrixStack.pop();
          } else {
            nsMatrix = _nsMatrix;
          }
        }
      }
      j += 1;
    }
  }
}

// node_modules/moddle-xml/dist/index.esm.js
function hasLowerCaseAlias(pkg) {
  return pkg.xml && pkg.xml.tagAlias === "lowerCase";
}
var DEFAULT_NS_MAP = {
  "xsi": "http://www.w3.org/2001/XMLSchema-instance",
  "xml": "http://www.w3.org/XML/1998/namespace"
};
var XSI_TYPE2 = "xsi:type";
function serializeFormat(element) {
  return element.xml && element.xml.serialize;
}
function serializeAsType(element) {
  return serializeFormat(element) === XSI_TYPE2;
}
function serializeAsProperty(element) {
  return serializeFormat(element) === "property";
}
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function aliasToName(aliasNs, pkg) {
  if (!hasLowerCaseAlias(pkg)) {
    return aliasNs.name;
  }
  return aliasNs.prefix + ":" + capitalize(aliasNs.localName);
}
function prefixedToName(nameNs, pkg) {
  var name2 = nameNs.name, localName = nameNs.localName;
  var typePrefix = pkg.xml && pkg.xml.typePrefix;
  if (typePrefix && localName.indexOf(typePrefix) === 0) {
    return nameNs.prefix + ":" + localName.slice(typePrefix.length);
  } else {
    return name2;
  }
}
function normalizeXsiTypeName(name2, model) {
  var nameNs = parseName(name2);
  var pkg = model.getPackage(nameNs.prefix);
  return prefixedToName(nameNs, pkg);
}
function error2(message) {
  return new Error(message);
}
function getModdleDescriptor(element) {
  return element.$descriptor;
}
function Context(options2) {
  assign2(this, options2);
  this.elementsById = {};
  this.references = [];
  this.warnings = [];
  this.addReference = function(reference) {
    this.references.push(reference);
  };
  this.addElement = function(element) {
    if (!element) {
      throw error2("expected element");
    }
    var elementsById = this.elementsById;
    var descriptor = getModdleDescriptor(element);
    var idProperty = descriptor.idProperty, id;
    if (idProperty) {
      id = element.get(idProperty.name);
      if (id) {
        if (!/^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i.test(id)) {
          throw new Error("illegal ID <" + id + ">");
        }
        if (elementsById[id]) {
          throw error2("duplicate ID <" + id + ">");
        }
        elementsById[id] = element;
      }
    }
  };
  this.addWarning = function(warning) {
    this.warnings.push(warning);
  };
}
function BaseHandler() {
}
BaseHandler.prototype.handleEnd = function() {
};
BaseHandler.prototype.handleText = function() {
};
BaseHandler.prototype.handleNode = function() {
};
function NoopHandler() {
}
NoopHandler.prototype = Object.create(BaseHandler.prototype);
NoopHandler.prototype.handleNode = function() {
  return this;
};
function BodyHandler() {
}
BodyHandler.prototype = Object.create(BaseHandler.prototype);
BodyHandler.prototype.handleText = function(text) {
  this.body = (this.body || "") + text;
};
function ReferenceHandler(property, context) {
  this.property = property;
  this.context = context;
}
ReferenceHandler.prototype = Object.create(BodyHandler.prototype);
ReferenceHandler.prototype.handleNode = function(node2) {
  if (this.element) {
    throw error2("expected no sub nodes");
  } else {
    this.element = this.createReference(node2);
  }
  return this;
};
ReferenceHandler.prototype.handleEnd = function() {
  this.element.id = this.body;
};
ReferenceHandler.prototype.createReference = function(node2) {
  return {
    property: this.property.ns.name,
    id: ""
  };
};
function ValueHandler(propertyDesc, element) {
  this.element = element;
  this.propertyDesc = propertyDesc;
}
ValueHandler.prototype = Object.create(BodyHandler.prototype);
ValueHandler.prototype.handleEnd = function() {
  var value = this.body || "", element = this.element, propertyDesc = this.propertyDesc;
  value = coerceType(propertyDesc.type, value);
  if (propertyDesc.isMany) {
    element.get(propertyDesc.name).push(value);
  } else {
    element.set(propertyDesc.name, value);
  }
};
function BaseElementHandler() {
}
BaseElementHandler.prototype = Object.create(BodyHandler.prototype);
BaseElementHandler.prototype.handleNode = function(node2) {
  var parser = this, element = this.element;
  if (!element) {
    element = this.element = this.createElement(node2);
    this.context.addElement(element);
  } else {
    parser = this.handleChild(node2);
  }
  return parser;
};
function ElementHandler(model, typeName, context) {
  this.model = model;
  this.type = model.getType(typeName);
  this.context = context;
}
ElementHandler.prototype = Object.create(BaseElementHandler.prototype);
ElementHandler.prototype.addReference = function(reference) {
  this.context.addReference(reference);
};
ElementHandler.prototype.handleText = function(text) {
  var element = this.element, descriptor = getModdleDescriptor(element), bodyProperty = descriptor.bodyProperty;
  if (!bodyProperty) {
    throw error2("unexpected body text <" + text + ">");
  }
  BodyHandler.prototype.handleText.call(this, text);
};
ElementHandler.prototype.handleEnd = function() {
  var value = this.body, element = this.element, descriptor = getModdleDescriptor(element), bodyProperty = descriptor.bodyProperty;
  if (bodyProperty && value !== void 0) {
    value = coerceType(bodyProperty.type, value);
    element.set(bodyProperty.name, value);
  }
};
ElementHandler.prototype.createElement = function(node2) {
  var attributes = node2.attributes, Type = this.type, descriptor = getModdleDescriptor(Type), context = this.context, instance = new Type({}), model = this.model, propNameNs;
  forEach2(attributes, function(value, name2) {
    var prop = descriptor.propertiesByName[name2], values2;
    if (prop && prop.isReference) {
      if (!prop.isMany) {
        context.addReference({
          element: instance,
          property: prop.ns.name,
          id: value
        });
      } else {
        values2 = value.split(" ");
        forEach2(values2, function(v) {
          context.addReference({
            element: instance,
            property: prop.ns.name,
            id: v
          });
        });
      }
    } else {
      if (prop) {
        value = coerceType(prop.type, value);
      } else if (name2 !== "xmlns") {
        propNameNs = parseName(name2, descriptor.ns.prefix);
        if (model.getPackage(propNameNs.prefix)) {
          context.addWarning({
            message: "unknown attribute <" + name2 + ">",
            element: instance,
            property: name2,
            value
          });
        }
      }
      instance.set(name2, value);
    }
  });
  return instance;
};
ElementHandler.prototype.getPropertyForNode = function(node2) {
  var name2 = node2.name;
  var nameNs = parseName(name2);
  var type = this.type, model = this.model, descriptor = getModdleDescriptor(type);
  var propertyName = nameNs.name, property = descriptor.propertiesByName[propertyName], elementTypeName, elementType;
  if (property && !property.isAttr) {
    if (serializeAsType(property)) {
      elementTypeName = node2.attributes[XSI_TYPE2];
      if (elementTypeName) {
        elementTypeName = normalizeXsiTypeName(elementTypeName, model);
        elementType = model.getType(elementTypeName);
        return assign2({}, property, {
          effectiveType: getModdleDescriptor(elementType).name
        });
      }
    }
    return property;
  }
  var pkg = model.getPackage(nameNs.prefix);
  if (pkg) {
    elementTypeName = aliasToName(nameNs, pkg);
    elementType = model.getType(elementTypeName);
    property = find2(descriptor.properties, function(p) {
      return !p.isVirtual && !p.isReference && !p.isAttribute && elementType.hasType(p.type);
    });
    if (property) {
      return assign2({}, property, {
        effectiveType: getModdleDescriptor(elementType).name
      });
    }
  } else {
    property = find2(descriptor.properties, function(p) {
      return !p.isReference && !p.isAttribute && p.type === "Element";
    });
    if (property) {
      return property;
    }
  }
  throw error2("unrecognized element <" + nameNs.name + ">");
};
ElementHandler.prototype.toString = function() {
  return "ElementDescriptor[" + getModdleDescriptor(this.type).name + "]";
};
ElementHandler.prototype.valueHandler = function(propertyDesc, element) {
  return new ValueHandler(propertyDesc, element);
};
ElementHandler.prototype.referenceHandler = function(propertyDesc) {
  return new ReferenceHandler(propertyDesc, this.context);
};
ElementHandler.prototype.handler = function(type) {
  if (type === "Element") {
    return new GenericElementHandler(this.model, type, this.context);
  } else {
    return new ElementHandler(this.model, type, this.context);
  }
};
ElementHandler.prototype.handleChild = function(node2) {
  var propertyDesc, type, element, childHandler;
  propertyDesc = this.getPropertyForNode(node2);
  element = this.element;
  type = propertyDesc.effectiveType || propertyDesc.type;
  if (isSimple(type)) {
    return this.valueHandler(propertyDesc, element);
  }
  if (propertyDesc.isReference) {
    childHandler = this.referenceHandler(propertyDesc).handleNode(node2);
  } else {
    childHandler = this.handler(type).handleNode(node2);
  }
  var newElement = childHandler.element;
  if (newElement !== void 0) {
    if (propertyDesc.isMany) {
      element.get(propertyDesc.name).push(newElement);
    } else {
      element.set(propertyDesc.name, newElement);
    }
    if (propertyDesc.isReference) {
      assign2(newElement, {
        element
      });
      this.context.addReference(newElement);
    } else {
      newElement.$parent = element;
    }
  }
  return childHandler;
};
function RootElementHandler(model, typeName, context) {
  ElementHandler.call(this, model, typeName, context);
}
RootElementHandler.prototype = Object.create(ElementHandler.prototype);
RootElementHandler.prototype.createElement = function(node2) {
  var name2 = node2.name, nameNs = parseName(name2), model = this.model, type = this.type, pkg = model.getPackage(nameNs.prefix), typeName = pkg && aliasToName(nameNs, pkg) || name2;
  if (!type.hasType(typeName)) {
    throw error2("unexpected element <" + node2.originalName + ">");
  }
  return ElementHandler.prototype.createElement.call(this, node2);
};
function GenericElementHandler(model, typeName, context) {
  this.model = model;
  this.context = context;
}
GenericElementHandler.prototype = Object.create(BaseElementHandler.prototype);
GenericElementHandler.prototype.createElement = function(node2) {
  var name2 = node2.name, ns3 = parseName(name2), prefix4 = ns3.prefix, uri2 = node2.ns[prefix4 + "$uri"], attributes = node2.attributes;
  return this.model.createAny(name2, uri2, attributes);
};
GenericElementHandler.prototype.handleChild = function(node2) {
  var handler = new GenericElementHandler(this.model, "Element", this.context).handleNode(node2), element = this.element;
  var newElement = handler.element, children;
  if (newElement !== void 0) {
    children = element.$children = element.$children || [];
    children.push(newElement);
    newElement.$parent = element;
  }
  return handler;
};
GenericElementHandler.prototype.handleEnd = function() {
  if (this.body) {
    this.element.$body = this.body;
  }
};
function Reader(options2) {
  if (options2 instanceof Moddle) {
    options2 = {
      model: options2
    };
  }
  assign2(this, { lax: false }, options2);
}
Reader.prototype.fromXML = function(xml2, options2, done) {
  var rootHandler = options2.rootHandler;
  if (options2 instanceof ElementHandler) {
    rootHandler = options2;
    options2 = {};
  } else {
    if (typeof options2 === "string") {
      rootHandler = this.handler(options2);
      options2 = {};
    } else if (typeof rootHandler === "string") {
      rootHandler = this.handler(rootHandler);
    }
  }
  var model = this.model, lax = this.lax;
  var context = new Context(assign2({}, options2, { rootHandler })), parser = new Parser({ proxy: true }), stack = createStack();
  rootHandler.context = context;
  stack.push(rootHandler);
  function handleError(err, getContext, lax2) {
    var ctx = getContext();
    var line = ctx.line, column = ctx.column, data = ctx.data;
    if (data.charAt(0) === "<" && data.indexOf(" ") !== -1) {
      data = data.slice(0, data.indexOf(" ")) + ">";
    }
    var message = "unparsable content " + (data ? data + " " : "") + "detected\n	line: " + line + "\n	column: " + column + "\n	nested error: " + err.message;
    if (lax2) {
      context.addWarning({
        message,
        error: err
      });
      return true;
    } else {
      throw error2(message);
    }
  }
  function handleWarning(err, getContext) {
    return handleError(err, getContext, true);
  }
  function resolveReferences() {
    var elementsById = context.elementsById;
    var references = context.references;
    var i, r;
    for (i = 0; r = references[i]; i++) {
      var element = r.element;
      var reference = elementsById[r.id];
      var property = getModdleDescriptor(element).propertiesByName[r.property];
      if (!reference) {
        context.addWarning({
          message: "unresolved reference <" + r.id + ">",
          element: r.element,
          property: r.property,
          value: r.id
        });
      }
      if (property.isMany) {
        var collection = element.get(property.name), idx = collection.indexOf(r);
        if (idx === -1) {
          idx = collection.length;
        }
        if (!reference) {
          collection.splice(idx, 1);
        } else {
          collection[idx] = reference;
        }
      } else {
        element.set(property.name, reference);
      }
    }
  }
  function handleClose() {
    stack.pop().handleEnd();
  }
  var PREAMBLE_START_PATTERN = /^<\?xml /i;
  var ENCODING_PATTERN = / encoding="([^"]+)"/i;
  var UTF_8_PATTERN = /^utf-8$/i;
  function handleQuestion(question) {
    if (!PREAMBLE_START_PATTERN.test(question)) {
      return;
    }
    var match2 = ENCODING_PATTERN.exec(question);
    var encoding = match2 && match2[1];
    if (!encoding || UTF_8_PATTERN.test(encoding)) {
      return;
    }
    context.addWarning({
      message: "unsupported document encoding <" + encoding + ">, falling back to UTF-8"
    });
  }
  function handleOpen(node2, getContext) {
    var handler = stack.peek();
    try {
      stack.push(handler.handleNode(node2));
    } catch (err) {
      if (handleError(err, getContext, lax)) {
        stack.push(new NoopHandler());
      }
    }
  }
  function handleCData(text, getContext) {
    try {
      stack.peek().handleText(text);
    } catch (err) {
      handleWarning(err, getContext);
    }
  }
  function handleText(text, getContext) {
    if (!text.trim()) {
      return;
    }
    handleCData(text, getContext);
  }
  var uriMap = model.getPackages().reduce(function(uriMap2, p) {
    uriMap2[p.uri] = p.prefix;
    return uriMap2;
  }, {
    "http://www.w3.org/XML/1998/namespace": "xml"
  });
  parser.ns(uriMap).on("openTag", function(obj, decodeStr, selfClosing, getContext) {
    var attrs = obj.attrs || {};
    var decodedAttrs = Object.keys(attrs).reduce(function(d, key) {
      var value = decodeStr(attrs[key]);
      d[key] = value;
      return d;
    }, {});
    var node2 = {
      name: obj.name,
      originalName: obj.originalName,
      attributes: decodedAttrs,
      ns: obj.ns
    };
    handleOpen(node2, getContext);
  }).on("question", handleQuestion).on("closeTag", handleClose).on("cdata", handleCData).on("text", function(text, decodeEntities2, getContext) {
    handleText(decodeEntities2(text), getContext);
  }).on("error", handleError).on("warn", handleWarning);
  return new Promise(function(resolve, reject) {
    var err;
    try {
      parser.parse(xml2);
      resolveReferences();
    } catch (e2) {
      err = e2;
    }
    var rootElement = rootHandler.element;
    if (!err && !rootElement) {
      err = error2("failed to parse document as <" + rootHandler.type.$descriptor.name + ">");
    }
    var warnings = context.warnings;
    var references = context.references;
    var elementsById = context.elementsById;
    if (err) {
      err.warnings = warnings;
      return reject(err);
    } else {
      return resolve({
        rootElement,
        elementsById,
        references,
        warnings
      });
    }
  });
};
Reader.prototype.handler = function(name2) {
  return new RootElementHandler(this.model, name2);
};
function createStack() {
  var stack = [];
  Object.defineProperty(stack, "peek", {
    value: function() {
      return this[this.length - 1];
    }
  });
  return stack;
}
var XML_PREAMBLE = '<?xml version="1.0" encoding="UTF-8"?>\n';
var ESCAPE_ATTR_CHARS = /<|>|'|"|&|\n\r|\n/g;
var ESCAPE_CHARS = /<|>|&/g;
function Namespaces(parent) {
  var prefixMap = {};
  var uriMap = {};
  var used = {};
  var wellknown = [];
  var custom = [];
  this.byUri = function(uri2) {
    return uriMap[uri2] || parent && parent.byUri(uri2);
  };
  this.add = function(ns3, isWellknown) {
    uriMap[ns3.uri] = ns3;
    if (isWellknown) {
      wellknown.push(ns3);
    } else {
      custom.push(ns3);
    }
    this.mapPrefix(ns3.prefix, ns3.uri);
  };
  this.uriByPrefix = function(prefix4) {
    return prefixMap[prefix4 || "xmlns"];
  };
  this.mapPrefix = function(prefix4, uri2) {
    prefixMap[prefix4 || "xmlns"] = uri2;
  };
  this.getNSKey = function(ns3) {
    return ns3.prefix !== void 0 ? ns3.uri + "|" + ns3.prefix : ns3.uri;
  };
  this.logUsed = function(ns3) {
    var uri2 = ns3.uri;
    var nsKey = this.getNSKey(ns3);
    used[nsKey] = this.byUri(uri2);
    if (parent) {
      parent.logUsed(ns3);
    }
  };
  this.getUsed = function(ns3) {
    function isUsed(ns4) {
      var nsKey = self2.getNSKey(ns4);
      return used[nsKey];
    }
    var self2 = this;
    var allNs = [].concat(wellknown, custom);
    return allNs.filter(isUsed);
  };
}
function lower(string) {
  return string.charAt(0).toLowerCase() + string.slice(1);
}
function nameToAlias(name2, pkg) {
  if (hasLowerCaseAlias(pkg)) {
    return lower(name2);
  } else {
    return name2;
  }
}
function inherits(ctor, superCtor) {
  ctor.super_ = superCtor;
  ctor.prototype = Object.create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
}
function nsName(ns3) {
  if (isString2(ns3)) {
    return ns3;
  } else {
    return (ns3.prefix ? ns3.prefix + ":" : "") + ns3.localName;
  }
}
function getNsAttrs(namespaces2) {
  return namespaces2.getUsed().filter(function(ns3) {
    return ns3.prefix !== "xml";
  }).map(function(ns3) {
    var name2 = "xmlns" + (ns3.prefix ? ":" + ns3.prefix : "");
    return { name: name2, value: ns3.uri };
  });
}
function getElementNs(ns3, descriptor) {
  if (descriptor.isGeneric) {
    return assign2({ localName: descriptor.ns.localName }, ns3);
  } else {
    return assign2({ localName: nameToAlias(descriptor.ns.localName, descriptor.$pkg) }, ns3);
  }
}
function getPropertyNs(ns3, descriptor) {
  return assign2({ localName: descriptor.ns.localName }, ns3);
}
function getSerializableProperties(element) {
  var descriptor = element.$descriptor;
  return filter2(descriptor.properties, function(p) {
    var name2 = p.name;
    if (p.isVirtual) {
      return false;
    }
    if (!has2(element, name2)) {
      return false;
    }
    var value = element[name2];
    if (value === p.default) {
      return false;
    }
    if (value === null) {
      return false;
    }
    return p.isMany ? value.length : true;
  });
}
var ESCAPE_ATTR_MAP = {
  "\n": "#10",
  "\n\r": "#10",
  '"': "#34",
  "'": "#39",
  "<": "#60",
  ">": "#62",
  "&": "#38"
};
var ESCAPE_MAP = {
  "<": "lt",
  ">": "gt",
  "&": "amp"
};
function escape(str, charPattern, replaceMap) {
  str = isString2(str) ? str : "" + str;
  return str.replace(charPattern, function(s) {
    return "&" + replaceMap[s] + ";";
  });
}
function escapeAttr(str) {
  return escape(str, ESCAPE_ATTR_CHARS, ESCAPE_ATTR_MAP);
}
function escapeBody(str) {
  return escape(str, ESCAPE_CHARS, ESCAPE_MAP);
}
function filterAttributes(props) {
  return filter2(props, function(p) {
    return p.isAttr;
  });
}
function filterContained(props) {
  return filter2(props, function(p) {
    return !p.isAttr;
  });
}
function ReferenceSerializer(tagName) {
  this.tagName = tagName;
}
ReferenceSerializer.prototype.build = function(element) {
  this.element = element;
  return this;
};
ReferenceSerializer.prototype.serializeTo = function(writer) {
  writer.appendIndent().append("<" + this.tagName + ">" + this.element.id + "</" + this.tagName + ">").appendNewLine();
};
function BodySerializer() {
}
BodySerializer.prototype.serializeValue = BodySerializer.prototype.serializeTo = function(writer) {
  writer.append(this.escape ? escapeBody(this.value) : this.value);
};
BodySerializer.prototype.build = function(prop, value) {
  this.value = value;
  if (prop.type === "String" && value.search(ESCAPE_CHARS) !== -1) {
    this.escape = true;
  }
  return this;
};
function ValueSerializer(tagName) {
  this.tagName = tagName;
}
inherits(ValueSerializer, BodySerializer);
ValueSerializer.prototype.serializeTo = function(writer) {
  writer.appendIndent().append("<" + this.tagName + ">");
  this.serializeValue(writer);
  writer.append("</" + this.tagName + ">").appendNewLine();
};
function ElementSerializer(parent, propertyDescriptor) {
  this.body = [];
  this.attrs = [];
  this.parent = parent;
  this.propertyDescriptor = propertyDescriptor;
}
ElementSerializer.prototype.build = function(element) {
  this.element = element;
  var elementDescriptor = element.$descriptor, propertyDescriptor = this.propertyDescriptor;
  var otherAttrs, properties;
  var isGeneric = elementDescriptor.isGeneric;
  if (isGeneric) {
    otherAttrs = this.parseGeneric(element);
  } else {
    otherAttrs = this.parseNsAttributes(element);
  }
  if (propertyDescriptor) {
    this.ns = this.nsPropertyTagName(propertyDescriptor);
  } else {
    this.ns = this.nsTagName(elementDescriptor);
  }
  this.tagName = this.addTagName(this.ns);
  if (!isGeneric) {
    properties = getSerializableProperties(element);
    this.parseAttributes(filterAttributes(properties));
    this.parseContainments(filterContained(properties));
  }
  this.parseGenericAttributes(element, otherAttrs);
  return this;
};
ElementSerializer.prototype.nsTagName = function(descriptor) {
  var effectiveNs = this.logNamespaceUsed(descriptor.ns);
  return getElementNs(effectiveNs, descriptor);
};
ElementSerializer.prototype.nsPropertyTagName = function(descriptor) {
  var effectiveNs = this.logNamespaceUsed(descriptor.ns);
  return getPropertyNs(effectiveNs, descriptor);
};
ElementSerializer.prototype.isLocalNs = function(ns3) {
  return ns3.uri === this.ns.uri;
};
ElementSerializer.prototype.nsAttributeName = function(element) {
  var ns3;
  if (isString2(element)) {
    ns3 = parseName(element);
  } else {
    ns3 = element.ns;
  }
  if (element.inherited) {
    return { localName: ns3.localName };
  }
  var effectiveNs = this.logNamespaceUsed(ns3);
  this.getNamespaces().logUsed(effectiveNs);
  if (this.isLocalNs(effectiveNs)) {
    return { localName: ns3.localName };
  } else {
    return assign2({ localName: ns3.localName }, effectiveNs);
  }
};
ElementSerializer.prototype.parseGeneric = function(element) {
  var self2 = this, body = this.body;
  var attributes = [];
  forEach2(element, function(val, key) {
    var nonNsAttr;
    if (key === "$body") {
      body.push(new BodySerializer().build({ type: "String" }, val));
    } else if (key === "$children") {
      forEach2(val, function(child) {
        body.push(new ElementSerializer(self2).build(child));
      });
    } else if (key.indexOf("$") !== 0) {
      nonNsAttr = self2.parseNsAttribute(element, key, val);
      if (nonNsAttr) {
        attributes.push({ name: key, value: val });
      }
    }
  });
  return attributes;
};
ElementSerializer.prototype.parseNsAttribute = function(element, name2, value) {
  var model = element.$model;
  var nameNs = parseName(name2);
  var ns3;
  if (nameNs.prefix === "xmlns") {
    ns3 = { prefix: nameNs.localName, uri: value };
  }
  if (!nameNs.prefix && nameNs.localName === "xmlns") {
    ns3 = { uri: value };
  }
  if (!ns3) {
    return {
      name: name2,
      value
    };
  }
  if (model && model.getPackage(value)) {
    this.logNamespace(ns3, true, true);
  } else {
    var actualNs = this.logNamespaceUsed(ns3, true);
    this.getNamespaces().logUsed(actualNs);
  }
};
ElementSerializer.prototype.parseNsAttributes = function(element, attrs) {
  var self2 = this;
  var genericAttrs = element.$attrs;
  var attributes = [];
  forEach2(genericAttrs, function(value, name2) {
    var nonNsAttr = self2.parseNsAttribute(element, name2, value);
    if (nonNsAttr) {
      attributes.push(nonNsAttr);
    }
  });
  return attributes;
};
ElementSerializer.prototype.parseGenericAttributes = function(element, attributes) {
  var self2 = this;
  forEach2(attributes, function(attr5) {
    if (attr5.name === XSI_TYPE2) {
      return;
    }
    try {
      self2.addAttribute(self2.nsAttributeName(attr5.name), attr5.value);
    } catch (e2) {
      console.warn("missing namespace information for ", attr5.name, "=", attr5.value, "on", element, e2);
    }
  });
};
ElementSerializer.prototype.parseContainments = function(properties) {
  var self2 = this, body = this.body, element = this.element;
  forEach2(properties, function(p) {
    var value = element.get(p.name), isReference = p.isReference, isMany = p.isMany;
    if (!isMany) {
      value = [value];
    }
    if (p.isBody) {
      body.push(new BodySerializer().build(p, value[0]));
    } else if (isSimple(p.type)) {
      forEach2(value, function(v) {
        body.push(new ValueSerializer(self2.addTagName(self2.nsPropertyTagName(p))).build(p, v));
      });
    } else if (isReference) {
      forEach2(value, function(v) {
        body.push(new ReferenceSerializer(self2.addTagName(self2.nsPropertyTagName(p))).build(v));
      });
    } else {
      var asType = serializeAsType(p), asProperty = serializeAsProperty(p);
      forEach2(value, function(v) {
        var serializer;
        if (asType) {
          serializer = new TypeSerializer(self2, p);
        } else if (asProperty) {
          serializer = new ElementSerializer(self2, p);
        } else {
          serializer = new ElementSerializer(self2);
        }
        body.push(serializer.build(v));
      });
    }
  });
};
ElementSerializer.prototype.getNamespaces = function(local) {
  var namespaces2 = this.namespaces, parent = this.parent, parentNamespaces;
  if (!namespaces2) {
    parentNamespaces = parent && parent.getNamespaces();
    if (local || !parentNamespaces) {
      this.namespaces = namespaces2 = new Namespaces(parentNamespaces);
    } else {
      namespaces2 = parentNamespaces;
    }
  }
  return namespaces2;
};
ElementSerializer.prototype.logNamespace = function(ns3, wellknown, local) {
  var namespaces2 = this.getNamespaces(local);
  var nsUri = ns3.uri, nsPrefix = ns3.prefix;
  var existing = namespaces2.byUri(nsUri);
  if (!existing || local) {
    namespaces2.add(ns3, wellknown);
  }
  namespaces2.mapPrefix(nsPrefix, nsUri);
  return ns3;
};
ElementSerializer.prototype.logNamespaceUsed = function(ns3, local) {
  var element = this.element, model = element.$model, namespaces2 = this.getNamespaces(local);
  var prefix4 = ns3.prefix, uri2 = ns3.uri, newPrefix, idx, wellknownUri;
  if (!prefix4 && !uri2) {
    return { localName: ns3.localName };
  }
  wellknownUri = DEFAULT_NS_MAP[prefix4] || model && (model.getPackage(prefix4) || {}).uri;
  uri2 = uri2 || wellknownUri || namespaces2.uriByPrefix(prefix4);
  if (!uri2) {
    throw new Error("no namespace uri given for prefix <" + prefix4 + ">");
  }
  ns3 = namespaces2.byUri(uri2);
  if (!ns3) {
    newPrefix = prefix4;
    idx = 1;
    while (namespaces2.uriByPrefix(newPrefix)) {
      newPrefix = prefix4 + "_" + idx++;
    }
    ns3 = this.logNamespace({ prefix: newPrefix, uri: uri2 }, wellknownUri === uri2);
  }
  if (prefix4) {
    namespaces2.mapPrefix(prefix4, uri2);
  }
  return ns3;
};
ElementSerializer.prototype.parseAttributes = function(properties) {
  var self2 = this, element = this.element;
  forEach2(properties, function(p) {
    var value = element.get(p.name);
    if (p.isReference) {
      if (!p.isMany) {
        value = value.id;
      } else {
        var values2 = [];
        forEach2(value, function(v) {
          values2.push(v.id);
        });
        value = values2.join(" ");
      }
    }
    self2.addAttribute(self2.nsAttributeName(p), value);
  });
};
ElementSerializer.prototype.addTagName = function(nsTagName) {
  var actualNs = this.logNamespaceUsed(nsTagName);
  this.getNamespaces().logUsed(actualNs);
  return nsName(nsTagName);
};
ElementSerializer.prototype.addAttribute = function(name2, value) {
  var attrs = this.attrs;
  if (isString2(value)) {
    value = escapeAttr(value);
  }
  var idx = findIndex(attrs, function(element) {
    return element.name.localName === name2.localName && element.name.uri === name2.uri && element.name.prefix === name2.prefix;
  });
  var attr5 = { name: name2, value };
  if (idx !== -1) {
    attrs.splice(idx, 1, attr5);
  } else {
    attrs.push(attr5);
  }
};
ElementSerializer.prototype.serializeAttributes = function(writer) {
  var attrs = this.attrs, namespaces2 = this.namespaces;
  if (namespaces2) {
    attrs = getNsAttrs(namespaces2).concat(attrs);
  }
  forEach2(attrs, function(a) {
    writer.append(" ").append(nsName(a.name)).append('="').append(a.value).append('"');
  });
};
ElementSerializer.prototype.serializeTo = function(writer) {
  var firstBody = this.body[0], indent = firstBody && firstBody.constructor !== BodySerializer;
  writer.appendIndent().append("<" + this.tagName);
  this.serializeAttributes(writer);
  writer.append(firstBody ? ">" : " />");
  if (firstBody) {
    if (indent) {
      writer.appendNewLine().indent();
    }
    forEach2(this.body, function(b) {
      b.serializeTo(writer);
    });
    if (indent) {
      writer.unindent().appendIndent();
    }
    writer.append("</" + this.tagName + ">");
  }
  writer.appendNewLine();
};
function TypeSerializer(parent, propertyDescriptor) {
  ElementSerializer.call(this, parent, propertyDescriptor);
}
inherits(TypeSerializer, ElementSerializer);
TypeSerializer.prototype.parseNsAttributes = function(element) {
  var attributes = ElementSerializer.prototype.parseNsAttributes.call(this, element);
  var descriptor = element.$descriptor;
  if (descriptor.name === this.propertyDescriptor.type) {
    return attributes;
  }
  var typeNs = this.typeNs = this.nsTagName(descriptor);
  this.getNamespaces().logUsed(this.typeNs);
  var pkg = element.$model.getPackage(typeNs.uri), typePrefix = pkg.xml && pkg.xml.typePrefix || "";
  this.addAttribute(this.nsAttributeName(XSI_TYPE2), (typeNs.prefix ? typeNs.prefix + ":" : "") + typePrefix + descriptor.ns.localName);
  return attributes;
};
TypeSerializer.prototype.isLocalNs = function(ns3) {
  return ns3.uri === (this.typeNs || this.ns).uri;
};
function SavingWriter() {
  this.value = "";
  this.write = function(str) {
    this.value += str;
  };
}
function FormatingWriter(out, format2) {
  var indent = [""];
  this.append = function(str) {
    out.write(str);
    return this;
  };
  this.appendNewLine = function() {
    if (format2) {
      out.write("\n");
    }
    return this;
  };
  this.appendIndent = function() {
    if (format2) {
      out.write(indent.join("  "));
    }
    return this;
  };
  this.indent = function() {
    indent.push("");
    return this;
  };
  this.unindent = function() {
    indent.pop();
    return this;
  };
}
function Writer(options2) {
  options2 = assign2({ format: false, preamble: true }, options2 || {});
  function toXML(tree, writer) {
    var internalWriter = writer || new SavingWriter();
    var formatingWriter = new FormatingWriter(internalWriter, options2.format);
    if (options2.preamble) {
      formatingWriter.append(XML_PREAMBLE);
    }
    new ElementSerializer().build(tree).serializeTo(formatingWriter);
    if (!writer) {
      return internalWriter.value;
    }
  }
  return {
    toXML
  };
}

// node_modules/dmn-moddle/dist/index.esm.js
function DmnModdle(packages2, options2) {
  Moddle.call(this, packages2, options2);
}
DmnModdle.prototype = Object.create(Moddle.prototype);
DmnModdle.prototype.fromXML = function(xmlStr, typeName, options2) {
  if (!isString2(typeName)) {
    options2 = typeName;
    typeName = "dmn:Definitions";
  }
  var reader = new Reader(assign2({ model: this, lax: true }, options2));
  var rootHandler = reader.handler(typeName);
  return reader.fromXML(xmlStr, rootHandler);
};
DmnModdle.prototype.toXML = function(element, options2) {
  var writer = new Writer(options2);
  return new Promise(function(resolve, reject) {
    try {
      var result = writer.toXML(element);
      return resolve({
        xml: result
      });
    } catch (err) {
      return reject(err);
    }
  });
};
var name$4 = "DC";
var prefix$4 = "dc";
var uri$4 = "http://www.omg.org/spec/DMN/20180521/DC/";
var types$4 = [
  {
    name: "Dimension",
    properties: [
      {
        name: "width",
        isAttr: true,
        type: "Real"
      },
      {
        name: "height",
        isAttr: true,
        type: "Real"
      }
    ]
  },
  {
    name: "Bounds",
    properties: [
      {
        name: "height",
        isAttr: true,
        type: "Real"
      },
      {
        name: "width",
        isAttr: true,
        type: "Real"
      },
      {
        name: "x",
        isAttr: true,
        type: "Real"
      },
      {
        name: "y",
        isAttr: true,
        type: "Real"
      }
    ]
  },
  {
    name: "Point",
    properties: [
      {
        name: "x",
        isAttr: true,
        type: "Real"
      },
      {
        name: "y",
        isAttr: true,
        type: "Real"
      }
    ]
  },
  {
    name: "Color",
    properties: [
      {
        name: "red",
        type: "UML_Standard_Profile.mdzip:eee_1045467100323_917313_65"
      },
      {
        name: "green",
        type: "UML_Standard_Profile.mdzip:eee_1045467100323_917313_65"
      },
      {
        name: "blue",
        type: "UML_Standard_Profile.mdzip:eee_1045467100323_917313_65"
      }
    ]
  }
];
var associations$3 = [];
var enumerations$3 = [
  {
    name: "AlignmentKind",
    literalValues: [
      {
        name: "start"
      },
      {
        name: "center"
      },
      {
        name: "end"
      }
    ]
  }
];
var DcPackage = {
  name: name$4,
  prefix: prefix$4,
  uri: uri$4,
  types: types$4,
  associations: associations$3,
  enumerations: enumerations$3
};
var name$3 = "DI";
var prefix$3 = "di";
var uri$3 = "http://www.omg.org/spec/DMN/20180521/DI/";
var types$3 = [
  {
    name: "DiagramElement",
    isAbstract: true,
    properties: [
      {
        name: "extension",
        type: "Extension"
      },
      {
        name: "id",
        isAttr: true,
        isId: true,
        type: "String"
      },
      {
        name: "style",
        isReference: true,
        type: "Style",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "sharedStyle",
        isReference: true,
        isVirtual: true,
        type: "Style"
      }
    ]
  },
  {
    name: "Diagram",
    superClass: [
      "DiagramElement"
    ],
    properties: [
      {
        name: "name",
        isAttr: true,
        type: "String"
      },
      {
        name: "documentation",
        isAttr: true,
        type: "String"
      },
      {
        name: "resolution",
        isAttr: true,
        type: "Real"
      }
    ]
  },
  {
    name: "Shape",
    isAbstract: true,
    properties: [
      {
        name: "bounds",
        type: "dc:Bounds"
      }
    ],
    superClass: [
      "DiagramElement"
    ]
  },
  {
    name: "Edge",
    isAbstract: true,
    properties: [
      {
        name: "waypoint",
        type: "dc:Point",
        isMany: true,
        xml: {
          serialize: "property"
        }
      }
    ],
    superClass: [
      "DiagramElement"
    ]
  },
  {
    name: "Style",
    isAbstract: true,
    properties: [
      {
        name: "id",
        isAttr: true,
        isId: true,
        type: "String"
      }
    ]
  },
  {
    name: "Extension",
    properties: [
      {
        name: "values",
        isMany: true,
        type: "Element"
      }
    ]
  }
];
var associations$2 = [];
var enumerations$2 = [];
var xml$2 = {
  tagAlias: "lowerCase"
};
var DiPackage = {
  name: name$3,
  prefix: prefix$3,
  uri: uri$3,
  types: types$3,
  associations: associations$2,
  enumerations: enumerations$2,
  xml: xml$2
};
var name$2 = "DMN";
var prefix$2 = "dmn";
var uri$2 = "https://www.omg.org/spec/DMN/20191111/MODEL/";
var types$2 = [
  {
    name: "AuthorityRequirement",
    superClass: [
      "DMNElement"
    ],
    properties: [
      {
        name: "requiredAuthority",
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "requiredDecision",
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "requiredInput",
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      }
    ]
  },
  {
    name: "ItemDefinition",
    superClass: [
      "NamedElement"
    ],
    properties: [
      {
        name: "typeRef",
        type: "String"
      },
      {
        name: "allowedValues",
        type: "UnaryTests",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "typeLanguage",
        type: "String",
        isAttr: true
      },
      {
        name: "itemComponent",
        type: "ItemDefinition",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "functionItem",
        type: "FunctionItem"
      },
      {
        name: "isCollection",
        isAttr: true,
        type: "Boolean"
      }
    ]
  },
  {
    name: "Definitions",
    superClass: [
      "NamedElement"
    ],
    properties: [
      {
        name: "import",
        type: "Import",
        isMany: true
      },
      {
        name: "itemDefinition",
        type: "ItemDefinition",
        isMany: true
      },
      {
        name: "drgElement",
        type: "DRGElement",
        isMany: true
      },
      {
        name: "artifact",
        type: "Artifact",
        isMany: true
      },
      {
        name: "elementCollection",
        type: "ElementCollection",
        isMany: true
      },
      {
        name: "businessContextElement",
        type: "BusinessContextElement",
        isMany: true
      },
      {
        name: "namespace",
        type: "String",
        isAttr: true
      },
      {
        name: "expressionLanguage",
        type: "String",
        isAttr: true
      },
      {
        name: "typeLanguage",
        type: "String",
        isAttr: true
      },
      {
        name: "exporter",
        isAttr: true,
        type: "String"
      },
      {
        name: "exporterVersion",
        isAttr: true,
        type: "String"
      },
      {
        name: "dmnDI",
        type: "dmndi:DMNDI"
      }
    ]
  },
  {
    name: "KnowledgeSource",
    superClass: [
      "DRGElement"
    ],
    properties: [
      {
        name: "authorityRequirement",
        type: "AuthorityRequirement",
        isMany: true
      },
      {
        name: "type",
        type: "String"
      },
      {
        name: "owner",
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "locationURI",
        type: "String",
        isAttr: true
      }
    ]
  },
  {
    name: "DecisionRule",
    superClass: [
      "DMNElement"
    ],
    properties: [
      {
        name: "inputEntry",
        type: "UnaryTests",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "outputEntry",
        type: "LiteralExpression",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "annotationEntry",
        type: "RuleAnnotation",
        isMany: true,
        xml: {
          serialize: "property"
        }
      }
    ]
  },
  {
    name: "Expression",
    isAbstract: true,
    superClass: [
      "DMNElement"
    ],
    properties: [
      {
        name: "typeRef",
        isAttr: true,
        type: "String"
      }
    ]
  },
  {
    name: "InformationItem",
    superClass: [
      "NamedElement"
    ],
    properties: [
      {
        name: "typeRef",
        isAttr: true,
        type: "String"
      }
    ]
  },
  {
    name: "Decision",
    superClass: [
      "DRGElement"
    ],
    properties: [
      {
        name: "question",
        type: "String",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "allowedAnswers",
        type: "String",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "variable",
        type: "InformationItem",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "informationRequirement",
        type: "InformationRequirement",
        isMany: true
      },
      {
        name: "knowledgeRequirement",
        type: "KnowledgeRequirement",
        isMany: true
      },
      {
        name: "authorityRequirement",
        type: "AuthorityRequirement",
        isMany: true
      },
      {
        name: "supportedObjective",
        isMany: true,
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "impactedPerformanceIndicator",
        type: "DMNElementReference",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "decisionMaker",
        type: "DMNElementReference",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "decisionOwner",
        type: "DMNElementReference",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "usingProcess",
        isMany: true,
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "usingTask",
        isMany: true,
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "decisionLogic",
        type: "Expression"
      }
    ]
  },
  {
    name: "Invocation",
    superClass: [
      "Expression"
    ],
    properties: [
      {
        name: "calledFunction",
        type: "Expression"
      },
      {
        name: "binding",
        type: "Binding",
        isMany: true
      }
    ]
  },
  {
    name: "OrganisationalUnit",
    superClass: [
      "BusinessContextElement"
    ],
    properties: [
      {
        name: "decisionMade",
        type: "Decision",
        isReference: true,
        isMany: true
      },
      {
        name: "decisionOwned",
        type: "Decision",
        isReference: true,
        isMany: true
      }
    ]
  },
  {
    name: "Import",
    superClass: [
      "NamedElement"
    ],
    properties: [
      {
        name: "importType",
        type: "String",
        isAttr: true
      },
      {
        name: "locationURI",
        type: "String",
        isAttr: true
      },
      {
        name: "namespace",
        type: "String",
        isAttr: true
      }
    ]
  },
  {
    name: "InformationRequirement",
    superClass: [
      "DMNElement"
    ],
    properties: [
      {
        name: "requiredDecision",
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "requiredInput",
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      }
    ]
  },
  {
    name: "ElementCollection",
    superClass: [
      "NamedElement"
    ],
    properties: [
      {
        name: "drgElement",
        type: "DMNElementReference",
        isMany: true,
        xml: {
          serialize: "property"
        }
      }
    ]
  },
  {
    name: "DRGElement",
    isAbstract: true,
    superClass: [
      "NamedElement"
    ],
    properties: []
  },
  {
    name: "InputData",
    superClass: [
      "DRGElement"
    ],
    properties: [
      {
        name: "variable",
        type: "InformationItem",
        xml: {
          serialize: "property"
        }
      }
    ]
  },
  {
    name: "DMNElement",
    isAbstract: true,
    properties: [
      {
        name: "description",
        type: "String"
      },
      {
        name: "extensionElements",
        type: "ExtensionElements"
      },
      {
        name: "id",
        type: "String",
        isAttr: true,
        isId: true
      },
      {
        name: "extensionAttribute",
        type: "ExtensionAttribute",
        isMany: true
      },
      {
        name: "label",
        isAttr: true,
        type: "String"
      }
    ]
  },
  {
    name: "InputClause",
    superClass: [
      "DMNElement"
    ],
    properties: [
      {
        name: "inputExpression",
        type: "LiteralExpression",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "inputValues",
        type: "UnaryTests",
        xml: {
          serialize: "property"
        }
      }
    ]
  },
  {
    name: "DecisionTable",
    superClass: [
      "Expression"
    ],
    properties: [
      {
        name: "input",
        type: "InputClause",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "output",
        type: "OutputClause",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "annotation",
        type: "RuleAnnotationClause",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "rule",
        type: "DecisionRule",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "hitPolicy",
        type: "HitPolicy",
        isAttr: true,
        "default": "UNIQUE"
      },
      {
        name: "aggregation",
        type: "BuiltinAggregator",
        isAttr: true
      },
      {
        name: "preferredOrientation",
        type: "DecisionTableOrientation",
        isAttr: true
      },
      {
        name: "outputLabel",
        isAttr: true,
        type: "String"
      }
    ]
  },
  {
    name: "LiteralExpression",
    superClass: [
      "Expression"
    ],
    properties: [
      {
        name: "expressionLanguage",
        type: "String",
        isAttr: true
      },
      {
        name: "text",
        type: "String"
      },
      {
        name: "importedValues",
        type: "ImportedValues"
      }
    ]
  },
  {
    name: "Binding",
    properties: [
      {
        name: "parameter",
        type: "InformationItem",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "bindingFormula",
        type: "Expression"
      }
    ]
  },
  {
    name: "KnowledgeRequirement",
    superClass: [
      "DMNElement"
    ],
    properties: [
      {
        name: "requiredKnowledge",
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      }
    ]
  },
  {
    name: "BusinessKnowledgeModel",
    superClass: [
      "Invocable"
    ],
    properties: [
      {
        name: "encapsulatedLogic",
        type: "FunctionDefinition",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "knowledgeRequirement",
        type: "KnowledgeRequirement",
        isMany: true
      },
      {
        name: "authorityRequirement",
        type: "AuthorityRequirement",
        isMany: true
      }
    ]
  },
  {
    name: "BusinessContextElement",
    isAbstract: true,
    superClass: [
      "NamedElement"
    ],
    properties: [
      {
        name: "URI",
        type: "String",
        isAttr: true
      }
    ]
  },
  {
    name: "PerformanceIndicator",
    superClass: [
      "BusinessContextElement"
    ],
    properties: [
      {
        name: "impactingDecision",
        type: "DMNElementReference",
        isMany: true,
        xml: {
          serialize: "property"
        }
      }
    ]
  },
  {
    name: "FunctionDefinition",
    superClass: [
      "Expression"
    ],
    properties: [
      {
        name: "formalParameter",
        type: "InformationItem",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "body",
        type: "Expression"
      },
      {
        name: "kind",
        type: "FunctionKind",
        isAttr: true
      }
    ]
  },
  {
    name: "Context",
    superClass: [
      "Expression"
    ],
    properties: [
      {
        name: "contextEntry",
        type: "ContextEntry",
        isMany: true
      }
    ]
  },
  {
    name: "ContextEntry",
    superClass: [
      "DMNElement"
    ],
    properties: [
      {
        name: "variable",
        type: "InformationItem",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "value",
        type: "Expression"
      }
    ]
  },
  {
    name: "List",
    superClass: [
      "Expression"
    ],
    properties: [
      {
        name: "elements",
        isMany: true,
        type: "Expression"
      }
    ]
  },
  {
    name: "Relation",
    superClass: [
      "Expression"
    ],
    properties: [
      {
        name: "column",
        type: "InformationItem",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "row",
        type: "List",
        isMany: true,
        xml: {
          serialize: "property"
        }
      }
    ]
  },
  {
    name: "OutputClause",
    superClass: [
      "DMNElement"
    ],
    properties: [
      {
        name: "outputValues",
        type: "UnaryTests",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "defaultOutputEntry",
        type: "LiteralExpression",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "name",
        isAttr: true,
        type: "String"
      },
      {
        name: "typeRef",
        isAttr: true,
        type: "String"
      }
    ]
  },
  {
    name: "UnaryTests",
    superClass: [
      "Expression"
    ],
    properties: [
      {
        name: "text",
        type: "String"
      },
      {
        name: "expressionLanguage",
        type: "String",
        isAttr: true
      }
    ]
  },
  {
    name: "NamedElement",
    isAbstract: true,
    superClass: [
      "DMNElement"
    ],
    properties: [
      {
        name: "name",
        isAttr: true,
        type: "String"
      }
    ]
  },
  {
    name: "ImportedValues",
    superClass: [
      "Import"
    ],
    properties: [
      {
        name: "importedElement",
        type: "String"
      },
      {
        name: "expressionLanguage",
        type: "String",
        isAttr: true
      }
    ]
  },
  {
    name: "DecisionService",
    superClass: [
      "Invocable"
    ],
    properties: [
      {
        name: "outputDecision",
        type: "DMNElementReference",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "encapsulatedDecision",
        type: "DMNElementReference",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "inputDecision",
        type: "DMNElementReference",
        isMany: true,
        xml: {
          serialize: "property"
        }
      },
      {
        name: "inputData",
        type: "DMNElementReference",
        isMany: true,
        xml: {
          serialize: "property"
        }
      }
    ]
  },
  {
    name: "ExtensionElements",
    properties: [
      {
        name: "values",
        type: "Element",
        isMany: true
      }
    ]
  },
  {
    name: "ExtensionAttribute",
    properties: [
      {
        name: "value",
        type: "Element"
      },
      {
        name: "valueRef",
        type: "Element",
        isAttr: true,
        isReference: true
      },
      {
        name: "name",
        isAttr: true,
        type: "String"
      }
    ]
  },
  {
    name: "Element",
    isAbstract: true,
    properties: [
      {
        name: "extensionAttribute",
        type: "ExtensionAttribute",
        isAttr: true,
        isReference: true
      },
      {
        name: "elements",
        type: "ExtensionElements",
        isAttr: true,
        isReference: true
      }
    ]
  },
  {
    name: "Artifact",
    isAbstract: true,
    superClass: [
      "DMNElement"
    ],
    properties: []
  },
  {
    name: "Association",
    superClass: [
      "Artifact"
    ],
    properties: [
      {
        name: "sourceRef",
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "targetRef",
        type: "DMNElementReference",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "associationDirection",
        type: "AssociationDirection",
        isAttr: true
      }
    ]
  },
  {
    name: "TextAnnotation",
    superClass: [
      "Artifact"
    ],
    properties: [
      {
        name: "text",
        type: "String"
      },
      {
        name: "textFormat",
        isAttr: true,
        type: "String",
        "default": "text/plain"
      }
    ]
  },
  {
    name: "RuleAnnotationClause",
    properties: [
      {
        name: "name",
        isAttr: true,
        type: "String"
      }
    ]
  },
  {
    name: "RuleAnnotation",
    properties: [
      {
        name: "text",
        type: "String"
      }
    ]
  },
  {
    name: "Invocable",
    isAbstract: true,
    superClass: [
      "DRGElement"
    ],
    properties: [
      {
        name: "variable",
        type: "InformationItem",
        xml: {
          serialize: "property"
        }
      }
    ]
  },
  {
    name: "Group",
    superClass: [
      "Artifact"
    ],
    properties: [
      {
        name: "name",
        isAttr: true,
        type: "String"
      }
    ]
  },
  {
    name: "FunctionItem",
    superClass: [
      "DMNElement"
    ],
    properties: [
      {
        name: "parameters",
        isMany: true,
        type: "InformationItem",
        xml: {
          serialize: "property"
        }
      },
      {
        name: "outputTypeRef",
        isAttr: true,
        type: "String"
      }
    ]
  },
  {
    name: "DMNElementReference",
    properties: [
      {
        isAttr: true,
        name: "href",
        type: "String"
      }
    ]
  }
];
var enumerations$1 = [
  {
    name: "HitPolicy",
    literalValues: [
      {
        name: "UNIQUE"
      },
      {
        name: "FIRST"
      },
      {
        name: "PRIORITY"
      },
      {
        name: "ANY"
      },
      {
        name: "COLLECT"
      },
      {
        name: "RULE ORDER"
      },
      {
        name: "OUTPUT ORDER"
      }
    ]
  },
  {
    name: "BuiltinAggregator",
    literalValues: [
      {
        name: "SUM"
      },
      {
        name: "COUNT"
      },
      {
        name: "MIN"
      },
      {
        name: "MAX"
      }
    ]
  },
  {
    name: "DecisionTableOrientation",
    literalValues: [
      {
        name: "Rule-as-Row"
      },
      {
        name: "Rule-as-Column"
      },
      {
        name: "CrossTable"
      }
    ]
  },
  {
    name: "AssociationDirection",
    literalValues: [
      {
        name: "None"
      },
      {
        name: "One"
      },
      {
        name: "Both"
      }
    ]
  },
  {
    name: "FunctionKind",
    literalValues: [
      {
        name: "FEEL"
      },
      {
        name: "Java"
      },
      {
        name: "PMML"
      }
    ]
  }
];
var associations$1 = [];
var xml$1 = {
  tagAlias: "lowerCase"
};
var DmnPackage = {
  name: name$2,
  prefix: prefix$2,
  uri: uri$2,
  types: types$2,
  enumerations: enumerations$1,
  associations: associations$1,
  xml: xml$1
};
var name$1 = "DMNDI";
var prefix$1 = "dmndi";
var uri$1 = "https://www.omg.org/spec/DMN/20191111/DMNDI/";
var types$1 = [
  {
    name: "DMNDI",
    properties: [
      {
        name: "diagrams",
        type: "DMNDiagram",
        isMany: true
      },
      {
        name: "styles",
        type: "DMNStyle",
        isMany: true
      }
    ]
  },
  {
    name: "DMNStyle",
    superClass: [
      "di:Style"
    ],
    properties: [
      {
        name: "fillColor",
        type: "dc:Color",
        isAttr: true
      },
      {
        name: "strokeColor",
        type: "dc:Color",
        isAttr: true
      },
      {
        name: "fontColor",
        type: "dc:Color",
        isAttr: true
      },
      {
        name: "fontSize",
        isAttr: true,
        type: "Real"
      },
      {
        name: "fontFamily",
        isAttr: true,
        type: "String"
      },
      {
        name: "fontItalic",
        isAttr: true,
        type: "Boolean"
      },
      {
        name: "fontBold",
        isAttr: true,
        type: "Boolean"
      },
      {
        name: "fontUnderline",
        isAttr: true,
        type: "Boolean"
      },
      {
        name: "fontStrikeThrough",
        isAttr: true,
        type: "Boolean"
      },
      {
        name: "labelHorizontalAlignment",
        type: "dc:AlignmentKind",
        isAttr: true
      },
      {
        name: "labelVerticalAlignment",
        type: "dc:AlignmentKind",
        isAttr: true
      }
    ]
  },
  {
    name: "DMNDiagram",
    superClass: [
      "di:Diagram"
    ],
    properties: [
      {
        name: "dmnElementRef",
        type: "dmn:DMNElement",
        isAttr: true,
        isReference: true
      },
      {
        name: "size",
        type: "Size"
      },
      {
        name: "localStyle",
        type: "DMNStyle",
        isVirtual: true
      },
      {
        name: "sharedStyle",
        type: "DMNStyle",
        isVirtual: true,
        isReference: true,
        redefines: "di:DiagramElement#sharedStyle"
      },
      {
        name: "diagramElements",
        type: "DMNDiagramElement",
        isMany: true
      }
    ]
  },
  {
    name: "DMNDiagramElement",
    isAbstract: true,
    superClass: [
      "di:DiagramElement"
    ],
    properties: [
      {
        name: "dmnElementRef",
        type: "dmn:DMNElement",
        isAttr: true,
        isReference: true
      },
      {
        name: "sharedStyle",
        type: "DMNStyle",
        isVirtual: true,
        isReference: true,
        redefines: "di:DiagramElement#sharedStyle"
      },
      {
        name: "localStyle",
        type: "DMNStyle",
        isVirtual: true
      },
      {
        name: "label",
        type: "DMNLabel"
      }
    ]
  },
  {
    name: "DMNLabel",
    superClass: [
      "di:Shape"
    ],
    properties: [
      {
        name: "text",
        type: "Text"
      }
    ]
  },
  {
    name: "DMNShape",
    superClass: [
      "di:Shape",
      "DMNDiagramElement"
    ],
    properties: [
      {
        name: "isListedInputData",
        isAttr: true,
        type: "Boolean"
      },
      {
        name: "decisionServiceDividerLine",
        type: "DMNDecisionServiceDividerLine"
      },
      {
        name: "isCollapsed",
        isAttr: true,
        type: "Boolean"
      }
    ]
  },
  {
    name: "DMNEdge",
    superClass: [
      "di:Edge",
      "DMNDiagramElement"
    ],
    properties: [
      {
        name: "sourceElement",
        type: "DMNDiagramElement",
        isAttr: true,
        isReference: true
      },
      {
        name: "targetElement",
        type: "DMNDiagramElement",
        isAttr: true,
        isReference: true
      }
    ]
  },
  {
    name: "DMNDecisionServiceDividerLine",
    superClass: [
      "di:Edge"
    ]
  },
  {
    name: "Text",
    properties: [
      {
        name: "text",
        isBody: true,
        type: "String"
      }
    ]
  },
  {
    name: "Size",
    superClass: [
      "dc:Dimension"
    ]
  }
];
var associations = [];
var enumerations = [];
var DmnDiPackage = {
  name: name$1,
  prefix: prefix$1,
  uri: uri$1,
  types: types$1,
  associations,
  enumerations
};
var name = "bpmn.io DI for DMN";
var uri = "http://bpmn.io/schema/dmn/biodi/2.0";
var prefix = "biodi";
var xml = {
  tagAlias: "lowerCase"
};
var types = [
  {
    name: "DecisionTable",
    isAbstract: true,
    "extends": [
      "dmn:DecisionTable"
    ],
    properties: [
      {
        name: "annotationsWidth",
        isAttr: true,
        type: "Integer"
      }
    ]
  },
  {
    name: "OutputClause",
    isAbstract: true,
    "extends": [
      "dmn:OutputClause"
    ],
    properties: [
      {
        name: "width",
        isAttr: true,
        type: "Integer"
      }
    ]
  },
  {
    name: "InputClause",
    isAbstract: true,
    "extends": [
      "dmn:InputClause"
    ],
    properties: [
      {
        name: "width",
        isAttr: true,
        type: "Integer"
      }
    ]
  }
];
var BioDiPackage = {
  name,
  uri,
  prefix,
  xml,
  types
};
var packages = {
  dc: DcPackage,
  di: DiPackage,
  dmn: DmnPackage,
  dmndi: DmnDiPackage,
  biodi: BioDiPackage
};
function simple(additionalPackages, options2) {
  var pks = assign2({}, packages, additionalPackages);
  return new DmnModdle(pks, options2);
}
var index_esm_default = simple;

// node_modules/min-dom/dist/index.esm.js
function attr(el, name2, val) {
  if (arguments.length == 2) {
    return el.getAttribute(name2);
  }
  if (val === null) {
    return el.removeAttribute(name2);
  }
  el.setAttribute(name2, val);
  return el;
}
var indexOf = [].indexOf;
var indexof = function(arr, obj) {
  if (indexOf)
    return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj)
      return i;
  }
  return -1;
};
var re = /\s+/;
var toString = Object.prototype.toString;
function classes(el) {
  return new ClassList(el);
}
function ClassList(el) {
  if (!el || !el.nodeType) {
    throw new Error("A DOM element reference is required");
  }
  this.el = el;
  this.list = el.classList;
}
ClassList.prototype.add = function(name2) {
  if (this.list) {
    this.list.add(name2);
    return this;
  }
  var arr = this.array();
  var i = indexof(arr, name2);
  if (!~i)
    arr.push(name2);
  this.el.className = arr.join(" ");
  return this;
};
ClassList.prototype.remove = function(name2) {
  if (toString.call(name2) == "[object RegExp]") {
    return this.removeMatching(name2);
  }
  if (this.list) {
    this.list.remove(name2);
    return this;
  }
  var arr = this.array();
  var i = indexof(arr, name2);
  if (~i)
    arr.splice(i, 1);
  this.el.className = arr.join(" ");
  return this;
};
ClassList.prototype.removeMatching = function(re3) {
  var arr = this.array();
  for (var i = 0; i < arr.length; i++) {
    if (re3.test(arr[i])) {
      this.remove(arr[i]);
    }
  }
  return this;
};
ClassList.prototype.toggle = function(name2, force) {
  if (this.list) {
    if (typeof force !== "undefined") {
      if (force !== this.list.toggle(name2, force)) {
        this.list.toggle(name2);
      }
    } else {
      this.list.toggle(name2);
    }
    return this;
  }
  if (typeof force !== "undefined") {
    if (!force) {
      this.remove(name2);
    } else {
      this.add(name2);
    }
  } else {
    if (this.has(name2)) {
      this.remove(name2);
    } else {
      this.add(name2);
    }
  }
  return this;
};
ClassList.prototype.array = function() {
  var className = this.el.getAttribute("class") || "";
  var str = className.replace(/^\s+|\s+$/g, "");
  var arr = str.split(re);
  if (arr[0] === "")
    arr.shift();
  return arr;
};
ClassList.prototype.has = ClassList.prototype.contains = function(name2) {
  return this.list ? this.list.contains(name2) : !!~indexof(this.array(), name2);
};
var proto = typeof Element !== "undefined" ? Element.prototype : {};
var vendor = proto.matches || proto.matchesSelector || proto.webkitMatchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector;
var matchesSelector = match;
function match(el, selector) {
  if (!el || el.nodeType !== 1)
    return false;
  if (vendor)
    return vendor.call(el, selector);
  var nodes = el.parentNode.querySelectorAll(selector);
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i] == el)
      return true;
  }
  return false;
}
function closest(element, selector, checkYourSelf) {
  var currentElem = checkYourSelf ? element : element.parentNode;
  while (currentElem && currentElem.nodeType !== document.DOCUMENT_NODE && currentElem.nodeType !== document.DOCUMENT_FRAGMENT_NODE) {
    if (matchesSelector(currentElem, selector)) {
      return currentElem;
    }
    currentElem = currentElem.parentNode;
  }
  return matchesSelector(currentElem, selector) ? currentElem : null;
}
var bind$1 = window.addEventListener ? "addEventListener" : "attachEvent";
var unbind = window.removeEventListener ? "removeEventListener" : "detachEvent";
var prefix2 = bind$1 !== "addEventListener" ? "on" : "";
var bind_1 = function(el, type, fn, capture) {
  el[bind$1](prefix2 + type, fn, capture || false);
  return fn;
};
var unbind_1 = function(el, type, fn, capture) {
  el[unbind](prefix2 + type, fn, capture || false);
  return fn;
};
var componentEvent = {
  bind: bind_1,
  unbind: unbind_1
};
var forceCaptureEvents = ["focus", "blur"];
function bind$2(el, selector, type, fn, capture) {
  if (forceCaptureEvents.indexOf(type) !== -1) {
    capture = true;
  }
  return componentEvent.bind(el, type, function(e2) {
    var target = e2.target || e2.srcElement;
    e2.delegateTarget = closest(target, selector, true, el);
    if (e2.delegateTarget) {
      fn.call(el, e2);
    }
  }, capture);
}
function unbind$1(el, type, fn, capture) {
  if (forceCaptureEvents.indexOf(type) !== -1) {
    capture = true;
  }
  return componentEvent.unbind(el, type, fn, capture);
}
var delegate = {
  bind: bind$2,
  unbind: unbind$1
};
var domify = parse;
var innerHTMLBug = false;
var bugTestDiv;
if (typeof document !== "undefined") {
  bugTestDiv = document.createElement("div");
  bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
  innerHTMLBug = !bugTestDiv.getElementsByTagName("link").length;
  bugTestDiv = void 0;
}
var map$1 = {
  legend: [1, "<fieldset>", "</fieldset>"],
  tr: [2, "<table><tbody>", "</tbody></table>"],
  col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
  _default: innerHTMLBug ? [1, "X<div>", "</div>"] : [0, "", ""]
};
map$1.td = map$1.th = [3, "<table><tbody><tr>", "</tr></tbody></table>"];
map$1.option = map$1.optgroup = [1, '<select multiple="multiple">', "</select>"];
map$1.thead = map$1.tbody = map$1.colgroup = map$1.caption = map$1.tfoot = [1, "<table>", "</table>"];
map$1.polyline = map$1.ellipse = map$1.polygon = map$1.circle = map$1.text = map$1.line = map$1.path = map$1.rect = map$1.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">', "</svg>"];
function parse(html, doc) {
  if (typeof html != "string")
    throw new TypeError("String expected");
  if (!doc)
    doc = document;
  var m = /<([\w:]+)/.exec(html);
  if (!m)
    return doc.createTextNode(html);
  html = html.replace(/^\s+|\s+$/g, "");
  var tag = m[1];
  if (tag == "body") {
    var el = doc.createElement("html");
    el.innerHTML = html;
    return el.removeChild(el.lastChild);
  }
  var wrap = map$1[tag] || map$1._default;
  var depth = wrap[0];
  var prefix4 = wrap[1];
  var suffix = wrap[2];
  var el = doc.createElement("div");
  el.innerHTML = prefix4 + html + suffix;
  while (depth--)
    el = el.lastChild;
  if (el.firstChild == el.lastChild) {
    return el.removeChild(el.firstChild);
  }
  var fragment = doc.createDocumentFragment();
  while (el.firstChild) {
    fragment.appendChild(el.removeChild(el.firstChild));
  }
  return fragment;
}
function query(selector, el) {
  el = el || document;
  return el.querySelector(selector);
}
function remove(el) {
  el.parentNode && el.parentNode.removeChild(el);
}

// node_modules/dmn-js-shared/lib/util/CompatibilityUtils.js
function wrapForCompatibility(api) {
  return function() {
    if (!window.Promise) {
      throw new Error("Promises is not supported in this environment. Please polyfill Promise.");
    }
    var argLen = arguments.length;
    if (argLen >= 1 && isFunction2(arguments[argLen - 1])) {
      var callback = arguments[argLen - 1];
      console.warn(new Error("Passing callbacks to " + replaceBoundPrefix(api.name) + " is deprecated and will be removed in a future major release. Please switch to promises: https://bpmn.io/l/moving-to-promises.html"));
      var argsWithoutCallback = Array.prototype.slice.call(arguments, 0, -1);
      api.apply(this, argsWithoutCallback).then(function(result) {
        var firstKey = Object.keys(result)[0];
        return callback(null, result[firstKey]);
      }, function(err) {
        return callback(err, err.warnings);
      });
    } else {
      return api.apply(this, arguments);
    }
  };
}
function replaceBoundPrefix(string) {
  return string.replace("bound ", "");
}

// node_modules/dmn-js-shared/lib/base/Manager.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DEFAULT_CONTAINER_OPTIONS = {
  width: "100%",
  height: "100%",
  position: "relative"
};
var Manager = class {
  constructor() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _defineProperty(this, "_viewsChanged", () => {
      this._emit("views.changed", {
        views: this._views,
        activeView: this._activeView
      });
    });
    this._eventBus = new EventBus();
    this._viewsChanged = debounce2(this._viewsChanged, 0);
    this._views = [];
    this._viewers = {};
    this.open = wrapForCompatibility(this.open.bind(this));
    this.importXML = wrapForCompatibility(this.importXML.bind(this));
    this.saveXML = wrapForCompatibility(this.saveXML.bind(this));
    this._init(options2);
  }
  importXML(xml2, options2) {
    var self2 = this;
    options2 = options2 || {
      open: true
    };
    return new Promise(function(resolve, reject) {
      var previousActiveView = self2._activeView;
      self2._clear().then(() => {
        xml2 = self2._emit("import.parse.start", {
          xml: xml2
        }) || xml2;
        var parseWarnings;
        self2._moddle.fromXML(xml2, "dmn:Definitions").then((parseResult) => {
          var definitions = parseResult.rootElement;
          var references = parseResult.references;
          var elementsById = parseResult.elementsById;
          parseWarnings = parseResult.warnings;
          definitions = self2._emit("import.parse.complete", ParseCompleteEvent({
            error: null,
            definitions,
            elementsById,
            references,
            warnings: parseWarnings
          })) || definitions;
          self2._setDefinitions(definitions);
          if (!options2.open) {
            self2._emit("import.done", {
              error: null,
              warnings: parseWarnings
            });
            resolve({
              warnings: parseWarnings
            });
            return;
          }
          var view = self2._getInitialView(self2._views, previousActiveView);
          if (!view) {
            var noDisplayableContentsErr = new Error("no displayable contents");
            self2._emit("import.done", {
              error: noDisplayableContentsErr,
              warnings: parseWarnings
            });
            noDisplayableContentsErr.warnings = parseWarnings;
            return reject(noDisplayableContentsErr);
          }
          self2.open(view).then((result) => ({
            warnings: result.warnings
          })).catch((error3) => ({
            error: error3,
            warnings: error3.warnings
          })).then((result) => {
            var allWarnings = [].concat(parseWarnings, result.warnings);
            self2._emit("import.done", {
              error: result.error,
              warnings: allWarnings
            });
            if (result.error) {
              result.error.warnings = allWarnings;
              reject(result.error);
            } else {
              resolve({
                warnings: allWarnings
              });
            }
          });
        }).catch((parseError) => {
          parseWarnings = parseError.warnings;
          parseError = checkDMNCompatibilityError(parseError, xml2) || checkValidationError(parseError) || parseError;
          self2._emit("import.parse.complete", ParseCompleteEvent({
            error: parseError,
            warnings: parseWarnings
          }));
          self2._emit("import.done", {
            error: parseError,
            warnings: parseWarnings
          });
          parseError.warnings = parseWarnings;
          return reject(parseError);
        });
      }).catch((clearError) => {
        self2._emit("import.done", {
          error: clearError,
          warnings: []
        });
        clearError.warnings = [];
        return reject(clearError);
      });
    });
    function ParseCompleteEvent(data) {
      var event2 = self2._eventBus.createEvent(data);
      Object.defineProperty(event2, "context", {
        enumerable: true,
        get: function get3() {
          console.warn(new Error("import.parse.complete <context> is deprecated and will be removed in future library versions"));
          return {
            warnings: data.warnings,
            references: data.references,
            elementsById: data.elementsById
          };
        }
      });
      return event2;
    }
  }
  getDefinitions() {
    return this._definitions;
  }
  getActiveView() {
    return this._activeView;
  }
  getActiveViewer() {
    var activeView = this.getActiveView();
    return activeView && this._getViewer(activeView);
  }
  getView(element) {
    return this._views.filter(function(v) {
      return v.element === element;
    })[0];
  }
  getViews() {
    return this._views;
  }
  saveXML(options2) {
    var self2 = this;
    options2 = options2 || {};
    var definitions = this._definitions;
    return new Promise(function(resolve, reject) {
      if (!definitions) {
        reject(new Error("no definitions loaded"));
        return;
      }
      definitions = self2._emit("saveXML.start", {
        definitions
      }) || definitions;
      self2._moddle.toXML(definitions, options2).then(function(result) {
        var xml2 = result.xml;
        xml2 = self2._emit("saveXML.serialized", {
          xml: xml2
        }) || xml2;
        return {
          xml: xml2
        };
      }).catch((error3) => ({
        error: error3
      })).then((result) => {
        self2._emit("saveXML.done", result);
        if (result.error) {
          reject(result.error);
        } else {
          resolve({
            xml: result.xml
          });
        }
      });
    });
  }
  on() {
    this._eventBus.on(...arguments);
  }
  off() {
    this._eventBus.off(...arguments);
  }
  once() {
    this._eventBus.once(...arguments);
  }
  attachTo(parentNode) {
    if (parentNode.get && parentNode.constructor.prototype.jquery) {
      parentNode = parentNode.get(0);
    }
    if (typeof parentNode === "string") {
      parentNode = query(parentNode);
    }
    parentNode.appendChild(this._container);
    this._emit("attach", {});
  }
  detach() {
    this._emit("detach", {});
    remove(this._container);
  }
  destroy() {
    Object.keys(this._viewers).forEach((viewerId) => {
      var viewer = this._viewers[viewerId];
      safeExecute(viewer, "destroy");
    });
    remove(this._container);
  }
  _init(options2) {
    this._options = options2;
    this._moddle = this._createModdle(options2);
    this._viewers = {};
    this._views = [];
    const container = domify('<div class="dmn-js-parent"></div>');
    const containerOptions = assign2({}, DEFAULT_CONTAINER_OPTIONS, options2);
    assign2(container.style, {
      width: ensureUnit(containerOptions.width),
      height: ensureUnit(containerOptions.height),
      position: containerOptions.position
    });
    this._container = container;
    if (options2.container) {
      this.attachTo(options2.container);
    }
  }
  _clear() {
    return this._switchView(null);
  }
  open(view) {
    return this._switchView(view);
  }
  _setDefinitions(definitions) {
    this._definitions = definitions;
    this._updateViews();
  }
  _updateViews() {
    var definitions = this._definitions;
    if (!definitions) {
      this._views = [];
      this._switchView(null);
      return;
    }
    var viewProviders = this._getViewProviders();
    var displayableElements = [definitions, ...definitions.drgElement || []];
    var views = this._views, newViews = [];
    for (var _i = 0, _displayableElements = displayableElements; _i < _displayableElements.length; _i++) {
      var element = _displayableElements[_i];
      var provider = find2(viewProviders, function(provider2) {
        if (typeof provider2.opens === "string") {
          return provider2.opens === element.$type;
        } else {
          return provider2.opens(element);
        }
      });
      if (!provider) {
        continue;
      }
      var view = {
        element,
        id: element.id,
        name: element.name,
        type: provider.id
      };
      newViews.push(view);
    }
    var activeView = this._activeView, newActiveView;
    if (activeView) {
      newActiveView = find2(newViews, function(view2) {
        return viewsEqual(activeView, view2);
      }) || this._getInitialView(newViews);
      if (!newActiveView) {
        this._switchView(null);
        return;
      }
    }
    var activeViewChanged = !viewsEqual(activeView, newActiveView) || viewNameChanged(activeView, newActiveView);
    var viewsChanged = views.length !== newViews.length || !every2(newViews, function(newView) {
      return find2(views, function(view2) {
        return viewsEqual(view2, newView) && !viewNameChanged(view2, newView);
      });
    });
    this._activeView = newActiveView;
    this._views = newViews;
    if (activeViewChanged || viewsChanged) {
      this._viewsChanged();
    }
  }
  _getInitialView(views, preferredView) {
    var initialView;
    if (preferredView) {
      initialView = find2(views, function(view) {
        return viewsEqual(view, preferredView);
      }) || find2(views, function(view) {
        return view.type === preferredView;
      });
    }
    return initialView || views[0];
  }
  _switchView(newView) {
    var self2 = this;
    return new Promise(function(resolve, reject) {
      var complete = (openError, openResult) => {
        self2._viewsChanged();
        if (openError) {
          reject(openError);
        } else {
          resolve(openResult);
        }
      };
      var activeView = self2.getActiveView(), activeViewer;
      var newViewer = newView && self2._getViewer(newView), element = newView && newView.element;
      if (activeView) {
        activeViewer = self2._getViewer(activeView);
        if (activeViewer !== newViewer) {
          safeExecute(activeViewer, "clear");
          activeViewer.detach();
        }
      }
      self2._activeView = newView;
      if (newViewer) {
        if (activeViewer !== newViewer) {
          newViewer.attachTo(self2._container);
        }
        self2._emit("import.render.start", {
          view: newView,
          element
        });
        newViewer.open(element).then((result) => {
          self2._emit("import.render.complete", {
            view: newView,
            error: null,
            warnings: result.warnings
          });
          complete(null, result);
        }).catch((error3) => {
          self2._emit("import.render.complete", {
            view: newView,
            error: error3,
            warnings: error3.warnings
          });
          complete(error3, null);
        });
        return;
      }
      complete();
    });
  }
  _getViewer(view) {
    var type = view.type;
    var viewer = this._viewers[type];
    if (!viewer) {
      viewer = this._viewers[type] = this._createViewer(view.type);
      this._emit("viewer.created", {
        type,
        viewer
      });
    }
    return viewer;
  }
  _createViewer(id) {
    var provider = find2(this._getViewProviders(), function(provider2) {
      return provider2.id === id;
    });
    if (!provider) {
      throw new Error("no provider for view type <" + id + ">");
    }
    var Viewer6 = provider.constructor;
    var providerOptions = this._options[id] || {};
    var commonOptions = this._options.common || {};
    return new Viewer6(_objectSpread(_objectSpread(_objectSpread({}, commonOptions), providerOptions), {}, {
      additionalModules: [...providerOptions.additionalModules || [], {
        _parent: ["value", this],
        moddle: ["value", this._moddle]
      }]
    }));
  }
  _emit() {
    return this._eventBus.fire(...arguments);
  }
  _createModdle(options2) {
    return new index_esm_default(options2.moddleExtensions);
  }
  _getViewProviders() {
    return [];
  }
};
function ensureUnit(val) {
  return val + (isNumber2(val) ? "px" : "");
}
function checkDMNCompatibilityError(err, xml2) {
  if (err.message !== "failed to parse document as <dmn:Definitions>") {
    return null;
  }
  var olderDMNVersion = xml2.indexOf('"http://www.omg.org/spec/DMN/20151101/dmn.xsd"') !== -1 && "1.1" || xml2.indexOf('"http://www.omg.org/spec/DMN/20180521/MODEL/"') !== -1 && "1.2";
  if (!olderDMNVersion) {
    return null;
  }
  err = new Error("unsupported DMN " + olderDMNVersion + " file detected; only DMN 1.3 files can be opened");
  console.error("Cannot open what looks like a DMN " + olderDMNVersion + " diagram. Please refer to https://bpmn.io/l/dmn-compatibility.html to learn how to make the toolkit compatible with older DMN files", err);
  return err;
}
function checkValidationError(err) {
  var pattern = /unparsable content <([^>]+)> detected([\s\S]*)$/, match2 = pattern.exec(err.message);
  if (!match2) {
    return null;
  }
  err.message = "unparsable content <" + match2[1] + "> detected; this may indicate an invalid DMN 1.3 diagram file" + match2[2];
  return err;
}
function viewsEqual(a, b) {
  if (!isDefined2(a)) {
    if (!isDefined2(b)) {
      return true;
    } else {
      return false;
    }
  }
  if (!isDefined2(b)) {
    return false;
  }
  return a.element === b.element || a.id === b.id;
}
function viewNameChanged(a, b) {
  return !a || !b || a.name !== b.name;
}
function safeExecute(viewer, method) {
  if (isFunction2(viewer[method])) {
    viewer[method]();
  }
}

// node_modules/inherits-browser/dist/index.es.js
function e(e2, t) {
  t && (e2.super_ = t, e2.prototype = Object.create(t.prototype, { constructor: { value: e2, enumerable: false, writable: true, configurable: true } }));
}

// node_modules/didi/dist/index.esm.js
var CLASS_PATTERN = /^class[ {]/;
function isClass(fn) {
  return CLASS_PATTERN.test(fn.toString());
}
function isArray3(obj) {
  return Array.isArray(obj);
}
function hasOwnProp(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function annotate(...args) {
  if (args.length === 1 && isArray3(args[0])) {
    args = args[0];
  }
  args = [...args];
  const fn = args.pop();
  fn.$inject = args;
  return fn;
}
var CONSTRUCTOR_ARGS = /constructor\s*[^(]*\(\s*([^)]*)\)/m;
var FN_ARGS = /^(?:async\s+)?(?:function\s*[^(]*)?(?:\(\s*([^)]*)\)|(\w+))/m;
var FN_ARG = /\/\*([^*]*)\*\//m;
function parseAnnotations(fn) {
  if (typeof fn !== "function") {
    throw new Error(`Cannot annotate "${fn}". Expected a function!`);
  }
  const match2 = fn.toString().match(isClass(fn) ? CONSTRUCTOR_ARGS : FN_ARGS);
  if (!match2) {
    return [];
  }
  const args = match2[1] || match2[2];
  return args && args.split(",").map((arg) => {
    const argMatch = arg.match(FN_ARG);
    return (argMatch && argMatch[1] || arg).trim();
  }) || [];
}
function Injector(modules, parent) {
  parent = parent || {
    get: function(name2, strict) {
      currentlyResolving.push(name2);
      if (strict === false) {
        return null;
      } else {
        throw error3(`No provider for "${name2}"!`);
      }
    }
  };
  const currentlyResolving = [];
  const providers = this._providers = Object.create(parent._providers || null);
  const instances = this._instances = /* @__PURE__ */ Object.create(null);
  const self2 = instances.injector = this;
  const error3 = function(msg) {
    const stack = currentlyResolving.join(" -> ");
    currentlyResolving.length = 0;
    return new Error(stack ? `${msg} (Resolving: ${stack})` : msg);
  };
  function get3(name2, strict) {
    if (!providers[name2] && name2.indexOf(".") !== -1) {
      const parts = name2.split(".");
      let pivot = get3(parts.shift());
      while (parts.length) {
        pivot = pivot[parts.shift()];
      }
      return pivot;
    }
    if (hasOwnProp(instances, name2)) {
      return instances[name2];
    }
    if (hasOwnProp(providers, name2)) {
      if (currentlyResolving.indexOf(name2) !== -1) {
        currentlyResolving.push(name2);
        throw error3("Cannot resolve circular dependency!");
      }
      currentlyResolving.push(name2);
      instances[name2] = providers[name2][0](providers[name2][1]);
      currentlyResolving.pop();
      return instances[name2];
    }
    return parent.get(name2, strict);
  }
  function fnDef(fn, locals) {
    if (typeof locals === "undefined") {
      locals = {};
    }
    if (typeof fn !== "function") {
      if (isArray3(fn)) {
        fn = annotate(fn.slice());
      } else {
        throw error3(`Cannot invoke "${fn}". Expected a function!`);
      }
    }
    const inject2 = fn.$inject || parseAnnotations(fn);
    const dependencies = inject2.map((dep) => {
      if (hasOwnProp(locals, dep)) {
        return locals[dep];
      } else {
        return get3(dep);
      }
    });
    return {
      fn,
      dependencies
    };
  }
  function instantiate(Type) {
    const {
      fn,
      dependencies
    } = fnDef(Type);
    const Constructor = Function.prototype.bind.apply(fn, [null].concat(dependencies));
    return new Constructor();
  }
  function invoke(func, context, locals) {
    const {
      fn,
      dependencies
    } = fnDef(func, locals);
    return fn.apply(context, dependencies);
  }
  function createPrivateInjectorFactory(childInjector) {
    return annotate((key) => childInjector.get(key));
  }
  function createChild(modules2, forceNewInstances) {
    if (forceNewInstances && forceNewInstances.length) {
      const fromParentModule = /* @__PURE__ */ Object.create(null);
      const matchedScopes = /* @__PURE__ */ Object.create(null);
      const privateInjectorsCache = [];
      const privateChildInjectors = [];
      const privateChildFactories = [];
      let provider;
      let cacheIdx;
      let privateChildInjector;
      let privateChildInjectorFactory;
      for (let name2 in providers) {
        provider = providers[name2];
        if (forceNewInstances.indexOf(name2) !== -1) {
          if (provider[2] === "private") {
            cacheIdx = privateInjectorsCache.indexOf(provider[3]);
            if (cacheIdx === -1) {
              privateChildInjector = provider[3].createChild([], forceNewInstances);
              privateChildInjectorFactory = createPrivateInjectorFactory(privateChildInjector);
              privateInjectorsCache.push(provider[3]);
              privateChildInjectors.push(privateChildInjector);
              privateChildFactories.push(privateChildInjectorFactory);
              fromParentModule[name2] = [privateChildInjectorFactory, name2, "private", privateChildInjector];
            } else {
              fromParentModule[name2] = [privateChildFactories[cacheIdx], name2, "private", privateChildInjectors[cacheIdx]];
            }
          } else {
            fromParentModule[name2] = [provider[2], provider[1]];
          }
          matchedScopes[name2] = true;
        }
        if ((provider[2] === "factory" || provider[2] === "type") && provider[1].$scope) {
          forceNewInstances.forEach((scope) => {
            if (provider[1].$scope.indexOf(scope) !== -1) {
              fromParentModule[name2] = [provider[2], provider[1]];
              matchedScopes[scope] = true;
            }
          });
        }
      }
      forceNewInstances.forEach((scope) => {
        if (!matchedScopes[scope]) {
          throw new Error('No provider for "' + scope + '". Cannot use provider from the parent!');
        }
      });
      modules2.unshift(fromParentModule);
    }
    return new Injector(modules2, self2);
  }
  const factoryMap = {
    factory: invoke,
    type: instantiate,
    value: function(value) {
      return value;
    }
  };
  function createInitializer(moduleDefinition, injector) {
    const initializers = moduleDefinition.__init__ || [];
    return function() {
      initializers.forEach((initializer) => {
        if (typeof initializer === "string") {
          injector.get(initializer);
        } else {
          injector.invoke(initializer);
        }
      });
    };
  }
  function loadModule(moduleDefinition) {
    const moduleExports = moduleDefinition.__exports__;
    if (moduleExports) {
      const nestedModules = moduleDefinition.__modules__;
      const clonedModule = Object.keys(moduleDefinition).reduce((clonedModule2, key) => {
        if (key !== "__exports__" && key !== "__modules__" && key !== "__init__" && key !== "__depends__") {
          clonedModule2[key] = moduleDefinition[key];
        }
        return clonedModule2;
      }, /* @__PURE__ */ Object.create(null));
      const childModules = (nestedModules || []).concat(clonedModule);
      const privateInjector = createChild(childModules);
      const getFromPrivateInjector = annotate(function(key) {
        return privateInjector.get(key);
      });
      moduleExports.forEach(function(key) {
        providers[key] = [getFromPrivateInjector, key, "private", privateInjector];
      });
      const initializers = (moduleDefinition.__init__ || []).slice();
      initializers.unshift(function() {
        privateInjector.init();
      });
      moduleDefinition = Object.assign({}, moduleDefinition, {
        __init__: initializers
      });
      return createInitializer(moduleDefinition, privateInjector);
    }
    Object.keys(moduleDefinition).forEach(function(key) {
      if (key === "__init__" || key === "__depends__") {
        return;
      }
      if (moduleDefinition[key][2] === "private") {
        providers[key] = moduleDefinition[key];
        return;
      }
      const type = moduleDefinition[key][0];
      const value = moduleDefinition[key][1];
      providers[key] = [factoryMap[type], arrayUnwrap(type, value), type];
    });
    return createInitializer(moduleDefinition, self2);
  }
  function resolveDependencies(moduleDefinitions, moduleDefinition) {
    if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
      return moduleDefinitions;
    }
    moduleDefinitions = (moduleDefinition.__depends__ || []).reduce(resolveDependencies, moduleDefinitions);
    if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
      return moduleDefinitions;
    }
    return moduleDefinitions.concat(moduleDefinition);
  }
  function bootstrap2(moduleDefinitions) {
    const initializers = moduleDefinitions.reduce(resolveDependencies, []).map(loadModule);
    let initialized = false;
    return function() {
      if (initialized) {
        return;
      }
      initialized = true;
      initializers.forEach((initializer) => initializer());
    };
  }
  this.get = get3;
  this.invoke = invoke;
  this.instantiate = instantiate;
  this.createChild = createChild;
  this.init = bootstrap2(modules);
}
function arrayUnwrap(type, value) {
  if (type !== "value" && isArray3(value)) {
    value = annotate(value.slice());
  }
  return value;
}

// node_modules/diagram-js/lib/draw/BaseRenderer.js
var DEFAULT_RENDER_PRIORITY = 1e3;
function BaseRenderer(eventBus, renderPriority) {
  var self2 = this;
  renderPriority = renderPriority || DEFAULT_RENDER_PRIORITY;
  eventBus.on(["render.shape", "render.connection"], renderPriority, function(evt, context) {
    var type = evt.type, element = context.element, visuals = context.gfx, attrs = context.attrs;
    if (self2.canRender(element)) {
      if (type === "render.shape") {
        return self2.drawShape(visuals, element, attrs);
      } else {
        return self2.drawConnection(visuals, element, attrs);
      }
    }
  });
  eventBus.on(["render.getShapePath", "render.getConnectionPath"], renderPriority, function(evt, element) {
    if (self2.canRender(element)) {
      if (evt.type === "render.getShapePath") {
        return self2.getShapePath(element);
      } else {
        return self2.getConnectionPath(element);
      }
    }
  });
}
BaseRenderer.prototype.canRender = function() {
};
BaseRenderer.prototype.drawShape = function() {
};
BaseRenderer.prototype.drawConnection = function() {
};
BaseRenderer.prototype.getShapePath = function() {
};
BaseRenderer.prototype.getConnectionPath = function() {
};

// node_modules/tiny-svg/dist/index.esm.js
function ensureImported(element, target) {
  if (element.ownerDocument !== target.ownerDocument) {
    try {
      return target.ownerDocument.importNode(element, true);
    } catch (e2) {
    }
  }
  return element;
}
function appendTo(element, target) {
  return target.appendChild(ensureImported(element, target));
}
function append(target, node2) {
  appendTo(node2, target);
  return target;
}
var LENGTH_ATTR = 2;
var CSS_PROPERTIES = {
  "alignment-baseline": 1,
  "baseline-shift": 1,
  "clip": 1,
  "clip-path": 1,
  "clip-rule": 1,
  "color": 1,
  "color-interpolation": 1,
  "color-interpolation-filters": 1,
  "color-profile": 1,
  "color-rendering": 1,
  "cursor": 1,
  "direction": 1,
  "display": 1,
  "dominant-baseline": 1,
  "enable-background": 1,
  "fill": 1,
  "fill-opacity": 1,
  "fill-rule": 1,
  "filter": 1,
  "flood-color": 1,
  "flood-opacity": 1,
  "font": 1,
  "font-family": 1,
  "font-size": LENGTH_ATTR,
  "font-size-adjust": 1,
  "font-stretch": 1,
  "font-style": 1,
  "font-variant": 1,
  "font-weight": 1,
  "glyph-orientation-horizontal": 1,
  "glyph-orientation-vertical": 1,
  "image-rendering": 1,
  "kerning": 1,
  "letter-spacing": 1,
  "lighting-color": 1,
  "marker": 1,
  "marker-end": 1,
  "marker-mid": 1,
  "marker-start": 1,
  "mask": 1,
  "opacity": 1,
  "overflow": 1,
  "pointer-events": 1,
  "shape-rendering": 1,
  "stop-color": 1,
  "stop-opacity": 1,
  "stroke": 1,
  "stroke-dasharray": 1,
  "stroke-dashoffset": 1,
  "stroke-linecap": 1,
  "stroke-linejoin": 1,
  "stroke-miterlimit": 1,
  "stroke-opacity": 1,
  "stroke-width": LENGTH_ATTR,
  "text-anchor": 1,
  "text-decoration": 1,
  "text-rendering": 1,
  "unicode-bidi": 1,
  "visibility": 1,
  "word-spacing": 1,
  "writing-mode": 1
};
function getAttribute(node2, name2) {
  if (CSS_PROPERTIES[name2]) {
    return node2.style[name2];
  } else {
    return node2.getAttributeNS(null, name2);
  }
}
function setAttribute(node2, name2, value) {
  var hyphenated = name2.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  var type = CSS_PROPERTIES[hyphenated];
  if (type) {
    if (type === LENGTH_ATTR && typeof value === "number") {
      value = String(value) + "px";
    }
    node2.style[hyphenated] = value;
  } else {
    node2.setAttributeNS(null, name2, value);
  }
}
function setAttributes(node2, attrs) {
  var names = Object.keys(attrs), i, name2;
  for (i = 0, name2; name2 = names[i]; i++) {
    setAttribute(node2, name2, attrs[name2]);
  }
}
function attr2(node2, name2, value) {
  if (typeof name2 === "string") {
    if (value !== void 0) {
      setAttribute(node2, name2, value);
    } else {
      return getAttribute(node2, name2);
    }
  } else {
    setAttributes(node2, name2);
  }
  return node2;
}
var toString2 = Object.prototype.toString;
function classes2(el) {
  return new ClassList2(el);
}
function ClassList2(el) {
  if (!el || !el.nodeType) {
    throw new Error("A DOM element reference is required");
  }
  this.el = el;
  this.list = el.classList;
}
ClassList2.prototype.add = function(name2) {
  this.list.add(name2);
  return this;
};
ClassList2.prototype.remove = function(name2) {
  if (toString2.call(name2) == "[object RegExp]") {
    return this.removeMatching(name2);
  }
  this.list.remove(name2);
  return this;
};
ClassList2.prototype.removeMatching = function(re3) {
  const arr = this.array();
  for (let i = 0; i < arr.length; i++) {
    if (re3.test(arr[i])) {
      this.remove(arr[i]);
    }
  }
  return this;
};
ClassList2.prototype.toggle = function(name2, force) {
  if (typeof force !== "undefined") {
    if (force !== this.list.toggle(name2, force)) {
      this.list.toggle(name2);
    }
  } else {
    this.list.toggle(name2);
  }
  return this;
};
ClassList2.prototype.array = function() {
  return Array.from(this.list);
};
ClassList2.prototype.has = ClassList2.prototype.contains = function(name2) {
  return this.list.contains(name2);
};
function remove2(element) {
  var parent = element.parentNode;
  if (parent) {
    parent.removeChild(element);
  }
  return element;
}
function clear(element) {
  var child;
  while (child = element.firstChild) {
    remove2(child);
  }
  return element;
}
var ns = {
  svg: "http://www.w3.org/2000/svg"
};
var SVG_START = '<svg xmlns="' + ns.svg + '"';
function parse2(svg) {
  var unwrap = false;
  if (svg.substring(0, 4) === "<svg") {
    if (svg.indexOf(ns.svg) === -1) {
      svg = SVG_START + svg.substring(4);
    }
  } else {
    svg = SVG_START + ">" + svg + "</svg>";
    unwrap = true;
  }
  var parsed = parseDocument(svg);
  if (!unwrap) {
    return parsed;
  }
  var fragment = document.createDocumentFragment();
  var parent = parsed.firstChild;
  while (parent.firstChild) {
    fragment.appendChild(parent.firstChild);
  }
  return fragment;
}
function parseDocument(svg) {
  var parser;
  parser = new DOMParser();
  parser.async = false;
  return parser.parseFromString(svg, "text/xml");
}
function create(name2, attrs) {
  var element;
  if (name2.charAt(0) === "<") {
    element = parse2(name2).firstChild;
    element = document.importNode(element, true);
  } else {
    element = document.createElementNS(ns.svg, name2);
  }
  if (attrs) {
    attr2(element, attrs);
  }
  return element;
}
var node = null;
function getNode() {
  if (node === null) {
    node = create("svg");
  }
  return node;
}
function extend(object, props) {
  var i, k, keys = Object.keys(props);
  for (i = 0; k = keys[i]; i++) {
    object[k] = props[k];
  }
  return object;
}
function createMatrix(a, b, c, d, e2, f) {
  var matrix = getNode().createSVGMatrix();
  switch (arguments.length) {
    case 0:
      return matrix;
    case 1:
      return extend(matrix, a);
    case 6:
      return extend(matrix, {
        a,
        b,
        c,
        d,
        e: e2,
        f
      });
  }
}
function createTransform(matrix) {
  if (matrix) {
    return getNode().createSVGTransformFromMatrix(matrix);
  } else {
    return getNode().createSVGTransform();
  }
}
function wrapMatrix(transformList, transform2) {
  if (transform2 instanceof SVGMatrix) {
    return transformList.createSVGTransformFromMatrix(transform2);
  }
  return transform2;
}
function setTransforms(transformList, transforms) {
  var i, t;
  transformList.clear();
  for (i = 0; t = transforms[i]; i++) {
    transformList.appendItem(wrapMatrix(transformList, t));
  }
}
function transform(node2, transforms) {
  var transformList = node2.transform.baseVal;
  if (transforms) {
    if (!Array.isArray(transforms)) {
      transforms = [transforms];
    }
    setTransforms(transformList, transforms);
  }
  return transformList.consolidate();
}

// node_modules/diagram-js/lib/util/RenderUtil.js
function componentsToPath(elements) {
  return elements.join(",").replace(/,?([A-z]),?/g, "$1");
}
function toSVGPoints(points) {
  var result = "";
  for (var i = 0, p; p = points[i]; i++) {
    result += p.x + "," + p.y + " ";
  }
  return result;
}
function createLine(points, attrs) {
  var line = create("polyline");
  attr2(line, { points: toSVGPoints(points) });
  if (attrs) {
    attr2(line, attrs);
  }
  return line;
}
function updateLine(gfx, points) {
  attr2(gfx, { points: toSVGPoints(points) });
  return gfx;
}

// node_modules/diagram-js/lib/util/Elements.js
function getBBox(elements, stopRecursion) {
  stopRecursion = !!stopRecursion;
  if (!isArray(elements)) {
    elements = [elements];
  }
  var minX, minY, maxX, maxY;
  forEach(elements, function(element) {
    var bbox = element;
    if (element.waypoints && !stopRecursion) {
      bbox = getBBox(element.waypoints, true);
    }
    var x = bbox.x, y = bbox.y, height = bbox.height || 0, width = bbox.width || 0;
    if (x < minX || minX === void 0) {
      minX = x;
    }
    if (y < minY || minY === void 0) {
      minY = y;
    }
    if (x + width > maxX || maxX === void 0) {
      maxX = x + width;
    }
    if (y + height > maxY || maxY === void 0) {
      maxY = y + height;
    }
  });
  return {
    x: minX,
    y: minY,
    height: maxY - minY,
    width: maxX - minX
  };
}
function getType(element) {
  if ("waypoints" in element) {
    return "connection";
  }
  if ("x" in element) {
    return "shape";
  }
  return "root";
}
function isFrameElement(element) {
  return !!(element && element.isFrame);
}

// node_modules/diagram-js/lib/draw/DefaultRenderer.js
var DEFAULT_RENDER_PRIORITY2 = 1;
function DefaultRenderer(eventBus, styles) {
  BaseRenderer.call(this, eventBus, DEFAULT_RENDER_PRIORITY2);
  this.CONNECTION_STYLE = styles.style(["no-fill"], { strokeWidth: 5, stroke: "fuchsia" });
  this.SHAPE_STYLE = styles.style({ fill: "white", stroke: "fuchsia", strokeWidth: 2 });
  this.FRAME_STYLE = styles.style(["no-fill"], { stroke: "fuchsia", strokeDasharray: 4, strokeWidth: 2 });
}
e(DefaultRenderer, BaseRenderer);
DefaultRenderer.prototype.canRender = function() {
  return true;
};
DefaultRenderer.prototype.drawShape = function drawShape(visuals, element, attrs) {
  var rect = create("rect");
  attr2(rect, {
    x: 0,
    y: 0,
    width: element.width || 0,
    height: element.height || 0
  });
  if (isFrameElement(element)) {
    attr2(rect, assign({}, this.FRAME_STYLE, attrs || {}));
  } else {
    attr2(rect, assign({}, this.SHAPE_STYLE, attrs || {}));
  }
  append(visuals, rect);
  return rect;
};
DefaultRenderer.prototype.drawConnection = function drawConnection(visuals, connection, attrs) {
  var line = createLine(connection.waypoints, assign({}, this.CONNECTION_STYLE, attrs || {}));
  append(visuals, line);
  return line;
};
DefaultRenderer.prototype.getShapePath = function getShapePath(shape) {
  var x = shape.x, y = shape.y, width = shape.width, height = shape.height;
  var shapePath = [
    ["M", x, y],
    ["l", width, 0],
    ["l", 0, height],
    ["l", -width, 0],
    ["z"]
  ];
  return componentsToPath(shapePath);
};
DefaultRenderer.prototype.getConnectionPath = function getConnectionPath(connection) {
  var waypoints = connection.waypoints;
  var idx, point, connectionPath = [];
  for (idx = 0; point = waypoints[idx]; idx++) {
    point = point.original || point;
    connectionPath.push([idx === 0 ? "M" : "L", point.x, point.y]);
  }
  return componentsToPath(connectionPath);
};
DefaultRenderer.$inject = ["eventBus", "styles"];

// node_modules/diagram-js/lib/draw/Styles.js
function Styles() {
  var defaultTraits = {
    "no-fill": {
      fill: "none"
    },
    "no-border": {
      strokeOpacity: 0
    },
    "no-events": {
      pointerEvents: "none"
    }
  };
  var self2 = this;
  this.cls = function(className, traits, additionalAttrs) {
    var attrs = this.style(traits, additionalAttrs);
    return assign(attrs, { "class": className });
  };
  this.style = function(traits, additionalAttrs) {
    if (!isArray(traits) && !additionalAttrs) {
      additionalAttrs = traits;
      traits = [];
    }
    var attrs = reduce(traits, function(attrs2, t) {
      return assign(attrs2, defaultTraits[t] || {});
    }, {});
    return additionalAttrs ? assign(attrs, additionalAttrs) : attrs;
  };
  this.computeStyle = function(custom, traits, defaultStyles) {
    if (!isArray(traits)) {
      defaultStyles = traits;
      traits = [];
    }
    return self2.style(traits || [], assign({}, defaultStyles, custom || {}));
  };
}

// node_modules/diagram-js/lib/draw/index.js
var draw_default = {
  __init__: ["defaultRenderer"],
  defaultRenderer: ["type", DefaultRenderer],
  styles: ["type", Styles]
};

// node_modules/diagram-js/node_modules/min-dom/dist/index.esm.js
function _mergeNamespaces(n, m) {
  m.forEach(function(e2) {
    e2 && typeof e2 !== "string" && !Array.isArray(e2) && Object.keys(e2).forEach(function(k) {
      if (k !== "default" && !(k in n)) {
        var d = Object.getOwnPropertyDescriptor(e2, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function() {
            return e2[k];
          }
        });
      }
    });
  });
  return Object.freeze(n);
}
var nativeToString3 = Object.prototype.toString;
var nativeHasOwnProperty3 = Object.prototype.hasOwnProperty;
function isUndefined4(obj) {
  return obj === void 0;
}
function isArray4(obj) {
  return nativeToString3.call(obj) === "[object Array]";
}
function has3(target, key) {
  return nativeHasOwnProperty3.call(target, key);
}
function forEach3(collection, iterator) {
  let val, result;
  if (isUndefined4(collection)) {
    return;
  }
  const convertKey = isArray4(collection) ? toNum3 : identity3;
  for (let key in collection) {
    if (has3(collection, key)) {
      val = collection[key];
      result = iterator(val, convertKey(key));
      if (result === false) {
        return val;
      }
    }
  }
}
function identity3(arg) {
  return arg;
}
function toNum3(arg) {
  return Number(arg);
}
function assign3(element, ...styleSources) {
  const target = element.style;
  forEach3(styleSources, function(style) {
    if (!style) {
      return;
    }
    forEach3(style, function(value, key) {
      target[key] = value;
    });
  });
  return element;
}
function attr3(el, name2, val) {
  if (arguments.length == 2) {
    return el.getAttribute(name2);
  }
  if (val === null) {
    return el.removeAttribute(name2);
  }
  el.setAttribute(name2, val);
  return el;
}
var toString3 = Object.prototype.toString;
function classes3(el) {
  return new ClassList3(el);
}
function ClassList3(el) {
  if (!el || !el.nodeType) {
    throw new Error("A DOM element reference is required");
  }
  this.el = el;
  this.list = el.classList;
}
ClassList3.prototype.add = function(name2) {
  this.list.add(name2);
  return this;
};
ClassList3.prototype.remove = function(name2) {
  if (toString3.call(name2) == "[object RegExp]") {
    return this.removeMatching(name2);
  }
  this.list.remove(name2);
  return this;
};
ClassList3.prototype.removeMatching = function(re3) {
  const arr = this.array();
  for (let i = 0; i < arr.length; i++) {
    if (re3.test(arr[i])) {
      this.remove(arr[i]);
    }
  }
  return this;
};
ClassList3.prototype.toggle = function(name2, force) {
  if (typeof force !== "undefined") {
    if (force !== this.list.toggle(name2, force)) {
      this.list.toggle(name2);
    }
  } else {
    this.list.toggle(name2);
  }
  return this;
};
ClassList3.prototype.array = function() {
  return Array.from(this.list);
};
ClassList3.prototype.has = ClassList3.prototype.contains = function(name2) {
  return this.list.contains(name2);
};
function clear2(el) {
  var c;
  while (el.childNodes.length) {
    c = el.childNodes[0];
    el.removeChild(c);
  }
  return el;
}
function matches(element, selector) {
  return element && typeof element.matches === "function" && element.matches(selector);
}
function closest2(element, selector, checkYourSelf) {
  var currentElem = checkYourSelf ? element : element.parentNode;
  while (currentElem && currentElem.nodeType !== document.DOCUMENT_NODE && currentElem.nodeType !== document.DOCUMENT_FRAGMENT_NODE) {
    if (matches(currentElem, selector)) {
      return currentElem;
    }
    currentElem = currentElem.parentNode;
  }
  return matches(currentElem, selector) ? currentElem : null;
}
var componentEvent2 = {};
var bind$12 = window.addEventListener ? "addEventListener" : "attachEvent";
var unbind$12 = window.removeEventListener ? "removeEventListener" : "detachEvent";
var prefix3 = bind$12 !== "addEventListener" ? "on" : "";
var bind_12 = componentEvent2.bind = function(el, type, fn, capture) {
  el[bind$12](prefix3 + type, fn, capture || false);
  return fn;
};
var unbind_12 = componentEvent2.unbind = function(el, type, fn, capture) {
  el[unbind$12](prefix3 + type, fn, capture || false);
  return fn;
};
var event = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  bind: bind_12,
  unbind: unbind_12,
  "default": componentEvent2
}, [componentEvent2]);
var forceCaptureEvents2 = ["focus", "blur"];
function bind3(el, selector, type, fn, capture) {
  if (forceCaptureEvents2.indexOf(type) !== -1) {
    capture = true;
  }
  return event.bind(el, type, function(e2) {
    var target = e2.target || e2.srcElement;
    e2.delegateTarget = closest2(target, selector, true);
    if (e2.delegateTarget) {
      fn.call(el, e2);
    }
  }, capture);
}
function unbind2(el, type, fn, capture) {
  if (forceCaptureEvents2.indexOf(type) !== -1) {
    capture = true;
  }
  return event.unbind(el, type, fn, capture);
}
var delegate2 = {
  bind: bind3,
  unbind: unbind2
};
var domify2 = parse3;
var innerHTMLBug2 = false;
var bugTestDiv2;
if (typeof document !== "undefined") {
  bugTestDiv2 = document.createElement("div");
  bugTestDiv2.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
  innerHTMLBug2 = !bugTestDiv2.getElementsByTagName("link").length;
  bugTestDiv2 = void 0;
}
var map2 = {
  legend: [1, "<fieldset>", "</fieldset>"],
  tr: [2, "<table><tbody>", "</tbody></table>"],
  col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
  _default: innerHTMLBug2 ? [1, "X<div>", "</div>"] : [0, "", ""]
};
map2.td = map2.th = [3, "<table><tbody><tr>", "</tr></tbody></table>"];
map2.option = map2.optgroup = [1, '<select multiple="multiple">', "</select>"];
map2.thead = map2.tbody = map2.colgroup = map2.caption = map2.tfoot = [1, "<table>", "</table>"];
map2.polyline = map2.ellipse = map2.polygon = map2.circle = map2.text = map2.line = map2.path = map2.rect = map2.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">', "</svg>"];
function parse3(html, doc) {
  if (typeof html != "string")
    throw new TypeError("String expected");
  if (!doc)
    doc = document;
  var m = /<([\w:]+)/.exec(html);
  if (!m)
    return doc.createTextNode(html);
  html = html.replace(/^\s+|\s+$/g, "");
  var tag = m[1];
  if (tag == "body") {
    var el = doc.createElement("html");
    el.innerHTML = html;
    return el.removeChild(el.lastChild);
  }
  var wrap = Object.prototype.hasOwnProperty.call(map2, tag) ? map2[tag] : map2._default;
  var depth = wrap[0];
  var prefix4 = wrap[1];
  var suffix = wrap[2];
  var el = doc.createElement("div");
  el.innerHTML = prefix4 + html + suffix;
  while (depth--)
    el = el.lastChild;
  if (el.firstChild == el.lastChild) {
    return el.removeChild(el.firstChild);
  }
  var fragment = doc.createDocumentFragment();
  while (el.firstChild) {
    fragment.appendChild(el.removeChild(el.firstChild));
  }
  return fragment;
}
var domify$1 = domify2;
function query2(selector, el) {
  el = el || document;
  return el.querySelector(selector);
}
function all(selector, el) {
  el = el || document;
  return el.querySelectorAll(selector);
}
function remove3(el) {
  el.parentNode && el.parentNode.removeChild(el);
}

// node_modules/diagram-js/lib/util/Collections.js
function remove4(collection, element) {
  if (!collection || !element) {
    return -1;
  }
  var idx = collection.indexOf(element);
  if (idx !== -1) {
    collection.splice(idx, 1);
  }
  return idx;
}
function add(collection, element, idx) {
  if (!collection || !element) {
    return;
  }
  if (typeof idx !== "number") {
    idx = -1;
  }
  var currentIdx = collection.indexOf(element);
  if (currentIdx !== -1) {
    if (currentIdx === idx) {
      return;
    } else {
      if (idx !== -1) {
        collection.splice(currentIdx, 1);
      } else {
        return;
      }
    }
  }
  if (idx !== -1) {
    collection.splice(idx, 0, element);
  } else {
    collection.push(element);
  }
}

// node_modules/diagram-js/lib/layout/LayoutUtil.js
var import_path_intersection = __toESM(require_intersect());
function asTRBL(bounds) {
  return {
    top: bounds.y,
    right: bounds.x + (bounds.width || 0),
    bottom: bounds.y + (bounds.height || 0),
    left: bounds.x
  };
}

// node_modules/diagram-js/lib/core/Canvas.js
function round(number, resolution) {
  return Math.round(number * resolution) / resolution;
}
function ensurePx(number) {
  return isNumber(number) ? number + "px" : number;
}
function findRoot(element) {
  while (element.parent) {
    element = element.parent;
  }
  return element;
}
function createContainer(options2) {
  options2 = assign({}, { width: "100%", height: "100%" }, options2);
  const container = options2.container || document.body;
  const parent = document.createElement("div");
  parent.setAttribute("class", "djs-container djs-parent");
  assign3(parent, {
    position: "relative",
    overflow: "hidden",
    width: ensurePx(options2.width),
    height: ensurePx(options2.height)
  });
  container.appendChild(parent);
  return parent;
}
function createGroup(parent, cls, childIndex) {
  const group = create("g");
  classes2(group).add(cls);
  const index2 = childIndex !== void 0 ? childIndex : parent.childNodes.length - 1;
  parent.insertBefore(group, parent.childNodes[index2] || null);
  return group;
}
var BASE_LAYER = "base";
var PLANE_LAYER_INDEX = 0;
var UTILITY_LAYER_INDEX = 1;
var REQUIRED_MODEL_ATTRS = {
  shape: ["x", "y", "width", "height"],
  connection: ["waypoints"]
};
function Canvas(config, eventBus, graphicsFactory, elementRegistry) {
  this._eventBus = eventBus;
  this._elementRegistry = elementRegistry;
  this._graphicsFactory = graphicsFactory;
  this._rootsIdx = 0;
  this._layers = {};
  this._planes = [];
  this._rootElement = null;
  this._init(config || {});
}
Canvas.$inject = [
  "config.canvas",
  "eventBus",
  "graphicsFactory",
  "elementRegistry"
];
Canvas.prototype._init = function(config) {
  const eventBus = this._eventBus;
  const container = this._container = createContainer(config);
  const svg = this._svg = create("svg");
  attr2(svg, { width: "100%", height: "100%" });
  append(container, svg);
  const viewport = this._viewport = createGroup(svg, "viewport");
  if (config.deferUpdate !== false) {
    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);
  }
  eventBus.on("diagram.init", function() {
    eventBus.fire("canvas.init", {
      svg,
      viewport
    });
  }, this);
  eventBus.on([
    "shape.added",
    "connection.added",
    "shape.removed",
    "connection.removed",
    "elements.changed",
    "root.set"
  ], function() {
    delete this._cachedViewbox;
  }, this);
  eventBus.on("diagram.destroy", 500, this._destroy, this);
  eventBus.on("diagram.clear", 500, this._clear, this);
};
Canvas.prototype._destroy = function(emit) {
  this._eventBus.fire("canvas.destroy", {
    svg: this._svg,
    viewport: this._viewport
  });
  const parent = this._container.parentNode;
  if (parent) {
    parent.removeChild(this._container);
  }
  delete this._svg;
  delete this._container;
  delete this._layers;
  delete this._planes;
  delete this._rootElement;
  delete this._viewport;
};
Canvas.prototype._clear = function() {
  const allElements = this._elementRegistry.getAll();
  allElements.forEach((element) => {
    const type = getType(element);
    if (type === "root") {
      this.removeRootElement(element);
    } else {
      this._removeElement(element, type);
    }
  });
  this._planes = [];
  this._rootElement = null;
  delete this._cachedViewbox;
};
Canvas.prototype.getDefaultLayer = function() {
  return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);
};
Canvas.prototype.getLayer = function(name2, index2) {
  if (!name2) {
    throw new Error("must specify a name");
  }
  let layer = this._layers[name2];
  if (!layer) {
    layer = this._layers[name2] = this._createLayer(name2, index2);
  }
  if (typeof index2 !== "undefined" && layer.index !== index2) {
    throw new Error("layer <" + name2 + "> already created at index <" + index2 + ">");
  }
  return layer.group;
};
Canvas.prototype._getChildIndex = function(index2) {
  return reduce(this._layers, function(childIndex, layer) {
    if (layer.visible && index2 >= layer.index) {
      childIndex++;
    }
    return childIndex;
  }, 0);
};
Canvas.prototype._createLayer = function(name2, index2) {
  if (typeof index2 === "undefined") {
    index2 = UTILITY_LAYER_INDEX;
  }
  const childIndex = this._getChildIndex(index2);
  return {
    group: createGroup(this._viewport, "layer-" + name2, childIndex),
    index: index2,
    visible: true
  };
};
Canvas.prototype.showLayer = function(name2) {
  if (!name2) {
    throw new Error("must specify a name");
  }
  const layer = this._layers[name2];
  if (!layer) {
    throw new Error("layer <" + name2 + "> does not exist");
  }
  const viewport = this._viewport;
  const group = layer.group;
  const index2 = layer.index;
  if (layer.visible) {
    return group;
  }
  const childIndex = this._getChildIndex(index2);
  viewport.insertBefore(group, viewport.childNodes[childIndex] || null);
  layer.visible = true;
  return group;
};
Canvas.prototype.hideLayer = function(name2) {
  if (!name2) {
    throw new Error("must specify a name");
  }
  const layer = this._layers[name2];
  if (!layer) {
    throw new Error("layer <" + name2 + "> does not exist");
  }
  const group = layer.group;
  if (!layer.visible) {
    return group;
  }
  remove2(group);
  layer.visible = false;
  return group;
};
Canvas.prototype._removeLayer = function(name2) {
  const layer = this._layers[name2];
  if (layer) {
    delete this._layers[name2];
    remove2(layer.group);
  }
};
Canvas.prototype.getActiveLayer = function() {
  const plane = this._findPlaneForRoot(this.getRootElement());
  if (!plane) {
    return null;
  }
  return plane.layer;
};
Canvas.prototype.findRoot = function(element) {
  if (typeof element === "string") {
    element = this._elementRegistry.get(element);
  }
  if (!element) {
    return;
  }
  const plane = this._findPlaneForRoot(findRoot(element)) || {};
  return plane.rootElement;
};
Canvas.prototype.getRootElements = function() {
  return this._planes.map(function(plane) {
    return plane.rootElement;
  });
};
Canvas.prototype._findPlaneForRoot = function(rootElement) {
  return find(this._planes, function(plane) {
    return plane.rootElement === rootElement;
  });
};
Canvas.prototype.getContainer = function() {
  return this._container;
};
Canvas.prototype._updateMarker = function(element, marker, add3) {
  let container;
  if (!element.id) {
    element = this._elementRegistry.get(element);
  }
  container = this._elementRegistry._elements[element.id];
  if (!container) {
    return;
  }
  forEach([container.gfx, container.secondaryGfx], function(gfx) {
    if (gfx) {
      if (add3) {
        classes2(gfx).add(marker);
      } else {
        classes2(gfx).remove(marker);
      }
    }
  });
  this._eventBus.fire("element.marker.update", { element, gfx: container.gfx, marker, add: !!add3 });
};
Canvas.prototype.addMarker = function(element, marker) {
  this._updateMarker(element, marker, true);
};
Canvas.prototype.removeMarker = function(element, marker) {
  this._updateMarker(element, marker, false);
};
Canvas.prototype.hasMarker = function(element, marker) {
  if (!element.id) {
    element = this._elementRegistry.get(element);
  }
  const gfx = this.getGraphics(element);
  return classes2(gfx).has(marker);
};
Canvas.prototype.toggleMarker = function(element, marker) {
  if (this.hasMarker(element, marker)) {
    this.removeMarker(element, marker);
  } else {
    this.addMarker(element, marker);
  }
};
Canvas.prototype.getRootElement = function() {
  const rootElement = this._rootElement;
  if (rootElement || this._planes.length) {
    return rootElement;
  }
  return this.setRootElement(this.addRootElement(null));
};
Canvas.prototype.addRootElement = function(rootElement) {
  const idx = this._rootsIdx++;
  if (!rootElement) {
    rootElement = {
      id: "__implicitroot_" + idx,
      children: [],
      isImplicit: true
    };
  }
  const layerName = rootElement.layer = "root-" + idx;
  this._ensureValid("root", rootElement);
  const layer = this.getLayer(layerName, PLANE_LAYER_INDEX);
  this.hideLayer(layerName);
  this._addRoot(rootElement, layer);
  this._planes.push({
    rootElement,
    layer
  });
  return rootElement;
};
Canvas.prototype.removeRootElement = function(rootElement) {
  if (typeof rootElement === "string") {
    rootElement = this._elementRegistry.get(rootElement);
  }
  const plane = this._findPlaneForRoot(rootElement);
  if (!plane) {
    return;
  }
  this._removeRoot(rootElement);
  this._removeLayer(rootElement.layer);
  this._planes = this._planes.filter(function(plane2) {
    return plane2.rootElement !== rootElement;
  });
  if (this._rootElement === rootElement) {
    this._rootElement = null;
  }
  return rootElement;
};
Canvas.prototype.setRootElement = function(rootElement, override) {
  if (isDefined(override)) {
    throw new Error("override not supported");
  }
  if (rootElement === this._rootElement) {
    return;
  }
  let plane;
  if (!rootElement) {
    throw new Error("rootElement required");
  }
  plane = this._findPlaneForRoot(rootElement);
  if (!plane) {
    rootElement = this.addRootElement(rootElement);
  }
  this._setRoot(rootElement);
  return rootElement;
};
Canvas.prototype._removeRoot = function(element) {
  const elementRegistry = this._elementRegistry, eventBus = this._eventBus;
  eventBus.fire("root.remove", { element });
  eventBus.fire("root.removed", { element });
  elementRegistry.remove(element);
};
Canvas.prototype._addRoot = function(element, gfx) {
  const elementRegistry = this._elementRegistry, eventBus = this._eventBus;
  eventBus.fire("root.add", { element });
  elementRegistry.add(element, gfx);
  eventBus.fire("root.added", { element, gfx });
};
Canvas.prototype._setRoot = function(rootElement, layer) {
  const currentRoot = this._rootElement;
  if (currentRoot) {
    this._elementRegistry.updateGraphics(currentRoot, null, true);
    this.hideLayer(currentRoot.layer);
  }
  if (rootElement) {
    if (!layer) {
      layer = this._findPlaneForRoot(rootElement).layer;
    }
    this._elementRegistry.updateGraphics(rootElement, this._svg, true);
    this.showLayer(rootElement.layer);
  }
  this._rootElement = rootElement;
  this._eventBus.fire("root.set", { element: rootElement });
};
Canvas.prototype._ensureValid = function(type, element) {
  if (!element.id) {
    throw new Error("element must have an id");
  }
  if (this._elementRegistry.get(element.id)) {
    throw new Error("element <" + element.id + "> already exists");
  }
  const requiredAttrs = REQUIRED_MODEL_ATTRS[type];
  const valid = every(requiredAttrs, function(attr5) {
    return typeof element[attr5] !== "undefined";
  });
  if (!valid) {
    throw new Error("must supply { " + requiredAttrs.join(", ") + " } with " + type);
  }
};
Canvas.prototype._setParent = function(element, parent, parentIndex) {
  add(parent.children, element, parentIndex);
  element.parent = parent;
};
Canvas.prototype._addElement = function(type, element, parent, parentIndex) {
  parent = parent || this.getRootElement();
  const eventBus = this._eventBus, graphicsFactory = this._graphicsFactory;
  this._ensureValid(type, element);
  eventBus.fire(type + ".add", { element, parent });
  this._setParent(element, parent, parentIndex);
  const gfx = graphicsFactory.create(type, element, parentIndex);
  this._elementRegistry.add(element, gfx);
  graphicsFactory.update(type, element, gfx);
  eventBus.fire(type + ".added", { element, gfx });
  return element;
};
Canvas.prototype.addShape = function(shape, parent, parentIndex) {
  return this._addElement("shape", shape, parent, parentIndex);
};
Canvas.prototype.addConnection = function(connection, parent, parentIndex) {
  return this._addElement("connection", connection, parent, parentIndex);
};
Canvas.prototype._removeElement = function(element, type) {
  const elementRegistry = this._elementRegistry, graphicsFactory = this._graphicsFactory, eventBus = this._eventBus;
  element = elementRegistry.get(element.id || element);
  if (!element) {
    return;
  }
  eventBus.fire(type + ".remove", { element });
  graphicsFactory.remove(element);
  remove4(element.parent && element.parent.children, element);
  element.parent = null;
  eventBus.fire(type + ".removed", { element });
  elementRegistry.remove(element);
  return element;
};
Canvas.prototype.removeShape = function(shape) {
  return this._removeElement(shape, "shape");
};
Canvas.prototype.removeConnection = function(connection) {
  return this._removeElement(connection, "connection");
};
Canvas.prototype.getGraphics = function(element, secondary) {
  return this._elementRegistry.getGraphics(element, secondary);
};
Canvas.prototype._changeViewbox = function(changeFn) {
  this._eventBus.fire("canvas.viewbox.changing");
  changeFn.apply(this);
  this._cachedViewbox = null;
  this._viewboxChanged();
};
Canvas.prototype._viewboxChanged = function() {
  this._eventBus.fire("canvas.viewbox.changed", { viewbox: this.viewbox() });
};
Canvas.prototype.viewbox = function(box) {
  if (box === void 0 && this._cachedViewbox) {
    return this._cachedViewbox;
  }
  const viewport = this._viewport, outerBox = this.getSize();
  let innerBox, matrix, activeLayer, transform2, scale, x, y;
  if (!box) {
    activeLayer = this._rootElement ? this.getActiveLayer() : null;
    innerBox = activeLayer && activeLayer.getBBox() || {};
    transform2 = transform(viewport);
    matrix = transform2 ? transform2.matrix : createMatrix();
    scale = round(matrix.a, 1e3);
    x = round(-matrix.e || 0, 1e3);
    y = round(-matrix.f || 0, 1e3);
    box = this._cachedViewbox = {
      x: x ? x / scale : 0,
      y: y ? y / scale : 0,
      width: outerBox.width / scale,
      height: outerBox.height / scale,
      scale,
      inner: {
        width: innerBox.width || 0,
        height: innerBox.height || 0,
        x: innerBox.x || 0,
        y: innerBox.y || 0
      },
      outer: outerBox
    };
    return box;
  } else {
    this._changeViewbox(function() {
      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);
      const matrix2 = this._svg.createSVGMatrix().scale(scale).translate(-box.x, -box.y);
      transform(viewport, matrix2);
    });
  }
  return box;
};
Canvas.prototype.scroll = function(delta2) {
  const node2 = this._viewport;
  let matrix = node2.getCTM();
  if (delta2) {
    this._changeViewbox(function() {
      delta2 = assign({ dx: 0, dy: 0 }, delta2 || {});
      matrix = this._svg.createSVGMatrix().translate(delta2.dx, delta2.dy).multiply(matrix);
      setCTM(node2, matrix);
    });
  }
  return { x: matrix.e, y: matrix.f };
};
Canvas.prototype.scrollToElement = function(element, padding) {
  let defaultPadding = 100;
  if (typeof element === "string") {
    element = this._elementRegistry.get(element);
  }
  const rootElement = this.findRoot(element);
  if (rootElement !== this.getRootElement()) {
    this.setRootElement(rootElement);
  }
  if (!padding) {
    padding = {};
  }
  if (typeof padding === "number") {
    defaultPadding = padding;
  }
  padding = {
    top: padding.top || defaultPadding,
    right: padding.right || defaultPadding,
    bottom: padding.bottom || defaultPadding,
    left: padding.left || defaultPadding
  };
  const elementBounds = getBBox(element), elementTrbl = asTRBL(elementBounds), viewboxBounds = this.viewbox(), zoom2 = this.zoom();
  let dx, dy;
  viewboxBounds.y += padding.top / zoom2;
  viewboxBounds.x += padding.left / zoom2;
  viewboxBounds.width -= (padding.right + padding.left) / zoom2;
  viewboxBounds.height -= (padding.bottom + padding.top) / zoom2;
  const viewboxTrbl = asTRBL(viewboxBounds);
  const canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;
  if (!canFit) {
    dx = elementBounds.x - viewboxBounds.x;
    dy = elementBounds.y - viewboxBounds.y;
  } else {
    const dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right), dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left), dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom), dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);
    dx = dRight || dLeft;
    dy = dBottom || dTop;
  }
  this.scroll({ dx: -dx * zoom2, dy: -dy * zoom2 });
};
Canvas.prototype.zoom = function(newScale, center) {
  if (!newScale) {
    return this.viewbox(newScale).scale;
  }
  if (newScale === "fit-viewport") {
    return this._fitViewport(center);
  }
  let outer, matrix;
  this._changeViewbox(function() {
    if (typeof center !== "object") {
      outer = this.viewbox().outer;
      center = {
        x: outer.width / 2,
        y: outer.height / 2
      };
    }
    matrix = this._setZoom(newScale, center);
  });
  return round(matrix.a, 1e3);
};
function setCTM(node2, m) {
  const mstr = "matrix(" + m.a + "," + m.b + "," + m.c + "," + m.d + "," + m.e + "," + m.f + ")";
  node2.setAttribute("transform", mstr);
}
Canvas.prototype._fitViewport = function(center) {
  const vbox = this.viewbox(), outer = vbox.outer, inner = vbox.inner;
  let newScale, newViewbox;
  if (inner.x >= 0 && inner.y >= 0 && inner.x + inner.width <= outer.width && inner.y + inner.height <= outer.height && !center) {
    newViewbox = {
      x: 0,
      y: 0,
      width: Math.max(inner.width + inner.x, outer.width),
      height: Math.max(inner.height + inner.y, outer.height)
    };
  } else {
    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);
    newViewbox = {
      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),
      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),
      width: outer.width / newScale,
      height: outer.height / newScale
    };
  }
  this.viewbox(newViewbox);
  return this.viewbox(false).scale;
};
Canvas.prototype._setZoom = function(scale, center) {
  const svg = this._svg, viewport = this._viewport;
  const matrix = svg.createSVGMatrix();
  const point = svg.createSVGPoint();
  let centerPoint, originalPoint, currentMatrix, scaleMatrix, newMatrix;
  currentMatrix = viewport.getCTM();
  const currentScale = currentMatrix.a;
  if (center) {
    centerPoint = assign(point, center);
    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());
    scaleMatrix = matrix.translate(originalPoint.x, originalPoint.y).scale(1 / currentScale * scale).translate(-originalPoint.x, -originalPoint.y);
    newMatrix = currentMatrix.multiply(scaleMatrix);
  } else {
    newMatrix = matrix.scale(scale);
  }
  setCTM(this._viewport, newMatrix);
  return newMatrix;
};
Canvas.prototype.getSize = function() {
  return {
    width: this._container.clientWidth,
    height: this._container.clientHeight
  };
};
Canvas.prototype.getAbsoluteBBox = function(element) {
  const vbox = this.viewbox();
  let bbox;
  if (element.waypoints) {
    const gfx = this.getGraphics(element);
    bbox = gfx.getBBox();
  } else {
    bbox = element;
  }
  const x = bbox.x * vbox.scale - vbox.x * vbox.scale;
  const y = bbox.y * vbox.scale - vbox.y * vbox.scale;
  const width = bbox.width * vbox.scale;
  const height = bbox.height * vbox.scale;
  return {
    x,
    y,
    width,
    height
  };
};
Canvas.prototype.resized = function() {
  delete this._cachedViewbox;
  this._eventBus.fire("canvas.resized");
};

// node_modules/diagram-js/lib/core/ElementRegistry.js
var ELEMENT_ID = "data-element-id";
function ElementRegistry(eventBus) {
  this._elements = {};
  this._eventBus = eventBus;
}
ElementRegistry.$inject = ["eventBus"];
ElementRegistry.prototype.add = function(element, gfx, secondaryGfx) {
  var id = element.id;
  this._validateId(id);
  attr2(gfx, ELEMENT_ID, id);
  if (secondaryGfx) {
    attr2(secondaryGfx, ELEMENT_ID, id);
  }
  this._elements[id] = { element, gfx, secondaryGfx };
};
ElementRegistry.prototype.remove = function(element) {
  var elements = this._elements, id = element.id || element, container = id && elements[id];
  if (container) {
    attr2(container.gfx, ELEMENT_ID, "");
    if (container.secondaryGfx) {
      attr2(container.secondaryGfx, ELEMENT_ID, "");
    }
    delete elements[id];
  }
};
ElementRegistry.prototype.updateId = function(element, newId) {
  this._validateId(newId);
  if (typeof element === "string") {
    element = this.get(element);
  }
  this._eventBus.fire("element.updateId", {
    element,
    newId
  });
  var gfx = this.getGraphics(element), secondaryGfx = this.getGraphics(element, true);
  this.remove(element);
  element.id = newId;
  this.add(element, gfx, secondaryGfx);
};
ElementRegistry.prototype.updateGraphics = function(filter3, gfx, secondary) {
  var id = filter3.id || filter3;
  var container = this._elements[id];
  if (secondary) {
    container.secondaryGfx = gfx;
  } else {
    container.gfx = gfx;
  }
  if (gfx) {
    attr2(gfx, ELEMENT_ID, id);
  }
  return gfx;
};
ElementRegistry.prototype.get = function(filter3) {
  var id;
  if (typeof filter3 === "string") {
    id = filter3;
  } else {
    id = filter3 && attr2(filter3, ELEMENT_ID);
  }
  var container = this._elements[id];
  return container && container.element;
};
ElementRegistry.prototype.filter = function(fn) {
  var filtered = [];
  this.forEach(function(element, gfx) {
    if (fn(element, gfx)) {
      filtered.push(element);
    }
  });
  return filtered;
};
ElementRegistry.prototype.find = function(fn) {
  var map3 = this._elements, keys = Object.keys(map3);
  for (var i = 0; i < keys.length; i++) {
    var id = keys[i], container = map3[id], element = container.element, gfx = container.gfx;
    if (fn(element, gfx)) {
      return element;
    }
  }
};
ElementRegistry.prototype.getAll = function() {
  return this.filter(function(e2) {
    return e2;
  });
};
ElementRegistry.prototype.forEach = function(fn) {
  var map3 = this._elements;
  Object.keys(map3).forEach(function(id) {
    var container = map3[id], element = container.element, gfx = container.gfx;
    return fn(element, gfx);
  });
};
ElementRegistry.prototype.getGraphics = function(filter3, secondary) {
  var id = filter3.id || filter3;
  var container = this._elements[id];
  return container && (secondary ? container.secondaryGfx : container.gfx);
};
ElementRegistry.prototype._validateId = function(id) {
  if (!id) {
    throw new Error("element must have an id");
  }
  if (this._elements[id]) {
    throw new Error("element with id " + id + " already added");
  }
};

// node_modules/diagram-js/lib/model/index.js
var import_object_refs = __toESM(require_object_refs());
var parentRefs = new import_object_refs.default({ name: "children", enumerable: true, collection: true }, { name: "parent" });
var labelRefs = new import_object_refs.default({ name: "labels", enumerable: true, collection: true }, { name: "labelTarget" });
var attacherRefs = new import_object_refs.default({ name: "attachers", collection: true }, { name: "host" });
var outgoingRefs = new import_object_refs.default({ name: "outgoing", collection: true }, { name: "source" });
var incomingRefs = new import_object_refs.default({ name: "incoming", collection: true }, { name: "target" });
function Base2() {
  Object.defineProperty(this, "businessObject", {
    writable: true
  });
  Object.defineProperty(this, "label", {
    get: function() {
      return this.labels[0];
    },
    set: function(newLabel) {
      var label = this.label, labels = this.labels;
      if (!newLabel && label) {
        labels.remove(label);
      } else {
        labels.add(newLabel, 0);
      }
    }
  });
  parentRefs.bind(this, "parent");
  labelRefs.bind(this, "labels");
  outgoingRefs.bind(this, "outgoing");
  incomingRefs.bind(this, "incoming");
}
function Shape() {
  Base2.call(this);
  parentRefs.bind(this, "children");
  attacherRefs.bind(this, "host");
  attacherRefs.bind(this, "attachers");
}
e(Shape, Base2);
function Root() {
  Shape.call(this);
}
e(Root, Shape);
function Label() {
  Shape.call(this);
  labelRefs.bind(this, "labelTarget");
}
e(Label, Shape);
function Connection() {
  Base2.call(this);
  outgoingRefs.bind(this, "source");
  incomingRefs.bind(this, "target");
}
e(Connection, Base2);
var types2 = {
  connection: Connection,
  shape: Shape,
  label: Label,
  root: Root
};
function create2(type, attrs) {
  var Type = types2[type];
  if (!Type) {
    throw new Error("unknown type: <" + type + ">");
  }
  return assign(new Type(), attrs);
}

// node_modules/diagram-js/lib/core/ElementFactory.js
function ElementFactory() {
  this._uid = 12;
}
ElementFactory.prototype.createRoot = function(attrs) {
  return this.create("root", attrs);
};
ElementFactory.prototype.createLabel = function(attrs) {
  return this.create("label", attrs);
};
ElementFactory.prototype.createShape = function(attrs) {
  return this.create("shape", attrs);
};
ElementFactory.prototype.createConnection = function(attrs) {
  return this.create("connection", attrs);
};
ElementFactory.prototype.create = function(type, attrs) {
  attrs = assign({}, attrs || {});
  if (!attrs.id) {
    attrs.id = type + "_" + this._uid++;
  }
  return create2(type, attrs);
};

// node_modules/diagram-js/lib/util/GraphicsUtil.js
function getVisual(gfx) {
  return gfx.childNodes[0];
}
function getChildren(gfx) {
  return gfx.parentNode.childNodes[1];
}

// node_modules/diagram-js/lib/util/SvgTransformUtil.js
function translate(gfx, x, y) {
  var translate3 = createTransform();
  translate3.setTranslate(x, y);
  transform(gfx, translate3);
}

// node_modules/diagram-js/lib/core/GraphicsFactory.js
function GraphicsFactory(eventBus, elementRegistry) {
  this._eventBus = eventBus;
  this._elementRegistry = elementRegistry;
}
GraphicsFactory.$inject = ["eventBus", "elementRegistry"];
GraphicsFactory.prototype._getChildrenContainer = function(element) {
  var gfx = this._elementRegistry.getGraphics(element);
  var childrenGfx;
  if (!element.parent) {
    childrenGfx = gfx;
  } else {
    childrenGfx = getChildren(gfx);
    if (!childrenGfx) {
      childrenGfx = create("g");
      classes2(childrenGfx).add("djs-children");
      append(gfx.parentNode, childrenGfx);
    }
  }
  return childrenGfx;
};
GraphicsFactory.prototype._clear = function(gfx) {
  var visual = getVisual(gfx);
  clear2(visual);
  return visual;
};
GraphicsFactory.prototype._createContainer = function(type, childrenGfx, parentIndex, isFrame) {
  var outerGfx = create("g");
  classes2(outerGfx).add("djs-group");
  if (typeof parentIndex !== "undefined") {
    prependTo(outerGfx, childrenGfx, childrenGfx.childNodes[parentIndex]);
  } else {
    append(childrenGfx, outerGfx);
  }
  var gfx = create("g");
  classes2(gfx).add("djs-element");
  classes2(gfx).add("djs-" + type);
  if (isFrame) {
    classes2(gfx).add("djs-frame");
  }
  append(outerGfx, gfx);
  var visual = create("g");
  classes2(visual).add("djs-visual");
  append(gfx, visual);
  return gfx;
};
GraphicsFactory.prototype.create = function(type, element, parentIndex) {
  var childrenGfx = this._getChildrenContainer(element.parent);
  return this._createContainer(type, childrenGfx, parentIndex, isFrameElement(element));
};
GraphicsFactory.prototype.updateContainments = function(elements) {
  var self2 = this, elementRegistry = this._elementRegistry, parents;
  parents = reduce(elements, function(map3, e2) {
    if (e2.parent) {
      map3[e2.parent.id] = e2.parent;
    }
    return map3;
  }, {});
  forEach(parents, function(parent) {
    var children = parent.children;
    if (!children) {
      return;
    }
    var childrenGfx = self2._getChildrenContainer(parent);
    forEach(children.slice().reverse(), function(child) {
      var childGfx = elementRegistry.getGraphics(child);
      prependTo(childGfx.parentNode, childrenGfx);
    });
  });
};
GraphicsFactory.prototype.drawShape = function(visual, element) {
  var eventBus = this._eventBus;
  return eventBus.fire("render.shape", { gfx: visual, element });
};
GraphicsFactory.prototype.getShapePath = function(element) {
  var eventBus = this._eventBus;
  return eventBus.fire("render.getShapePath", element);
};
GraphicsFactory.prototype.drawConnection = function(visual, element) {
  var eventBus = this._eventBus;
  return eventBus.fire("render.connection", { gfx: visual, element });
};
GraphicsFactory.prototype.getConnectionPath = function(waypoints) {
  var eventBus = this._eventBus;
  return eventBus.fire("render.getConnectionPath", waypoints);
};
GraphicsFactory.prototype.update = function(type, element, gfx) {
  if (!element.parent) {
    return;
  }
  var visual = this._clear(gfx);
  if (type === "shape") {
    this.drawShape(visual, element);
    translate(gfx, element.x, element.y);
  } else if (type === "connection") {
    this.drawConnection(visual, element);
  } else {
    throw new Error("unknown type: " + type);
  }
  if (element.hidden) {
    attr2(gfx, "display", "none");
  } else {
    attr2(gfx, "display", "block");
  }
};
GraphicsFactory.prototype.remove = function(element) {
  var gfx = this._elementRegistry.getGraphics(element);
  remove2(gfx.parentNode);
};
function prependTo(newNode, parentNode, siblingNode) {
  var node2 = siblingNode || parentNode.firstChild;
  if (newNode === node2) {
    return;
  }
  parentNode.insertBefore(newNode, node2);
}

// node_modules/diagram-js/lib/core/index.js
var core_default = {
  __depends__: [draw_default],
  __init__: ["canvas"],
  canvas: ["type", Canvas],
  elementRegistry: ["type", ElementRegistry],
  elementFactory: ["type", ElementFactory],
  eventBus: ["type", EventBus],
  graphicsFactory: ["type", GraphicsFactory]
};

// node_modules/diagram-js/lib/Diagram.js
function bootstrap(modules) {
  var injector = new Injector(modules);
  injector.init();
  return injector;
}
function createInjector(options2) {
  options2 = options2 || {};
  var configModule = {
    "config": ["value", options2]
  };
  var modules = [configModule, core_default].concat(options2.modules || []);
  return bootstrap(modules);
}
function Diagram(options2, injector) {
  this.injector = injector = injector || createInjector(options2);
  this.get = injector.get;
  this.invoke = injector.invoke;
  this.get("eventBus").fire("diagram.init");
}
Diagram.prototype.destroy = function() {
  this.get("eventBus").fire("diagram.destroy");
};
Diagram.prototype.clear = function() {
  this.get("eventBus").fire("diagram.clear");
};

// node_modules/dmn-js-drd/lib/import/DrdTreeWalker.js
var import_object_refs2 = __toESM(require_object_refs());

// node_modules/dmn-js-shared/lib/util/ModelUtil.js
function is(element, type) {
  var bo = getBusinessObject(element);
  return bo && typeof bo.$instanceOf === "function" && bo.$instanceOf(type);
}
function getBusinessObject(element) {
  return element && element.businessObject || element;
}
function getName(element) {
  return getBusinessObject(element).name;
}

// node_modules/dmn-js-drd/lib/import/DrdTreeWalker.js
var diRefs = new import_object_refs2.default({
  name: "dmnElementRef",
  enumerable: true
}, {
  name: "di",
  configurable: true
});
function DRDTreeWalker(handler, options2) {
  var deferred = [];
  function visit(element) {
    var gfx = element.gfx;
    if (gfx) {
      throw new Error("already rendered " + element.id);
    }
    return handler.element(element);
  }
  function visitRoot(element) {
    return handler.root(element);
  }
  function visitIfDi(element) {
    try {
      var gfx = element.di && visit(element);
      return gfx;
    } catch (e2) {
      logError(e2.message, {
        element,
        error: e2
      });
    }
  }
  function handleDefinitions(definitions, diagram) {
    var dmnDI = definitions.dmnDI;
    if (!dmnDI) {
      throw new Error("no dmndi:DMNDI");
    }
    var diagrams = dmnDI.diagrams || [];
    if (diagram && diagrams.indexOf(diagram) === -1) {
      throw new Error("diagram not part of dmndi:DMNDI");
    }
    if (!diagram && diagrams && diagrams.length) {
      diagram = diagrams[0];
    }
    if (!diagram) {
      throw new Error("no diagram to display");
    }
    definitions.di = diagram;
    handleDiagram(diagram);
    visitRoot(definitions);
    handleDrgElements(definitions.get("drgElement"));
    handleArtifacts(definitions.get("artifact"));
    handleDeferred();
  }
  function handleDrgElements(elements) {
    forEach2(elements, function(element) {
      visitIfDi(element);
      handleRequirements(element);
    });
  }
  function handleArtifacts(elements) {
    forEach2(elements, function(element) {
      if (is(element, "dmn:Association")) {
        handleAssociation(element);
      } else {
        visitIfDi(element);
      }
    });
  }
  function handleAssociation(element) {
    defer(function() {
      visitIfDi(element);
    });
  }
  function handleRequirements(element) {
    forEach2(["informationRequirement", "knowledgeRequirement", "authorityRequirement"], function(requirements) {
      forEach2(element[requirements], function(requirement) {
        defer(function() {
          visitIfDi(requirement);
        });
      });
    });
  }
  function handleDiagram(diagram) {
    forEach2(diagram.diagramElements, handleDiagramElement);
  }
  function handleDiagramElement(diagramElement) {
    registerDi(diagramElement);
  }
  function registerDi(di) {
    var dmnElement = di.dmnElementRef;
    if (dmnElement) {
      if (dmnElement.di) {
        logError("multiple DI elements defined for element", {
          element: dmnElement
        });
      } else {
        diRefs.bind(dmnElement, "di");
        dmnElement.di = di;
      }
    } else {
      logError("no DMN element referenced in element", {
        element: di
      });
    }
  }
  function defer(fn) {
    deferred.push(fn);
  }
  function handleDeferred() {
    forEach2(deferred, function(d) {
      d();
    });
  }
  function logError(message, context) {
    handler.error(message, context);
  }
  return {
    handleDefinitions
  };
}

// node_modules/dmn-js-drd/lib/import/Importer.js
function importDRD(drd, definitions, done) {
  var importer = drd.get("drdImporter"), eventBus = drd.get("eventBus");
  var error3, warnings = [];
  function render3(definitions2) {
    var visitor = {
      root: function root(element) {
        return importer.root(element);
      },
      element: function element(_element, di) {
        return importer.add(_element, di);
      },
      error: function error4(message, context) {
        warnings.push({
          message,
          context
        });
      }
    };
    var walker = new DRDTreeWalker(visitor);
    walker.handleDefinitions(definitions2);
  }
  eventBus.fire("import.start", {
    definitions
  });
  try {
    render3(definitions);
  } catch (e2) {
    error3 = e2;
  }
  eventBus.fire("import.done", {
    error: error3,
    warnings
  });
  done(error3, warnings);
}

// node_modules/dmn-js-drd/node_modules/tiny-svg/dist/index.esm.js
function ensureImported2(element, target) {
  if (element.ownerDocument !== target.ownerDocument) {
    try {
      return target.ownerDocument.importNode(element, true);
    } catch (e2) {
    }
  }
  return element;
}
function appendTo2(element, target) {
  return target.appendChild(ensureImported2(element, target));
}
function append2(target, node2) {
  appendTo2(node2, target);
  return target;
}
var LENGTH_ATTR2 = 2;
var CSS_PROPERTIES2 = {
  "alignment-baseline": 1,
  "baseline-shift": 1,
  "clip": 1,
  "clip-path": 1,
  "clip-rule": 1,
  "color": 1,
  "color-interpolation": 1,
  "color-interpolation-filters": 1,
  "color-profile": 1,
  "color-rendering": 1,
  "cursor": 1,
  "direction": 1,
  "display": 1,
  "dominant-baseline": 1,
  "enable-background": 1,
  "fill": 1,
  "fill-opacity": 1,
  "fill-rule": 1,
  "filter": 1,
  "flood-color": 1,
  "flood-opacity": 1,
  "font": 1,
  "font-family": 1,
  "font-size": LENGTH_ATTR2,
  "font-size-adjust": 1,
  "font-stretch": 1,
  "font-style": 1,
  "font-variant": 1,
  "font-weight": 1,
  "glyph-orientation-horizontal": 1,
  "glyph-orientation-vertical": 1,
  "image-rendering": 1,
  "kerning": 1,
  "letter-spacing": 1,
  "lighting-color": 1,
  "marker": 1,
  "marker-end": 1,
  "marker-mid": 1,
  "marker-start": 1,
  "mask": 1,
  "opacity": 1,
  "overflow": 1,
  "pointer-events": 1,
  "shape-rendering": 1,
  "stop-color": 1,
  "stop-opacity": 1,
  "stroke": 1,
  "stroke-dasharray": 1,
  "stroke-dashoffset": 1,
  "stroke-linecap": 1,
  "stroke-linejoin": 1,
  "stroke-miterlimit": 1,
  "stroke-opacity": 1,
  "stroke-width": LENGTH_ATTR2,
  "text-anchor": 1,
  "text-decoration": 1,
  "text-rendering": 1,
  "unicode-bidi": 1,
  "visibility": 1,
  "word-spacing": 1,
  "writing-mode": 1
};
function getAttribute2(node2, name2) {
  if (CSS_PROPERTIES2[name2]) {
    return node2.style[name2];
  } else {
    return node2.getAttributeNS(null, name2);
  }
}
function setAttribute2(node2, name2, value) {
  var hyphenated = name2.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  var type = CSS_PROPERTIES2[hyphenated];
  if (type) {
    if (type === LENGTH_ATTR2 && typeof value === "number") {
      value = String(value) + "px";
    }
    node2.style[hyphenated] = value;
  } else {
    node2.setAttributeNS(null, name2, value);
  }
}
function setAttributes2(node2, attrs) {
  var names = Object.keys(attrs), i, name2;
  for (i = 0, name2; name2 = names[i]; i++) {
    setAttribute2(node2, name2, attrs[name2]);
  }
}
function attr4(node2, name2, value) {
  if (typeof name2 === "string") {
    if (value !== void 0) {
      setAttribute2(node2, name2, value);
    } else {
      return getAttribute2(node2, name2);
    }
  } else {
    setAttributes2(node2, name2);
  }
  return node2;
}
function index(arr, obj) {
  if (arr.indexOf) {
    return arr.indexOf(obj);
  }
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) {
      return i;
    }
  }
  return -1;
}
var re2 = /\s+/;
var toString4 = Object.prototype.toString;
function defined(o) {
  return typeof o !== "undefined";
}
function ClassList4(el) {
  if (!el || !el.nodeType) {
    throw new Error("A DOM element reference is required");
  }
  this.el = el;
  this.list = el.classList;
}
ClassList4.prototype.add = function(name2) {
  if (this.list) {
    this.list.add(name2);
    return this;
  }
  var arr = this.array();
  var i = index(arr, name2);
  if (!~i) {
    arr.push(name2);
  }
  if (defined(this.el.className.baseVal)) {
    this.el.className.baseVal = arr.join(" ");
  } else {
    this.el.className = arr.join(" ");
  }
  return this;
};
ClassList4.prototype.remove = function(name2) {
  if (toString4.call(name2) === "[object RegExp]") {
    return this.removeMatching(name2);
  }
  if (this.list) {
    this.list.remove(name2);
    return this;
  }
  var arr = this.array();
  var i = index(arr, name2);
  if (~i) {
    arr.splice(i, 1);
  }
  this.el.className.baseVal = arr.join(" ");
  return this;
};
ClassList4.prototype.removeMatching = function(re3) {
  var arr = this.array();
  for (var i = 0; i < arr.length; i++) {
    if (re3.test(arr[i])) {
      this.remove(arr[i]);
    }
  }
  return this;
};
ClassList4.prototype.toggle = function(name2, force) {
  if (this.list) {
    if (defined(force)) {
      if (force !== this.list.toggle(name2, force)) {
        this.list.toggle(name2);
      }
    } else {
      this.list.toggle(name2);
    }
    return this;
  }
  if (defined(force)) {
    if (!force) {
      this.remove(name2);
    } else {
      this.add(name2);
    }
  } else {
    if (this.has(name2)) {
      this.remove(name2);
    } else {
      this.add(name2);
    }
  }
  return this;
};
ClassList4.prototype.array = function() {
  var className = this.el.getAttribute("class") || "";
  var str = className.replace(/^\s+|\s+$/g, "");
  var arr = str.split(re2);
  if (arr[0] === "") {
    arr.shift();
  }
  return arr;
};
ClassList4.prototype.has = ClassList4.prototype.contains = function(name2) {
  return this.list ? this.list.contains(name2) : !!~index(this.array(), name2);
};
function remove5(element) {
  var parent = element.parentNode;
  if (parent) {
    parent.removeChild(element);
  }
  return element;
}
function clear3(element) {
  var child;
  while (child = element.firstChild) {
    remove5(child);
  }
  return element;
}
var ns2 = {
  svg: "http://www.w3.org/2000/svg"
};
var SVG_START2 = '<svg xmlns="' + ns2.svg + '"';
function parse4(svg) {
  var unwrap = false;
  if (svg.substring(0, 4) === "<svg") {
    if (svg.indexOf(ns2.svg) === -1) {
      svg = SVG_START2 + svg.substring(4);
    }
  } else {
    svg = SVG_START2 + ">" + svg + "</svg>";
    unwrap = true;
  }
  var parsed = parseDocument2(svg);
  if (!unwrap) {
    return parsed;
  }
  var fragment = document.createDocumentFragment();
  var parent = parsed.firstChild;
  while (parent.firstChild) {
    fragment.appendChild(parent.firstChild);
  }
  return fragment;
}
function parseDocument2(svg) {
  var parser;
  parser = new DOMParser();
  parser.async = false;
  return parser.parseFromString(svg, "text/xml");
}
function create3(name2, attrs) {
  var element;
  if (name2.charAt(0) === "<") {
    element = parse4(name2).firstChild;
    element = document.importNode(element, true);
  } else {
    element = document.createElementNS(ns2.svg, name2);
  }
  if (attrs) {
    attr4(element, attrs);
  }
  return element;
}
var TEXT_ENTITIES = /([&<>]{1})/g;
var ATTR_ENTITIES = /([\n\r"]{1})/g;
var ENTITY_REPLACEMENT = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "'"
};
function escape2(str, pattern) {
  function replaceFn(match2, entity) {
    return ENTITY_REPLACEMENT[entity] || entity;
  }
  return str.replace(pattern, replaceFn);
}
function serialize(node2, output) {
  var i, len, attrMap, attrNode, childNodes;
  switch (node2.nodeType) {
    case 3:
      output.push(escape2(node2.textContent, TEXT_ENTITIES));
      break;
    case 1:
      output.push("<", node2.tagName);
      if (node2.hasAttributes()) {
        attrMap = node2.attributes;
        for (i = 0, len = attrMap.length; i < len; ++i) {
          attrNode = attrMap.item(i);
          output.push(" ", attrNode.name, '="', escape2(attrNode.value, ATTR_ENTITIES), '"');
        }
      }
      if (node2.hasChildNodes()) {
        output.push(">");
        childNodes = node2.childNodes;
        for (i = 0, len = childNodes.length; i < len; ++i) {
          serialize(childNodes.item(i), output);
        }
        output.push("</", node2.tagName, ">");
      } else {
        output.push("/>");
      }
      break;
    case 8:
      output.push("<!--", escape2(node2.nodeValue, TEXT_ENTITIES), "-->");
      break;
    case 4:
      output.push("<![CDATA[", node2.nodeValue, "]]>");
      break;
    default:
      throw new Error("unable to handle node " + node2.nodeType);
  }
  return output;
}
function set(element, svg) {
  var parsed = parse4(svg);
  clear3(element);
  if (!svg) {
    return;
  }
  if (!isFragment(parsed)) {
    parsed = parsed.documentElement;
  }
  var nodes = slice2(parsed.childNodes);
  for (var i = 0; i < nodes.length; i++) {
    appendTo2(nodes[i], element);
  }
}
function get(element) {
  var child = element.firstChild, output = [];
  while (child) {
    serialize(child, output);
    child = child.nextSibling;
  }
  return output.join("");
}
function isFragment(node2) {
  return node2.nodeName === "#document-fragment";
}
function innerSVG(element, svg) {
  if (svg !== void 0) {
    try {
      set(element, svg);
    } catch (e2) {
      throw new Error("error parsing SVG: " + e2.message);
    }
    return element;
  } else {
    return get(element);
  }
}
function slice2(arr) {
  return Array.prototype.slice.call(arr);
}

// node_modules/dmn-js-drd/lib/draw/DrdRenderer.js
var import_ids = __toESM(require_ids());
var RENDERER_IDS = new import_ids.default();
var black = "hsl(225, 10%, 15%)";
function DrdRenderer(config, eventBus, pathMap, styles, textRenderer, canvas) {
  BaseRenderer.call(this, eventBus);
  var rendererId = RENDERER_IDS.next();
  var computeStyle = styles.computeStyle;
  var markers = {};
  var defaultFillColor = config && config.defaultFillColor || "white", defaultStrokeColor = config && config.defaultStrokeColor || black, defaultLabelColor = config && config.defaultLabelColor;
  function marker(type, fill, stroke) {
    var id = type + "-" + colorEscape(fill) + "-" + colorEscape(stroke) + "-" + rendererId;
    if (!markers[id]) {
      createMarker(id, type, fill, stroke);
    }
    return "url(#" + id + ")";
  }
  function addMarker(id, options2) {
    var attrs = assign2({
      strokeWidth: 1,
      strokeLinecap: "round",
      strokeDasharray: "none"
    }, options2.attrs);
    var ref = options2.ref || {
      x: 0,
      y: 0
    };
    var scale = options2.scale || 1;
    if (attrs.strokeDasharray === "none") {
      attrs.strokeDasharray = [1e4, 1];
    }
    var marker2 = create3("marker");
    attr4(options2.element, attrs);
    append2(marker2, options2.element);
    attr4(marker2, {
      id,
      viewBox: "0 0 20 20",
      refX: ref.x,
      refY: ref.y,
      markerWidth: 20 * scale,
      markerHeight: 20 * scale,
      orient: "auto"
    });
    var defs = query("defs", canvas._svg);
    if (!defs) {
      defs = create3("defs");
      append2(canvas._svg, defs);
    }
    append2(defs, marker2);
    markers[id] = marker2;
  }
  function createMarker(id, type, fill, stroke) {
    if (type === "association-start") {
      var associationStart = create3("path");
      attr4(associationStart, {
        d: "M 11 5 L 1 10 L 11 15"
      });
      addMarker(id, {
        element: associationStart,
        attrs: {
          fill: "none",
          stroke,
          strokeWidth: 1.5
        },
        ref: {
          x: 1,
          y: 10
        },
        scale: 0.5
      });
    } else if (type === "association-end") {
      var associationEnd = create3("path");
      attr4(associationEnd, {
        d: "M 1 5 L 11 10 L 1 15"
      });
      addMarker(id, {
        element: associationEnd,
        attrs: {
          fill: "none",
          stroke,
          strokeWidth: 1.5
        },
        ref: {
          x: 12,
          y: 10
        },
        scale: 0.5
      });
    } else if (type === "information-requirement-end") {
      var informationRequirementEnd = create3("path");
      attr4(informationRequirementEnd, {
        d: "M 1 5 L 11 10 L 1 15 Z"
      });
      addMarker(id, {
        element: informationRequirementEnd,
        attrs: {
          fill: stroke,
          stroke: "none"
        },
        ref: {
          x: 11,
          y: 10
        },
        scale: 1
      });
    } else if (type === "knowledge-requirement-end") {
      var knowledgeRequirementEnd = create3("path");
      attr4(knowledgeRequirementEnd, {
        d: "M 1 3 L 11 10 L 1 17"
      });
      addMarker(id, {
        element: knowledgeRequirementEnd,
        attrs: {
          fill: "none",
          stroke,
          strokeWidth: 2
        },
        ref: {
          x: 11,
          y: 10
        },
        scale: 0.8
      });
    } else if (type === "authority-requirement-end") {
      var authorityRequirementEnd = create3("circle");
      attr4(authorityRequirementEnd, {
        cx: 3,
        cy: 3,
        r: 3
      });
      addMarker(id, {
        element: authorityRequirementEnd,
        attrs: {
          fill: stroke,
          stroke: "none"
        },
        ref: {
          x: 3,
          y: 3
        },
        scale: 0.9
      });
    }
  }
  function drawRect(p, width, height, r, offset, attrs) {
    if (isObject2(offset)) {
      attrs = offset;
      offset = 0;
    }
    offset = offset || 0;
    attrs = computeStyle(attrs, {
      stroke: black,
      strokeWidth: 2,
      fill: "white"
    });
    var rect = create3("rect");
    attr4(rect, {
      x: offset,
      y: offset,
      width: width - offset * 2,
      height: height - offset * 2,
      rx: r,
      ry: r
    });
    attr4(rect, attrs);
    append2(p, rect);
    return rect;
  }
  function renderLabel(p, label, options2) {
    var text = textRenderer.createText(label || "", options2);
    attr(text, "class", "djs-label");
    append2(p, text);
    return text;
  }
  function renderEmbeddedLabel(p, element, align, options2) {
    var name2 = getName(element);
    options2 = assign2({
      box: element,
      align,
      padding: 5,
      style: {
        fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor)
      }
    }, options2);
    return renderLabel(p, name2, options2);
  }
  function drawPath(p, d, attrs) {
    attrs = computeStyle(attrs, ["no-fill"], {
      strokeWidth: 2,
      stroke: black
    });
    var path = create3("path");
    attr4(path, {
      d
    });
    attr4(path, attrs);
    append2(p, path);
    return path;
  }
  var handlers = {
    "dmn:Decision": function dmnDecision(p, element) {
      var rect = drawRect(p, element.width, element.height, 0, {
        stroke: getStrokeColor(element, defaultStrokeColor),
        fill: getFillColor(element, defaultFillColor)
      });
      renderEmbeddedLabel(p, element, "center-middle");
      return rect;
    },
    "dmn:KnowledgeSource": function dmnKnowledgeSource(p, element) {
      var pathData = pathMap.getScaledPath("KNOWLEDGE_SOURCE", {
        xScaleFactor: 1.021,
        yScaleFactor: 1,
        containerWidth: element.width,
        containerHeight: element.height,
        position: {
          mx: 0,
          my: 0.075
        }
      });
      var knowledgeSource = drawPath(p, pathData, {
        strokeWidth: 2,
        fill: getFillColor(element, defaultFillColor),
        stroke: getStrokeColor(element, defaultStrokeColor)
      });
      renderEmbeddedLabel(p, element, "center-middle");
      return knowledgeSource;
    },
    "dmn:BusinessKnowledgeModel": function dmnBusinessKnowledgeModel(p, element) {
      var pathData = pathMap.getScaledPath("BUSINESS_KNOWLEDGE_MODEL", {
        xScaleFactor: 1,
        yScaleFactor: 1,
        containerWidth: element.width,
        containerHeight: element.height,
        position: {
          mx: 0,
          my: 0.3
        }
      });
      var businessKnowledge = drawPath(p, pathData, {
        strokeWidth: 2,
        fill: getFillColor(element, defaultFillColor),
        stroke: getStrokeColor(element, defaultStrokeColor)
      });
      renderEmbeddedLabel(p, element, "center-middle");
      return businessKnowledge;
    },
    "dmn:InputData": function dmnInputData(p, element) {
      var rect = drawRect(p, element.width, element.height, 22, {
        stroke: getStrokeColor(element, defaultStrokeColor),
        fill: getFillColor(element, defaultFillColor)
      });
      renderEmbeddedLabel(p, element, "center-middle");
      return rect;
    },
    "dmn:TextAnnotation": function dmnTextAnnotation(p, element) {
      var style = {
        "fill": "none",
        "stroke": "none"
      };
      var textElement = drawRect(p, element.width, element.height, 0, 0, style);
      var textPathData = pathMap.getScaledPath("TEXT_ANNOTATION", {
        xScaleFactor: 1,
        yScaleFactor: 1,
        containerWidth: element.width,
        containerHeight: element.height,
        position: {
          mx: 0,
          my: 0
        }
      });
      drawPath(p, textPathData, {
        stroke: getStrokeColor(element, defaultStrokeColor)
      });
      var text = getSemantic(element).text || "";
      renderLabel(p, text, {
        style: {
          fill: getLabelColor(element, defaultLabelColor, defaultStrokeColor)
        },
        box: element,
        align: "left-top",
        padding: 5
      });
      return textElement;
    },
    "dmn:Association": function dmnAssociation(p, element) {
      var semantic = getSemantic(element);
      var fill = getFillColor(element, defaultFillColor), stroke = getStrokeColor(element, defaultStrokeColor), attrs = {
        stroke,
        strokeDasharray: "0.5, 5",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        fill: "none"
      };
      if (semantic.associationDirection === "One" || semantic.associationDirection === "Both") {
        attrs.markerEnd = marker("association-end", fill, stroke);
      }
      if (semantic.associationDirection === "Both") {
        attrs.markerStart = marker("association-start", fill, stroke);
      }
      return drawLine(p, element.waypoints, attrs);
    },
    "dmn:InformationRequirement": function dmnInformationRequirement(p, element) {
      var fill = getFillColor(element, defaultFillColor), stroke = getStrokeColor(element, defaultStrokeColor), attrs = {
        stroke,
        strokeWidth: 1,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        markerEnd: marker("information-requirement-end", fill, stroke)
      };
      return drawLine(p, element.waypoints, attrs);
    },
    "dmn:KnowledgeRequirement": function dmnKnowledgeRequirement(p, element) {
      var fill = getFillColor(element, defaultFillColor), stroke = getStrokeColor(element, defaultStrokeColor);
      var attrs = {
        stroke,
        strokeWidth: 1,
        strokeDasharray: 5,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        markerEnd: marker("knowledge-requirement-end", fill, stroke)
      };
      return drawLine(p, element.waypoints, attrs);
    },
    "dmn:AuthorityRequirement": function dmnAuthorityRequirement(p, element) {
      var fill = getFillColor(element, defaultFillColor), stroke = getStrokeColor(element, defaultStrokeColor), attrs = {
        stroke,
        strokeWidth: 1.5,
        strokeDasharray: 5,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        markerEnd: marker("authority-requirement-end", fill, stroke)
      };
      return drawLine(p, element.waypoints, attrs);
    }
  };
  function drawShape2(parent, element) {
    var h = handlers[element.type];
    if (!h) {
      return BaseRenderer.prototype.drawShape.apply(this, [parent, element]);
    } else {
      return h(parent, element);
    }
  }
  function drawConnection2(parent, element) {
    var type = element.type;
    var h = handlers[type];
    if (!h) {
      return BaseRenderer.prototype.drawConnection.apply(this, [parent, element]);
    } else {
      return h(parent, element);
    }
  }
  function drawLine(p, waypoints, attrs) {
    attrs = computeStyle(attrs, ["no-fill"], {
      stroke: black,
      strokeWidth: 2,
      fill: "none"
    });
    var line = createLine(waypoints, attrs);
    append2(p, line);
    return line;
  }
  this.canRender = function(element) {
    return is(element, "dmn:DMNElement") || is(element, "dmn:InformationRequirement") || is(element, "dmn:KnowledgeRequirement") || is(element, "dmn:AuthorityRequirement");
  };
  this.drawShape = drawShape2;
  this.drawConnection = drawConnection2;
}
e(DrdRenderer, BaseRenderer);
DrdRenderer.$inject = ["config.drdRenderer", "eventBus", "pathMap", "styles", "textRenderer", "canvas"];
function getSemantic(element) {
  return element.businessObject;
}
function colorEscape(str) {
  return str.replace(/[^0-9a-zA-z]+/g, "_");
}
function getStrokeColor(element, defaultColor) {
  return defaultColor;
}
function getFillColor(element, defaultColor) {
  return defaultColor;
}
function getLabelColor(element, defaultColor, defaultStrokeColor) {
  return defaultColor || getStrokeColor(element, defaultStrokeColor);
}

// node_modules/diagram-js/lib/util/Text.js
var DEFAULT_BOX_PADDING = 0;
var DEFAULT_LABEL_SIZE = {
  width: 150,
  height: 50
};
function parseAlign(align) {
  var parts = align.split("-");
  return {
    horizontal: parts[0] || "center",
    vertical: parts[1] || "top"
  };
}
function parsePadding(padding) {
  if (isObject(padding)) {
    return assign({ top: 0, left: 0, right: 0, bottom: 0 }, padding);
  } else {
    return {
      top: padding,
      left: padding,
      right: padding,
      bottom: padding
    };
  }
}
function getTextBBox(text, fakeText) {
  fakeText.textContent = text;
  var textBBox;
  try {
    var bbox, emptyLine = text === "";
    fakeText.textContent = emptyLine ? "dummy" : text;
    textBBox = fakeText.getBBox();
    bbox = {
      width: textBBox.width + textBBox.x * 2,
      height: textBBox.height
    };
    if (emptyLine) {
      bbox.width = 0;
    }
    return bbox;
  } catch (e2) {
    return { width: 0, height: 0 };
  }
}
function layoutNext(lines, maxWidth, fakeText) {
  var originalLine = lines.shift(), fitLine = originalLine;
  var textBBox;
  for (; ; ) {
    textBBox = getTextBBox(fitLine, fakeText);
    textBBox.width = fitLine ? textBBox.width : 0;
    if (fitLine === " " || fitLine === "" || textBBox.width < Math.round(maxWidth) || fitLine.length < 2) {
      return fit(lines, fitLine, originalLine, textBBox);
    }
    fitLine = shortenLine(fitLine, textBBox.width, maxWidth);
  }
}
function fit(lines, fitLine, originalLine, textBBox) {
  if (fitLine.length < originalLine.length) {
    var remainder = originalLine.slice(fitLine.length).trim();
    lines.unshift(remainder);
  }
  return {
    width: textBBox.width,
    height: textBBox.height,
    text: fitLine
  };
}
var SOFT_BREAK = "\xAD";
function semanticShorten(line, maxLength) {
  var parts = line.split(/(\s|-|\u00AD)/g), part, shortenedParts = [], length2 = 0;
  if (parts.length > 1) {
    while (part = parts.shift()) {
      if (part.length + length2 < maxLength) {
        shortenedParts.push(part);
        length2 += part.length;
      } else {
        if (part === "-" || part === SOFT_BREAK) {
          shortenedParts.pop();
        }
        break;
      }
    }
  }
  var last = shortenedParts[shortenedParts.length - 1];
  if (last && last === SOFT_BREAK) {
    shortenedParts[shortenedParts.length - 1] = "-";
  }
  return shortenedParts.join("");
}
function shortenLine(line, width, maxWidth) {
  var length2 = Math.max(line.length * (maxWidth / width), 1);
  var shortenedLine = semanticShorten(line, length2);
  if (!shortenedLine) {
    shortenedLine = line.slice(0, Math.max(Math.round(length2 - 1), 1));
  }
  return shortenedLine;
}
function getHelperSvg() {
  var helperSvg = document.getElementById("helper-svg");
  if (!helperSvg) {
    helperSvg = create("svg");
    attr2(helperSvg, {
      id: "helper-svg"
    });
    assign3(helperSvg, {
      visibility: "hidden",
      position: "fixed",
      width: 0,
      height: 0
    });
    document.body.appendChild(helperSvg);
  }
  return helperSvg;
}
function Text(config) {
  this._config = assign({}, {
    size: DEFAULT_LABEL_SIZE,
    padding: DEFAULT_BOX_PADDING,
    style: {},
    align: "center-top"
  }, config || {});
}
Text.prototype.createText = function(text, options2) {
  return this.layoutText(text, options2).element;
};
Text.prototype.getDimensions = function(text, options2) {
  return this.layoutText(text, options2).dimensions;
};
Text.prototype.layoutText = function(text, options2) {
  var box = assign({}, this._config.size, options2.box), style = assign({}, this._config.style, options2.style), align = parseAlign(options2.align || this._config.align), padding = parsePadding(options2.padding !== void 0 ? options2.padding : this._config.padding), fitBox = options2.fitBox || false;
  var lineHeight = getLineHeight(style);
  var lines = text.split(/\u00AD?\r?\n/), layouted = [];
  var maxWidth = box.width - padding.left - padding.right;
  var helperText = create("text");
  attr2(helperText, { x: 0, y: 0 });
  attr2(helperText, style);
  var helperSvg = getHelperSvg();
  append(helperSvg, helperText);
  while (lines.length) {
    layouted.push(layoutNext(lines, maxWidth, helperText));
  }
  if (align.vertical === "middle") {
    padding.top = padding.bottom = 0;
  }
  var totalHeight = reduce(layouted, function(sum, line, idx) {
    return sum + (lineHeight || line.height);
  }, 0) + padding.top + padding.bottom;
  var maxLineWidth = reduce(layouted, function(sum, line, idx) {
    return line.width > sum ? line.width : sum;
  }, 0);
  var y = padding.top;
  if (align.vertical === "middle") {
    y += (box.height - totalHeight) / 2;
  }
  y -= (lineHeight || layouted[0].height) / 4;
  var textElement = create("text");
  attr2(textElement, style);
  forEach(layouted, function(line) {
    var x;
    y += lineHeight || line.height;
    switch (align.horizontal) {
      case "left":
        x = padding.left;
        break;
      case "right":
        x = (fitBox ? maxLineWidth : maxWidth) - padding.right - line.width;
        break;
      default:
        x = Math.max(((fitBox ? maxLineWidth : maxWidth) - line.width) / 2 + padding.left, 0);
    }
    var tspan = create("tspan");
    attr2(tspan, { x, y });
    tspan.textContent = line.text;
    append(textElement, tspan);
  });
  remove2(helperText);
  var dimensions = {
    width: maxLineWidth,
    height: totalHeight
  };
  return {
    dimensions,
    element: textElement
  };
};
function getLineHeight(style) {
  if ("fontSize" in style && "lineHeight" in style) {
    return style.lineHeight * parseInt(style.fontSize, 10);
  }
}

// node_modules/dmn-js-drd/lib/draw/TextRenderer.js
var DEFAULT_FONT_SIZE = 12;
var LINE_HEIGHT_RATIO = 1.2;
var MIN_TEXT_ANNOTATION_HEIGHT = 30;
function TextRenderer(config) {
  var defaultStyle = assign2({
    fontFamily: "Arial, sans-serif",
    fontSize: DEFAULT_FONT_SIZE,
    fontWeight: "normal",
    lineHeight: LINE_HEIGHT_RATIO
  }, config && config.defaultStyle || {});
  var fontSize = parseInt(defaultStyle.fontSize, 10) - 1;
  var externalStyle = assign2({}, defaultStyle, {
    fontSize
  }, config && config.externalStyle || {});
  var textUtil = new Text({
    style: defaultStyle
  });
  this.getExternalLabelBounds = function(bounds, text) {
    var layoutedDimensions = textUtil.getDimensions(text, {
      box: {
        width: 90,
        height: 30,
        x: bounds.width / 2 + bounds.x,
        y: bounds.height / 2 + bounds.y
      },
      style: externalStyle
    });
    return {
      x: Math.round(bounds.x + bounds.width / 2 - layoutedDimensions.width / 2),
      y: Math.round(bounds.y),
      width: Math.ceil(layoutedDimensions.width),
      height: Math.ceil(layoutedDimensions.height)
    };
  };
  this.getTextAnnotationBounds = function(bounds, text) {
    var layoutedDimensions = textUtil.getDimensions(text, {
      box: bounds,
      style: defaultStyle,
      align: "left-top",
      padding: 5
    });
    return {
      x: bounds.x,
      y: bounds.y,
      width: bounds.width,
      height: Math.max(MIN_TEXT_ANNOTATION_HEIGHT, Math.round(layoutedDimensions.height))
    };
  };
  this.createText = function(text, options2) {
    return textUtil.createText(text, options2 || {});
  };
  this.getDefaultStyle = function() {
    return defaultStyle;
  };
  this.getExternalStyle = function() {
    return externalStyle;
  };
}
TextRenderer.$inject = ["config.textRenderer"];

// node_modules/dmn-js-drd/lib/draw/PathMap.js
function PathMap() {
  this.pathMap = {
    "KNOWLEDGE_SOURCE": {
      d: "m {mx},{my} l 0,{e.y0} c {e.x0},{e.y1} {e.x1},-{e.y2} {e.x2},-{e.y3} c {e.x3},-{e.y4} {e.x4},{e.y5} {e.x5},{e.y6} l 0,-{e.y7}z",
      width: 100,
      height: 65,
      widthElements: [29.8, 48.4, 67.2, 12.2, 19.8, 30.8],
      heightElements: [55.3, 19.7, 4.2, 6.7, 2.3, 1.6, 6.2, 54.6]
    },
    "BUSINESS_KNOWLEDGE_MODEL": {
      d: "m {mx},{my} l {e.x0},-{e.y0} l {e.x1},0 l 0,{e.y1} l -{e.x2},{e.y2} l -{e.x3},0z",
      width: 125,
      height: 45,
      widthElements: [13.8, 109.2, 13.8, 109.1],
      heightElements: [13.2, 29.8, 13.2]
    },
    "TEXT_ANNOTATION": {
      d: "m {mx}, {my} m 10,0 l -10,0 l 0,{e.y0} l 10,0",
      width: 10,
      height: 30,
      widthElements: [10],
      heightElements: [30]
    }
  };
  this.getRawPath = function getRawPath(pathId) {
    return this.pathMap[pathId].d;
  };
  this.getScaledPath = function getScaledPath(pathId, param) {
    var rawPath = this.pathMap[pathId];
    var mx, my;
    if (param.abspos) {
      mx = param.abspos.x;
      my = param.abspos.y;
    } else {
      mx = param.containerWidth * param.position.mx;
      my = param.containerHeight * param.position.my;
    }
    var coordinates = {};
    if (param.position) {
      var heightRatio = param.containerHeight / rawPath.height * param.yScaleFactor;
      var widthRatio = param.containerWidth / rawPath.width * param.xScaleFactor;
      for (var heightIndex = 0; heightIndex < rawPath.heightElements.length; heightIndex++) {
        coordinates["y" + heightIndex] = rawPath.heightElements[heightIndex] * heightRatio;
      }
      for (var widthIndex = 0; widthIndex < rawPath.widthElements.length; widthIndex++) {
        coordinates["x" + widthIndex] = rawPath.widthElements[widthIndex] * widthRatio;
      }
    }
    var path = format(rawPath.d, {
      mx,
      my,
      e: coordinates
    });
    return path;
  };
}
var tokenRegex = /\{([^{}]+)\}/g;
var objNotationRegex = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g;
function replacer(all2, key, obj) {
  var res = obj;
  key.replace(objNotationRegex, function(all3, name2, quote, quotedName, isFunc) {
    name2 = name2 || quotedName;
    if (res) {
      if (name2 in res) {
        res = res[name2];
      }
      typeof res == "function" && isFunc && (res = res());
    }
  });
  res = (res == null || res == obj ? all2 : res) + "";
  return res;
}
function format(str, obj) {
  return String(str).replace(tokenRegex, function(all2, key) {
    return replacer(all2, key, obj);
  });
}

// node_modules/dmn-js-drd/lib/draw/index.js
var draw_default2 = {
  __init__: ["drdRenderer"],
  drdRenderer: ["type", DrdRenderer],
  textRenderer: ["type", TextRenderer],
  pathMap: ["type", PathMap]
};

// node_modules/dmn-js-drd/lib/import/DrdImporter.js
function DrdImporter(eventBus, canvas, elementFactory, elementRegistry) {
  this._eventBus = eventBus;
  this._canvas = canvas;
  this._elementRegistry = elementRegistry;
  this._elementFactory = elementFactory;
}
DrdImporter.$inject = ["eventBus", "canvas", "elementFactory", "elementRegistry"];
DrdImporter.prototype.root = function(semantic) {
  var element = this._elementFactory.createRoot(elementData(semantic));
  this._canvas.setRootElement(element);
  return element;
};
DrdImporter.prototype.add = function(semantic) {
  var elementFactory = this._elementFactory, canvas = this._canvas, eventBus = this._eventBus, di = semantic.di;
  var element, waypoints, source, target, elementDefinition, bounds;
  if (di.$instanceOf("dmndi:DMNShape")) {
    bounds = di.bounds;
    elementDefinition = elementData(semantic, {
      x: Math.round(bounds.x),
      y: Math.round(bounds.y),
      width: Math.round(bounds.width),
      height: Math.round(bounds.height)
    });
    element = elementFactory.createShape(elementDefinition);
    canvas.addShape(element);
    eventBus.fire("drdElement.added", {
      element,
      di
    });
  } else if (di.$instanceOf("dmndi:DMNEdge")) {
    waypoints = collectWaypoints(di);
    source = this._getSource(semantic);
    target = this._getTarget(semantic);
    if (source && target) {
      elementDefinition = elementData(semantic, {
        hidden: false,
        source,
        target,
        waypoints
      });
      element = elementFactory.createConnection(elementDefinition);
      canvas.addConnection(element);
      eventBus.fire("drdElement.added", {
        element,
        di
      });
    }
  } else {
    throw new Error("unknown di for element " + semantic.id);
  }
  return element;
};
DrdImporter.prototype._getSource = function(semantic) {
  var href, elementReference;
  if (is(semantic, "dmn:Association")) {
    elementReference = semantic.sourceRef;
  } else if (is(semantic, "dmn:InformationRequirement")) {
    elementReference = semantic.requiredDecision || semantic.requiredInput;
  } else if (is(semantic, "dmn:KnowledgeRequirement")) {
    elementReference = semantic.requiredKnowledge;
  } else if (is(semantic, "dmn:AuthorityRequirement")) {
    elementReference = semantic.requiredDecision || semantic.requiredInput || semantic.requiredAuthority;
  }
  if (elementReference) {
    href = elementReference.href;
  }
  if (href) {
    return this._getShape(getIdFromHref(href));
  }
};
DrdImporter.prototype._getTarget = function(semantic) {
  if (is(semantic, "dmn:Association")) {
    return semantic.targetRef && this._getShape(getIdFromHref(semantic.targetRef.href));
  }
  return this._getShape(semantic.$parent.id);
};
DrdImporter.prototype._getShape = function(id) {
  return this._elementRegistry.get(id);
};
function elementData(semantic, attrs) {
  return assign2({
    id: semantic.id,
    type: semantic.$type,
    businessObject: semantic
  }, attrs);
}
function collectWaypoints(edge) {
  var waypoints = edge.waypoint;
  if (waypoints) {
    return map(waypoints, function(waypoint) {
      var position = {
        x: waypoint.x,
        y: waypoint.y
      };
      return assign2({
        original: position
      }, position);
    });
  }
}
function getIdFromHref(href) {
  return href.split("#").pop();
}

// node_modules/dmn-js-drd/lib/import/index.js
var import_default = {
  drdImporter: ["type", DrdImporter]
};

// node_modules/dmn-js-drd/lib/core/index.js
var core_default2 = {
  __depends__: [draw_default2, import_default]
};

// node_modules/diagram-js/lib/i18n/translate/translate.js
function translate2(template, replacements) {
  replacements = replacements || {};
  return template.replace(/{([^}]+)}/g, function(_, key) {
    return replacements[key] || "{" + key + "}";
  });
}

// node_modules/diagram-js/lib/i18n/translate/index.js
var translate_default = {
  translate: ["value", translate2]
};

// node_modules/diagram-js/lib/util/Event.js
function getOriginal(event2) {
  return event2.originalEvent || event2.srcEvent;
}
function toPoint(event2) {
  if (event2.pointers && event2.pointers.length) {
    event2 = event2.pointers[0];
  }
  if (event2.touches && event2.touches.length) {
    event2 = event2.touches[0];
  }
  return event2 ? {
    x: event2.clientX,
    y: event2.clientY
  } : null;
}

// node_modules/diagram-js/lib/util/Platform.js
function isMac() {
  return /mac/i.test(navigator.platform);
}

// node_modules/diagram-js/lib/util/Mouse.js
function isButton(event2, button) {
  return (getOriginal(event2) || event2).button === button;
}
function isPrimaryButton(event2) {
  return isButton(event2, 0);
}
function isAuxiliaryButton(event2) {
  return isButton(event2, 1);
}
function hasPrimaryModifier(event2) {
  var originalEvent = getOriginal(event2) || event2;
  if (!isPrimaryButton(event2)) {
    return false;
  }
  if (isMac()) {
    return originalEvent.metaKey;
  } else {
    return originalEvent.ctrlKey;
  }
}
function hasSecondaryModifier(event2) {
  var originalEvent = getOriginal(event2) || event2;
  return isPrimaryButton(event2) && originalEvent.shiftKey;
}

// node_modules/diagram-js/lib/features/interaction-events/InteractionEvents.js
function allowAll(event2) {
  return true;
}
function allowPrimaryAndAuxiliary(event2) {
  return isPrimaryButton(event2) || isAuxiliaryButton(event2);
}
var LOW_PRIORITY = 500;
function InteractionEvents(eventBus, elementRegistry, styles) {
  var self2 = this;
  function fire(type, event2, element) {
    if (isIgnored(type, event2)) {
      return;
    }
    var target, gfx, returnValue;
    if (!element) {
      target = event2.delegateTarget || event2.target;
      if (target) {
        gfx = target;
        element = elementRegistry.get(gfx);
      }
    } else {
      gfx = elementRegistry.getGraphics(element);
    }
    if (!gfx || !element) {
      return;
    }
    returnValue = eventBus.fire(type, {
      element,
      gfx,
      originalEvent: event2
    });
    if (returnValue === false) {
      event2.stopPropagation();
      event2.preventDefault();
    }
  }
  var handlers = {};
  function mouseHandler(localEventName) {
    return handlers[localEventName];
  }
  function isIgnored(localEventName, event2) {
    var filter3 = ignoredFilters[localEventName] || isPrimaryButton;
    return !filter3(event2);
  }
  var bindings = {
    click: "element.click",
    contextmenu: "element.contextmenu",
    dblclick: "element.dblclick",
    mousedown: "element.mousedown",
    mousemove: "element.mousemove",
    mouseover: "element.hover",
    mouseout: "element.out",
    mouseup: "element.mouseup"
  };
  var ignoredFilters = {
    "element.contextmenu": allowAll,
    "element.mousedown": allowPrimaryAndAuxiliary,
    "element.mouseup": allowPrimaryAndAuxiliary,
    "element.click": allowPrimaryAndAuxiliary,
    "element.dblclick": allowPrimaryAndAuxiliary
  };
  function triggerMouseEvent(eventName, event2, targetElement) {
    var localEventName = bindings[eventName];
    if (!localEventName) {
      throw new Error("unmapped DOM event name <" + eventName + ">");
    }
    return fire(localEventName, event2, targetElement);
  }
  var ELEMENT_SELECTOR = "svg, .djs-element";
  function registerEvent(node2, event2, localEvent, ignoredFilter) {
    var handler = handlers[localEvent] = function(event3) {
      fire(localEvent, event3);
    };
    if (ignoredFilter) {
      ignoredFilters[localEvent] = ignoredFilter;
    }
    handler.$delegate = delegate2.bind(node2, ELEMENT_SELECTOR, event2, handler);
  }
  function unregisterEvent(node2, event2, localEvent) {
    var handler = mouseHandler(localEvent);
    if (!handler) {
      return;
    }
    delegate2.unbind(node2, event2, handler.$delegate);
  }
  function registerEvents(svg) {
    forEach(bindings, function(val, key) {
      registerEvent(svg, key, val);
    });
  }
  function unregisterEvents(svg) {
    forEach(bindings, function(val, key) {
      unregisterEvent(svg, key, val);
    });
  }
  eventBus.on("canvas.destroy", function(event2) {
    unregisterEvents(event2.svg);
  });
  eventBus.on("canvas.init", function(event2) {
    registerEvents(event2.svg);
  });
  eventBus.on(["shape.added", "connection.added"], function(event2) {
    var element = event2.element, gfx = event2.gfx;
    eventBus.fire("interactionEvents.createHit", { element, gfx });
  });
  eventBus.on([
    "shape.changed",
    "connection.changed"
  ], LOW_PRIORITY, function(event2) {
    var element = event2.element, gfx = event2.gfx;
    eventBus.fire("interactionEvents.updateHit", { element, gfx });
  });
  eventBus.on("interactionEvents.createHit", LOW_PRIORITY, function(event2) {
    var element = event2.element, gfx = event2.gfx;
    self2.createDefaultHit(element, gfx);
  });
  eventBus.on("interactionEvents.updateHit", function(event2) {
    var element = event2.element, gfx = event2.gfx;
    self2.updateDefaultHit(element, gfx);
  });
  var STROKE_HIT_STYLE = createHitStyle("djs-hit djs-hit-stroke");
  var CLICK_STROKE_HIT_STYLE = createHitStyle("djs-hit djs-hit-click-stroke");
  var ALL_HIT_STYLE = createHitStyle("djs-hit djs-hit-all");
  var NO_MOVE_HIT_STYLE = createHitStyle("djs-hit djs-hit-no-move");
  var HIT_TYPES = {
    "all": ALL_HIT_STYLE,
    "click-stroke": CLICK_STROKE_HIT_STYLE,
    "stroke": STROKE_HIT_STYLE,
    "no-move": NO_MOVE_HIT_STYLE
  };
  function createHitStyle(classNames2, attrs) {
    attrs = assign({
      stroke: "white",
      strokeWidth: 15
    }, attrs || {});
    return styles.cls(classNames2, ["no-fill", "no-border"], attrs);
  }
  function applyStyle(hit, type) {
    var attrs = HIT_TYPES[type];
    if (!attrs) {
      throw new Error("invalid hit type <" + type + ">");
    }
    attr2(hit, attrs);
    return hit;
  }
  function appendHit(gfx, hit) {
    append(gfx, hit);
  }
  this.removeHits = function(gfx) {
    var hits = all(".djs-hit", gfx);
    forEach(hits, remove2);
  };
  this.createDefaultHit = function(element, gfx) {
    var waypoints = element.waypoints, isFrame = element.isFrame, boxType;
    if (waypoints) {
      return this.createWaypointsHit(gfx, waypoints);
    } else {
      boxType = isFrame ? "stroke" : "all";
      return this.createBoxHit(gfx, boxType, {
        width: element.width,
        height: element.height
      });
    }
  };
  this.createWaypointsHit = function(gfx, waypoints) {
    var hit = createLine(waypoints);
    applyStyle(hit, "stroke");
    appendHit(gfx, hit);
    return hit;
  };
  this.createBoxHit = function(gfx, type, attrs) {
    attrs = assign({
      x: 0,
      y: 0
    }, attrs);
    var hit = create("rect");
    applyStyle(hit, type);
    attr2(hit, attrs);
    appendHit(gfx, hit);
    return hit;
  };
  this.updateDefaultHit = function(element, gfx) {
    var hit = query2(".djs-hit", gfx);
    if (!hit) {
      return;
    }
    if (element.waypoints) {
      updateLine(hit, element.waypoints);
    } else {
      attr2(hit, {
        width: element.width,
        height: element.height
      });
    }
    return hit;
  };
  this.fire = fire;
  this.triggerMouseEvent = triggerMouseEvent;
  this.mouseHandler = mouseHandler;
  this.registerEvent = registerEvent;
  this.unregisterEvent = unregisterEvent;
}
InteractionEvents.$inject = [
  "eventBus",
  "elementRegistry",
  "styles"
];

// node_modules/diagram-js/lib/features/interaction-events/index.js
var interaction_events_default = {
  __init__: ["interactionEvents"],
  interactionEvents: ["type", InteractionEvents]
};

// node_modules/diagram-js/lib/features/outline/Outline.js
var LOW_PRIORITY2 = 500;
function Outline(eventBus, styles, elementRegistry) {
  this.offset = 6;
  var OUTLINE_STYLE = styles.cls("djs-outline", ["no-fill"]);
  var self2 = this;
  function createOutline(gfx, bounds) {
    var outline = create("rect");
    attr2(outline, assign({
      x: 10,
      y: 10,
      rx: 3,
      width: 100,
      height: 100
    }, OUTLINE_STYLE));
    append(gfx, outline);
    return outline;
  }
  eventBus.on(["shape.added", "shape.changed"], LOW_PRIORITY2, function(event2) {
    var element = event2.element, gfx = event2.gfx;
    var outline = query2(".djs-outline", gfx);
    if (!outline) {
      outline = createOutline(gfx, element);
    }
    self2.updateShapeOutline(outline, element);
  });
  eventBus.on(["connection.added", "connection.changed"], function(event2) {
    var element = event2.element, gfx = event2.gfx;
    var outline = query2(".djs-outline", gfx);
    if (!outline) {
      outline = createOutline(gfx, element);
    }
    self2.updateConnectionOutline(outline, element);
  });
}
Outline.prototype.updateShapeOutline = function(outline, element) {
  attr2(outline, {
    x: -this.offset,
    y: -this.offset,
    width: element.width + this.offset * 2,
    height: element.height + this.offset * 2
  });
};
Outline.prototype.updateConnectionOutline = function(outline, connection) {
  var bbox = getBBox(connection);
  attr2(outline, {
    x: bbox.x - this.offset,
    y: bbox.y - this.offset,
    width: bbox.width + this.offset * 2,
    height: bbox.height + this.offset * 2
  });
};
Outline.$inject = ["eventBus", "styles", "elementRegistry"];

// node_modules/diagram-js/lib/features/outline/index.js
var outline_default = {
  __init__: ["outline"],
  outline: ["type", Outline]
};

// node_modules/diagram-js/lib/features/selection/Selection.js
function Selection(eventBus, canvas) {
  this._eventBus = eventBus;
  this._canvas = canvas;
  this._selectedElements = [];
  var self2 = this;
  eventBus.on(["shape.remove", "connection.remove"], function(e2) {
    var element = e2.element;
    self2.deselect(element);
  });
  eventBus.on(["diagram.clear", "root.set"], function(e2) {
    self2.select(null);
  });
}
Selection.$inject = ["eventBus", "canvas"];
Selection.prototype.deselect = function(element) {
  var selectedElements = this._selectedElements;
  var idx = selectedElements.indexOf(element);
  if (idx !== -1) {
    var oldSelection = selectedElements.slice();
    selectedElements.splice(idx, 1);
    this._eventBus.fire("selection.changed", { oldSelection, newSelection: selectedElements });
  }
};
Selection.prototype.get = function() {
  return this._selectedElements;
};
Selection.prototype.isSelected = function(element) {
  return this._selectedElements.indexOf(element) !== -1;
};
Selection.prototype.select = function(elements, add3) {
  var selectedElements = this._selectedElements, oldSelection = selectedElements.slice();
  if (!isArray(elements)) {
    elements = elements ? [elements] : [];
  }
  var canvas = this._canvas;
  var rootElement = canvas.getRootElement();
  elements = elements.filter(function(element) {
    var elementRoot = canvas.findRoot(element);
    return rootElement === elementRoot;
  });
  if (add3) {
    forEach(elements, function(element) {
      if (selectedElements.indexOf(element) !== -1) {
        return;
      } else {
        selectedElements.push(element);
      }
    });
  } else {
    this._selectedElements = selectedElements = elements.slice();
  }
  this._eventBus.fire("selection.changed", { oldSelection, newSelection: selectedElements });
};

// node_modules/diagram-js/lib/features/selection/SelectionVisuals.js
var MARKER_HOVER = "hover";
var MARKER_SELECTED = "selected";
var SELECTION_OUTLINE_PADDING = 6;
function SelectionVisuals(canvas, eventBus, selection) {
  this._canvas = canvas;
  var self2 = this;
  this._multiSelectionBox = null;
  function addMarker(e2, cls) {
    canvas.addMarker(e2, cls);
  }
  function removeMarker(e2, cls) {
    canvas.removeMarker(e2, cls);
  }
  eventBus.on("element.hover", function(event2) {
    addMarker(event2.element, MARKER_HOVER);
  });
  eventBus.on("element.out", function(event2) {
    removeMarker(event2.element, MARKER_HOVER);
  });
  eventBus.on("selection.changed", function(event2) {
    function deselect(s) {
      removeMarker(s, MARKER_SELECTED);
    }
    function select(s) {
      addMarker(s, MARKER_SELECTED);
    }
    var oldSelection = event2.oldSelection, newSelection = event2.newSelection;
    forEach(oldSelection, function(e2) {
      if (newSelection.indexOf(e2) === -1) {
        deselect(e2);
      }
    });
    forEach(newSelection, function(e2) {
      if (oldSelection.indexOf(e2) === -1) {
        select(e2);
      }
    });
    self2._updateSelectionOutline(newSelection);
  });
  eventBus.on("element.changed", function(event2) {
    if (selection.isSelected(event2.element)) {
      self2._updateSelectionOutline(selection.get());
    }
  });
}
SelectionVisuals.$inject = [
  "canvas",
  "eventBus",
  "selection"
];
SelectionVisuals.prototype._updateSelectionOutline = function(selection) {
  var layer = this._canvas.getLayer("selectionOutline");
  clear(layer);
  var enabled = selection.length > 1;
  var container = this._canvas.getContainer();
  classes2(container)[enabled ? "add" : "remove"]("djs-multi-select");
  if (!enabled) {
    return;
  }
  var bBox = addSelectionOutlinePadding(getBBox(selection));
  var rect = create("rect");
  attr2(rect, assign({
    rx: 3
  }, bBox));
  classes2(rect).add("djs-selection-outline");
  append(layer, rect);
};
function addSelectionOutlinePadding(bBox) {
  return {
    x: bBox.x - SELECTION_OUTLINE_PADDING,
    y: bBox.y - SELECTION_OUTLINE_PADDING,
    width: bBox.width + SELECTION_OUTLINE_PADDING * 2,
    height: bBox.height + SELECTION_OUTLINE_PADDING * 2
  };
}

// node_modules/diagram-js/lib/features/selection/SelectionBehavior.js
function SelectionBehavior(eventBus, selection, canvas, elementRegistry) {
  eventBus.on("create.end", 500, function(event2) {
    var context = event2.context, canExecute = context.canExecute, elements = context.elements, hints = context.hints || {}, autoSelect = hints.autoSelect;
    if (canExecute) {
      if (autoSelect === false) {
        return;
      }
      if (isArray(autoSelect)) {
        selection.select(autoSelect);
      } else {
        selection.select(elements.filter(isShown));
      }
    }
  });
  eventBus.on("connect.end", 500, function(event2) {
    var context = event2.context, connection = context.connection;
    if (connection) {
      selection.select(connection);
    }
  });
  eventBus.on("shape.move.end", 500, function(event2) {
    var previousSelection = event2.previousSelection || [];
    var shape = elementRegistry.get(event2.context.shape.id);
    var isSelected = find(previousSelection, function(selectedShape) {
      return shape.id === selectedShape.id;
    });
    if (!isSelected) {
      selection.select(shape);
    }
  });
  eventBus.on("element.click", function(event2) {
    if (!isPrimaryButton(event2)) {
      return;
    }
    var element = event2.element;
    if (element === canvas.getRootElement()) {
      element = null;
    }
    var isSelected = selection.isSelected(element), isMultiSelect = selection.get().length > 1;
    var add3 = hasPrimaryModifier(event2) || hasSecondaryModifier(event2);
    if (isSelected && isMultiSelect) {
      if (add3) {
        return selection.deselect(element);
      } else {
        return selection.select(element);
      }
    } else if (!isSelected) {
      selection.select(element, add3);
    } else {
      selection.deselect(element);
    }
  });
}
SelectionBehavior.$inject = [
  "eventBus",
  "selection",
  "canvas",
  "elementRegistry"
];
function isShown(element) {
  return !element.hidden;
}

// node_modules/diagram-js/lib/features/selection/index.js
var selection_default = {
  __init__: ["selectionVisuals", "selectionBehavior"],
  __depends__: [
    interaction_events_default,
    outline_default
  ],
  selection: ["type", Selection],
  selectionVisuals: ["type", SelectionVisuals],
  selectionBehavior: ["type", SelectionBehavior]
};

// node_modules/diagram-js/lib/util/IdGenerator.js
function IdGenerator(prefix4) {
  this._counter = 0;
  this._prefix = (prefix4 ? prefix4 + "-" : "") + Math.floor(Math.random() * 1e9) + "-";
}
IdGenerator.prototype.next = function() {
  return this._prefix + ++this._counter;
};

// node_modules/diagram-js/lib/features/overlays/Overlays.js
var ids = new IdGenerator("ov");
var LOW_PRIORITY3 = 500;
function Overlays(config, eventBus, canvas, elementRegistry) {
  this._eventBus = eventBus;
  this._canvas = canvas;
  this._elementRegistry = elementRegistry;
  this._ids = ids;
  this._overlayDefaults = assign({
    show: null,
    scale: true
  }, config && config.defaults);
  this._overlays = {};
  this._overlayContainers = [];
  this._overlayRoot = createRoot(canvas.getContainer());
  this._init();
}
Overlays.$inject = [
  "config.overlays",
  "eventBus",
  "canvas",
  "elementRegistry"
];
Overlays.prototype.get = function(search) {
  if (isString(search)) {
    search = { id: search };
  }
  if (isString(search.element)) {
    search.element = this._elementRegistry.get(search.element);
  }
  if (search.element) {
    var container = this._getOverlayContainer(search.element, true);
    if (container) {
      return search.type ? filter(container.overlays, matchPattern({ type: search.type })) : container.overlays.slice();
    } else {
      return [];
    }
  } else if (search.type) {
    return filter(this._overlays, matchPattern({ type: search.type }));
  } else {
    return search.id ? this._overlays[search.id] : null;
  }
};
Overlays.prototype.add = function(element, type, overlay) {
  if (isObject(type)) {
    overlay = type;
    type = null;
  }
  if (!element.id) {
    element = this._elementRegistry.get(element);
  }
  if (!overlay.position) {
    throw new Error("must specifiy overlay position");
  }
  if (!overlay.html) {
    throw new Error("must specifiy overlay html");
  }
  if (!element) {
    throw new Error("invalid element specified");
  }
  var id = this._ids.next();
  overlay = assign({}, this._overlayDefaults, overlay, {
    id,
    type,
    element,
    html: overlay.html
  });
  this._addOverlay(overlay);
  return id;
};
Overlays.prototype.remove = function(filter3) {
  var overlays = this.get(filter3) || [];
  if (!isArray(overlays)) {
    overlays = [overlays];
  }
  var self2 = this;
  forEach(overlays, function(overlay) {
    var container = self2._getOverlayContainer(overlay.element, true);
    if (overlay) {
      remove3(overlay.html);
      remove3(overlay.htmlContainer);
      delete overlay.htmlContainer;
      delete overlay.element;
      delete self2._overlays[overlay.id];
    }
    if (container) {
      var idx = container.overlays.indexOf(overlay);
      if (idx !== -1) {
        container.overlays.splice(idx, 1);
      }
    }
  });
};
Overlays.prototype.show = function() {
  setVisible(this._overlayRoot);
};
Overlays.prototype.hide = function() {
  setVisible(this._overlayRoot, false);
};
Overlays.prototype.clear = function() {
  this._overlays = {};
  this._overlayContainers = [];
  clear2(this._overlayRoot);
};
Overlays.prototype._updateOverlayContainer = function(container) {
  var element = container.element, html = container.html;
  var x = element.x, y = element.y;
  if (element.waypoints) {
    var bbox = getBBox(element);
    x = bbox.x;
    y = bbox.y;
  }
  setPosition(html, x, y);
  attr3(container.html, "data-container-id", element.id);
};
Overlays.prototype._updateOverlay = function(overlay) {
  var position = overlay.position, htmlContainer = overlay.htmlContainer, element = overlay.element;
  var left = position.left, top = position.top;
  if (position.right !== void 0) {
    var width;
    if (element.waypoints) {
      width = getBBox(element).width;
    } else {
      width = element.width;
    }
    left = position.right * -1 + width;
  }
  if (position.bottom !== void 0) {
    var height;
    if (element.waypoints) {
      height = getBBox(element).height;
    } else {
      height = element.height;
    }
    top = position.bottom * -1 + height;
  }
  setPosition(htmlContainer, left || 0, top || 0);
  this._updateOverlayVisibilty(overlay, this._canvas.viewbox());
};
Overlays.prototype._createOverlayContainer = function(element) {
  var html = domify$1('<div class="djs-overlays" />');
  assign3(html, { position: "absolute" });
  this._overlayRoot.appendChild(html);
  var container = {
    html,
    element,
    overlays: []
  };
  this._updateOverlayContainer(container);
  this._overlayContainers.push(container);
  return container;
};
Overlays.prototype._updateRoot = function(viewbox) {
  var scale = viewbox.scale || 1;
  var matrix = "matrix(" + [
    scale,
    0,
    0,
    scale,
    -1 * viewbox.x * scale,
    -1 * viewbox.y * scale
  ].join(",") + ")";
  setTransform(this._overlayRoot, matrix);
};
Overlays.prototype._getOverlayContainer = function(element, raw) {
  var container = find(this._overlayContainers, function(c) {
    return c.element === element;
  });
  if (!container && !raw) {
    return this._createOverlayContainer(element);
  }
  return container;
};
Overlays.prototype._addOverlay = function(overlay) {
  var id = overlay.id, element = overlay.element, html = overlay.html, htmlContainer, overlayContainer;
  if (html.get && html.constructor.prototype.jquery) {
    html = html.get(0);
  }
  if (isString(html)) {
    html = domify$1(html);
  }
  overlayContainer = this._getOverlayContainer(element);
  htmlContainer = domify$1('<div class="djs-overlay" data-overlay-id="' + id + '">');
  assign3(htmlContainer, { position: "absolute" });
  htmlContainer.appendChild(html);
  if (overlay.type) {
    classes3(htmlContainer).add("djs-overlay-" + overlay.type);
  }
  var elementRoot = this._canvas.findRoot(element);
  var activeRoot = this._canvas.getRootElement();
  setVisible(htmlContainer, elementRoot === activeRoot);
  overlay.htmlContainer = htmlContainer;
  overlayContainer.overlays.push(overlay);
  overlayContainer.html.appendChild(htmlContainer);
  this._overlays[id] = overlay;
  this._updateOverlay(overlay);
  this._updateOverlayVisibilty(overlay, this._canvas.viewbox());
};
Overlays.prototype._updateOverlayVisibilty = function(overlay, viewbox) {
  var show = overlay.show, rootElement = this._canvas.findRoot(overlay.element), minZoom = show && show.minZoom, maxZoom = show && show.maxZoom, htmlContainer = overlay.htmlContainer, activeRootElement = this._canvas.getRootElement(), visible = true;
  if (rootElement !== activeRootElement) {
    visible = false;
  } else if (show) {
    if (isDefined(minZoom) && minZoom > viewbox.scale || isDefined(maxZoom) && maxZoom < viewbox.scale) {
      visible = false;
    }
  }
  setVisible(htmlContainer, visible);
  this._updateOverlayScale(overlay, viewbox);
};
Overlays.prototype._updateOverlayScale = function(overlay, viewbox) {
  var shouldScale = overlay.scale, minScale, maxScale, htmlContainer = overlay.htmlContainer;
  var scale, transform2 = "";
  if (shouldScale !== true) {
    if (shouldScale === false) {
      minScale = 1;
      maxScale = 1;
    } else {
      minScale = shouldScale.min;
      maxScale = shouldScale.max;
    }
    if (isDefined(minScale) && viewbox.scale < minScale) {
      scale = (1 / viewbox.scale || 1) * minScale;
    }
    if (isDefined(maxScale) && viewbox.scale > maxScale) {
      scale = (1 / viewbox.scale || 1) * maxScale;
    }
  }
  if (isDefined(scale)) {
    transform2 = "scale(" + scale + "," + scale + ")";
  }
  setTransform(htmlContainer, transform2);
};
Overlays.prototype._updateOverlaysVisibilty = function(viewbox) {
  var self2 = this;
  forEach(this._overlays, function(overlay) {
    self2._updateOverlayVisibilty(overlay, viewbox);
  });
};
Overlays.prototype._init = function() {
  var eventBus = this._eventBus;
  var self2 = this;
  function updateViewbox(viewbox) {
    self2._updateRoot(viewbox);
    self2._updateOverlaysVisibilty(viewbox);
    self2.show();
  }
  eventBus.on("canvas.viewbox.changing", function(event2) {
    self2.hide();
  });
  eventBus.on("canvas.viewbox.changed", function(event2) {
    updateViewbox(event2.viewbox);
  });
  eventBus.on(["shape.remove", "connection.remove"], function(e2) {
    var element = e2.element;
    var overlays = self2.get({ element });
    forEach(overlays, function(o) {
      self2.remove(o.id);
    });
    var container = self2._getOverlayContainer(element);
    if (container) {
      remove3(container.html);
      var i = self2._overlayContainers.indexOf(container);
      if (i !== -1) {
        self2._overlayContainers.splice(i, 1);
      }
    }
  });
  eventBus.on("element.changed", LOW_PRIORITY3, function(e2) {
    var element = e2.element;
    var container = self2._getOverlayContainer(element, true);
    if (container) {
      forEach(container.overlays, function(overlay) {
        self2._updateOverlay(overlay);
      });
      self2._updateOverlayContainer(container);
    }
  });
  eventBus.on("element.marker.update", function(e2) {
    var container = self2._getOverlayContainer(e2.element, true);
    if (container) {
      classes3(container.html)[e2.add ? "add" : "remove"](e2.marker);
    }
  });
  eventBus.on("root.set", function() {
    self2._updateOverlaysVisibilty(self2._canvas.viewbox());
  });
  eventBus.on("diagram.clear", this.clear, this);
};
function createRoot(parentNode) {
  var root = domify$1('<div class="djs-overlay-container" />');
  assign3(root, {
    position: "absolute",
    width: 0,
    height: 0
  });
  parentNode.insertBefore(root, parentNode.firstChild);
  return root;
}
function setPosition(el, x, y) {
  assign3(el, { left: x + "px", top: y + "px" });
}
function setVisible(el, visible) {
  el.style.display = visible === false ? "none" : "";
}
function setTransform(el, transform2) {
  el.style["transform-origin"] = "top left";
  ["", "-ms-", "-webkit-"].forEach(function(prefix4) {
    el.style[prefix4 + "transform"] = transform2;
  });
}

// node_modules/diagram-js/lib/features/overlays/index.js
var overlays_default = {
  __init__: ["overlays"],
  overlays: ["type", Overlays]
};

// node_modules/dmn-js-drd/lib/features/definition-properties/DefinitionPropertiesView.js
function DefinitionPropertiesView(eventBus, canvas, translate3) {
  this._eventBus = eventBus;
  this._canvas = canvas;
  this._translate = translate3;
  eventBus.on("diagram.init", function() {
    this._init();
  }, this);
  eventBus.on("import.done", function(event2) {
    if (!event2.error) {
      this.update();
    }
  }, this);
  this.HTML_MARKUP = '<div class="dmn-definitions"><div class="dmn-definitions-name" title="' + this._translate("Definition Name") + '" spellcheck="false"></div><div class="dmn-definitions-id" title="' + this._translate("Definition ID") + '" spellcheck="false"></div></div>';
}
DefinitionPropertiesView.$inject = ["eventBus", "canvas", "translate"];
DefinitionPropertiesView.prototype._init = function() {
  var canvas = this._canvas, eventBus = this._eventBus;
  var parent = canvas.getContainer(), container = this._container = domify(this.HTML_MARKUP);
  parent.appendChild(container);
  this.nameElement = query(".dmn-definitions-name", this._container);
  this.idElement = query(".dmn-definitions-id", this._container);
  delegate.bind(container, ".dmn-definitions-name, .dmn-definitions-id", "mousedown", function(event2) {
    event2.stopPropagation();
  });
  eventBus.fire("definitionIdView.create", {
    html: container
  });
};
DefinitionPropertiesView.prototype.update = function() {
  var businessObject = this._canvas.getRootElement().businessObject;
  this.nameElement.textContent = businessObject.name;
  this.idElement.textContent = businessObject.id;
};

// node_modules/dmn-js-drd/lib/features/definition-properties/PaletteAdapter.js
function PaletteAdapter(eventBus, canvas) {
  function toggleMarker(cls, on) {
    var container = canvas.getContainer();
    classes(container).toggle(cls, on);
  }
  eventBus.on("palette.create", function() {
    toggleMarker("with-palette", true);
  });
  eventBus.on("palette.changed", function(event2) {
    toggleMarker("with-palette-two-column", event2.twoColumn);
  });
}
PaletteAdapter.$inject = ["eventBus", "canvas"];

// node_modules/dmn-js-drd/lib/features/definition-properties/viewer.js
var viewer_default = {
  __depends__: [translate_default],
  __init__: ["definitionPropertiesView", "definitionPropertiesPaletteAdapter"],
  definitionPropertiesView: ["type", DefinitionPropertiesView],
  definitionPropertiesPaletteAdapter: ["type", PaletteAdapter]
};

// node_modules/dmn-js-drd/lib/features/drill-down/DrillDown.js
var PROVIDERS = [{
  className: "dmn-icon-decision-table",
  matches: function matches2(el) {
    var businessObject = el.businessObject;
    return is(businessObject, "dmn:Decision") && is(businessObject.decisionLogic, "dmn:DecisionTable");
  }
}, {
  className: "dmn-icon-literal-expression",
  matches: function matches3(el) {
    var businessObject = el.businessObject;
    return is(businessObject, "dmn:Decision") && is(businessObject.decisionLogic, "dmn:LiteralExpression");
  }
}];
var DrillDown = class {
  constructor(injector, eventBus, overlays, config) {
    this._injector = injector;
    this._eventBus = eventBus;
    this._overlays = overlays;
    this._config = config || {
      enabled: true
    };
    eventBus.on(["shape.added"], (_ref) => {
      let element = _ref.element;
      for (let i = 0; i < PROVIDERS.length; i++) {
        const _PROVIDERS$i = PROVIDERS[i], matches4 = _PROVIDERS$i.matches, className = _PROVIDERS$i.className;
        var editable = matches4 && matches4(element);
        if (editable) {
          this.addOverlay(element, className);
        }
      }
    });
  }
  addOverlay(element, className) {
    const html = domify('\n      <div class="drill-down-overlay">\n        <span class="'.concat(className, '"></span>\n      </div>\n    '));
    const overlayId = this._overlays.add(element, {
      position: {
        top: 2,
        left: 2
      },
      html
    });
    if (this._config.enabled !== false) {
      classes(html).add("interactive");
      this.bindEventListener(element, html, overlayId);
    }
  }
  bindEventListener(element, overlay, id) {
    const overlays = this._overlays, eventBus = this._eventBus;
    const overlaysRoot = overlays._overlayRoot;
    delegate.bind(overlaysRoot, '[data-overlay-id="' + id + '"]', "click", () => {
      const triggerDefault = eventBus.fire("drillDown.click", {
        element
      });
      if (triggerDefault === false) {
        return;
      }
      this.drillDown(element);
    });
  }
  drillDown(element) {
    const parent = this._injector.get("_parent", false);
    if (!parent) {
      return false;
    }
    const view = parent.getView(element.businessObject);
    if (!view) {
      return false;
    }
    parent.open(view);
    return true;
  }
};
DrillDown.$inject = ["injector", "eventBus", "overlays", "config.drillDown"];

// node_modules/dmn-js-drd/lib/features/drill-down/index.js
var drill_down_default = {
  __depends__: [overlays_default],
  __init__: ["drillDown"],
  drillDown: ["type", DrillDown]
};

// node_modules/dmn-js-drd/lib/util/PoweredByUtil.js
var BPMNIO_LOGO_SVG = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14.02 5.57" width="53" height="21" style="vertical-align:middle"><path fill="#000000" d="M1.88.92v.14c0 .41-.13.68-.4.8.33.14.46.44.46.86v.33c0 .61-.33.95-.95.95H0V0h.95c.65 0 .93.3.93.92zM.63.57v1.06h.24c.24 0 .38-.1.38-.43V.98c0-.28-.1-.4-.32-.4zm0 1.63v1.22h.36c.2 0 .32-.1.32-.39v-.35c0-.37-.12-.48-.4-.48H.63zM4.18.99v.52c0 .64-.31.98-.94.98h-.3V4h-.62V0h.92c.63 0 .94.35.94.99zM2.94.57v1.35h.3c.2 0 .3-.09.3-.37v-.6c0-.29-.1-.38-.3-.38h-.3zm2.89 2.27L6.25 0h.88v4h-.6V1.12L6.1 3.99h-.6l-.46-2.82v2.82h-.55V0h.87zM8.14 1.1V4h-.56V0h.79L9 2.4V0h.56v4h-.64zm2.49 2.29v.6h-.6v-.6zM12.12 1c0-.63.33-1 .95-1 .61 0 .95.37.95 1v2.04c0 .64-.34 1-.95 1-.62 0-.95-.37-.95-1zm.62 2.08c0 .28.13.39.33.39s.32-.1.32-.4V.98c0-.29-.12-.4-.32-.4s-.33.11-.33.4z"/><path fill="#000000" d="M0 4.53h14.02v1.04H0zM11.08 0h.63v.62h-.63zm.63 4V1h-.63v2.98z"/></svg>';
var BPMNIO_IMG = BPMNIO_LOGO_SVG;
function css(attrs) {
  return attrs.join(";");
}
var LIGHTBOX_STYLES = css(["z-index: 1001", "position: fixed", "top: 0", "left: 0", "right: 0", "bottom: 0"]);
var BACKDROP_STYLES = css(["width: 100%", "height: 100%", "background: rgba(40,40,40,0.2)"]);
var NOTICE_STYLES = css(["position: absolute", "left: 50%", "top: 40%", "transform: translate(-50%)", "width: 260px", "padding: 10px", "background: white", "box-shadow: 0 1px 4px rgba(0,0,0,0.3)", "font-family: Helvetica, Arial, sans-serif", "font-size: 14px", "display: flex", "line-height: 1.3"]);
var LIGHTBOX_MARKUP = '<div class="bjs-powered-by-lightbox" style="' + LIGHTBOX_STYLES + '"><div class="backdrop" style="' + BACKDROP_STYLES + '"></div><div class="notice" style="' + NOTICE_STYLES + '"><a href="https://bpmn.io" target="_blank" rel="noopener" style="margin: 15px 20px 15px 10px; align-self: center;">' + BPMNIO_IMG + '</a><span>Web-based tooling for BPMN, DMN and CMMN diagrams powered by <a href="https://bpmn.io" target="_blank" rel="noopener">bpmn.io</a>.</span></div></div>';
var lightbox;
function open() {
  if (!lightbox) {
    lightbox = domify(LIGHTBOX_MARKUP);
    delegate.bind(lightbox, ".backdrop", "click", function(event2) {
      document.body.removeChild(lightbox);
    });
  }
  document.body.appendChild(lightbox);
}

// node_modules/dmn-js-drd/lib/Viewer.js
var _excluded = ["additionalModules", "canvas"];
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function Viewer(options2) {
  this._container = this._createContainer();
  addProjectLogo(this._container);
  this._init(this._container, options2);
}
e(Viewer, Diagram);
Viewer.prototype.saveSVG = wrapForCompatibility(function(options2) {
  var self2 = this;
  return new Promise(function(resolve) {
    var canvas = self2.get("canvas");
    var contentNode = canvas.getActiveLayer(), defsNode = query("defs", canvas._svg);
    var contents = innerSVG(contentNode), defs = defsNode && defsNode.outerHTML || "";
    var bbox = contentNode.getBBox();
    var svg = '<?xml version="1.0" encoding="utf-8"?>\n<!-- created with dmn-js / http://bpmn.io -->\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="' + bbox.width + '" height="' + bbox.height + '" viewBox="' + bbox.x + " " + bbox.y + " " + bbox.width + " " + bbox.height + '" version="1.1">' + defs + contents + "</svg>";
    resolve({
      svg
    });
  });
});
Viewer.prototype.getModules = function() {
  return this._modules;
};
Viewer.prototype.destroy = function() {
  Diagram.prototype.destroy.call(this);
  remove(this._container);
};
Viewer.prototype.on = function(event2, priority, callback, target) {
  return this.get("eventBus").on(event2, priority, callback, target);
};
Viewer.prototype.off = function(event2, callback) {
  this.get("eventBus").off(event2, callback);
};
Viewer.prototype._init = function(container, options2) {
  var additionalModules = options2.additionalModules, canvas = options2.canvas, additionalOptions = _objectWithoutProperties(options2, _excluded);
  var baseModules = options2.modules || this.getModules(), staticModules = [{
    drd: ["value", this]
  }];
  var modules = [...staticModules, ...baseModules, ...additionalModules || []];
  var diagramOptions = _objectSpread2(_objectSpread2({}, additionalOptions), {}, {
    canvas: _objectSpread2(_objectSpread2({}, canvas), {}, {
      container
    }),
    modules
  });
  Diagram.call(this, diagramOptions);
  if (options2 && options2.container) {
    this.attachTo(options2.container);
  }
};
Viewer.prototype._emit = function(type, event2) {
  return this.get("eventBus").fire(type, event2);
};
Viewer.prototype._createContainer = function() {
  return domify('<div class="dmn-drd-container"></div>');
};
Viewer.prototype.open = function(definitions) {
  var self2 = this;
  return new Promise((resolve, reject) => {
    var err;
    try {
      if (self2._definitions) {
        self2.clear();
      }
      self2._definitions = definitions;
      return importDRD(self2, definitions, function(err2, warnings) {
        if (err2) {
          err2.warnings = warnings || [];
          reject(err2);
        } else {
          resolve({
            warnings: warnings || []
          });
        }
      });
    } catch (e2) {
      err = e2;
    }
    if (err) {
      err.warnings = err.warnings || [];
      reject(err);
    } else {
      resolve({
        warnings: []
      });
    }
  });
};
Viewer.prototype.attachTo = function(parentNode) {
  if (!parentNode) {
    throw new Error("parentNode required");
  }
  this.detach();
  var container = this._container;
  parentNode.appendChild(container);
  this._emit("attach", {});
  this.get("canvas").resized();
};
Viewer.prototype.detach = function() {
  var container = this._container, parentNode = container.parentNode;
  if (!parentNode) {
    return;
  }
  this._emit("detach", {});
  parentNode.removeChild(container);
};
Viewer.prototype._modules = [core_default2, translate_default, selection_default, overlays_default, viewer_default, drill_down_default];
function addProjectLogo(container) {
  var linkMarkup = '<a href="http://bpmn.io" target="_blank" class="bjs-powered-by" title="Powered by bpmn.io" style="position: absolute; bottom: 15px; right: 15px; z-index: 100;">' + BPMNIO_IMG + "</a>";
  var linkElement = domify(linkMarkup);
  container.appendChild(linkElement);
  componentEvent.bind(linkElement, "click", function(event2) {
    open();
    event2.preventDefault();
  });
}

// node_modules/diagram-js/lib/util/PositionUtil.js
function delta(a, b) {
  return {
    x: a.x - b.x,
    y: a.y - b.y
  };
}

// node_modules/diagram-js/lib/util/Math.js
function log10(x) {
  return Math.log(x) / Math.log(10);
}

// node_modules/diagram-js/lib/navigation/zoomscroll/ZoomUtil.js
function getStepSize(range, steps) {
  var minLinearRange = log10(range.min), maxLinearRange = log10(range.max);
  var absoluteLinearRange = Math.abs(minLinearRange) + Math.abs(maxLinearRange);
  return absoluteLinearRange / steps;
}
function cap(range, scale) {
  return Math.max(range.min, Math.min(range.max, scale));
}

// node_modules/diagram-js/lib/navigation/zoomscroll/ZoomScroll.js
var sign = Math.sign || function(n) {
  return n >= 0 ? 1 : -1;
};
var RANGE = { min: 0.2, max: 4 };
var NUM_STEPS = 10;
var DELTA_THRESHOLD = 0.1;
var DEFAULT_SCALE = 0.75;
function ZoomScroll(config, eventBus, canvas) {
  config = config || {};
  this._enabled = false;
  this._canvas = canvas;
  this._container = canvas._container;
  this._handleWheel = bind(this._handleWheel, this);
  this._totalDelta = 0;
  this._scale = config.scale || DEFAULT_SCALE;
  var self2 = this;
  eventBus.on("canvas.init", function(e2) {
    self2._init(config.enabled !== false);
  });
}
ZoomScroll.$inject = [
  "config.zoomScroll",
  "eventBus",
  "canvas"
];
ZoomScroll.prototype.scroll = function scroll(delta2) {
  this._canvas.scroll(delta2);
};
ZoomScroll.prototype.reset = function reset() {
  this._canvas.zoom("fit-viewport");
};
ZoomScroll.prototype.zoom = function zoom(delta2, position) {
  var stepSize = getStepSize(RANGE, NUM_STEPS * 2);
  this._totalDelta += delta2;
  if (Math.abs(this._totalDelta) > DELTA_THRESHOLD) {
    this._zoom(delta2, position, stepSize);
    this._totalDelta = 0;
  }
};
ZoomScroll.prototype._handleWheel = function handleWheel(event2) {
  if (closest2(event2.target, ".djs-scrollable", true)) {
    return;
  }
  var element = this._container;
  event2.preventDefault();
  var isZoom = event2.ctrlKey;
  var isHorizontalScroll = event2.shiftKey;
  var factor = -1 * this._scale, delta2;
  if (isZoom) {
    factor *= event2.deltaMode === 0 ? 0.02 : 0.32;
  } else {
    factor *= event2.deltaMode === 0 ? 1 : 16;
  }
  if (isZoom) {
    var elementRect = element.getBoundingClientRect();
    var offset = {
      x: event2.clientX - elementRect.left,
      y: event2.clientY - elementRect.top
    };
    delta2 = Math.sqrt(Math.pow(event2.deltaY, 2) + Math.pow(event2.deltaX, 2)) * sign(event2.deltaY) * factor;
    this.zoom(delta2, offset);
  } else {
    if (isHorizontalScroll) {
      delta2 = {
        dx: factor * event2.deltaY,
        dy: 0
      };
    } else {
      delta2 = {
        dx: factor * event2.deltaX,
        dy: factor * event2.deltaY
      };
    }
    this.scroll(delta2);
  }
};
ZoomScroll.prototype.stepZoom = function stepZoom(delta2, position) {
  var stepSize = getStepSize(RANGE, NUM_STEPS);
  this._zoom(delta2, position, stepSize);
};
ZoomScroll.prototype._zoom = function(delta2, position, stepSize) {
  var canvas = this._canvas;
  var direction = delta2 > 0 ? 1 : -1;
  var currentLinearZoomLevel = log10(canvas.zoom());
  var newLinearZoomLevel = Math.round(currentLinearZoomLevel / stepSize) * stepSize;
  newLinearZoomLevel += stepSize * direction;
  var newLogZoomLevel = Math.pow(10, newLinearZoomLevel);
  canvas.zoom(cap(RANGE, newLogZoomLevel), position);
};
ZoomScroll.prototype.toggle = function toggle(newEnabled) {
  var element = this._container;
  var handleWheel2 = this._handleWheel;
  var oldEnabled = this._enabled;
  if (typeof newEnabled === "undefined") {
    newEnabled = !oldEnabled;
  }
  if (oldEnabled !== newEnabled) {
    event[newEnabled ? "bind" : "unbind"](element, "wheel", handleWheel2, false);
  }
  this._enabled = newEnabled;
  return newEnabled;
};
ZoomScroll.prototype._init = function(newEnabled) {
  this.toggle(newEnabled);
};

// node_modules/diagram-js/lib/navigation/zoomscroll/index.js
var zoomscroll_default = {
  __init__: ["zoomScroll"],
  zoomScroll: ["type", ZoomScroll]
};

// node_modules/diagram-js/lib/util/Cursor.js
var CURSOR_CLS_PATTERN = /^djs-cursor-.*$/;
function set2(mode) {
  var classes4 = classes3(document.body);
  classes4.removeMatching(CURSOR_CLS_PATTERN);
  if (mode) {
    classes4.add("djs-cursor-" + mode);
  }
}
function unset() {
  set2(null);
}

// node_modules/diagram-js/lib/util/ClickTrap.js
var TRAP_PRIORITY = 5e3;
function install(eventBus, eventName) {
  eventName = eventName || "element.click";
  function trap() {
    return false;
  }
  eventBus.once(eventName, TRAP_PRIORITY, trap);
  return function() {
    eventBus.off(eventName, trap);
  };
}

// node_modules/diagram-js/lib/navigation/movecanvas/MoveCanvas.js
var THRESHOLD = 15;
function MoveCanvas(eventBus, canvas) {
  var context;
  eventBus.on("element.mousedown", 500, function(e2) {
    return handleStart(e2.originalEvent);
  });
  function handleMove(event2) {
    var start = context.start, button = context.button, position = toPoint(event2), delta2 = delta(position, start);
    if (!context.dragging && length(delta2) > THRESHOLD) {
      context.dragging = true;
      if (button === 0) {
        install(eventBus);
      }
      set2("grab");
    }
    if (context.dragging) {
      var lastPosition = context.last || context.start;
      delta2 = delta(position, lastPosition);
      canvas.scroll({
        dx: delta2.x,
        dy: delta2.y
      });
      context.last = position;
    }
    event2.preventDefault();
  }
  function handleEnd(event2) {
    event.unbind(document, "mousemove", handleMove);
    event.unbind(document, "mouseup", handleEnd);
    context = null;
    unset();
  }
  function handleStart(event2) {
    if (closest2(event2.target, ".djs-draggable")) {
      return;
    }
    var button = event2.button;
    if (button >= 2 || event2.ctrlKey || event2.shiftKey || event2.altKey) {
      return;
    }
    context = {
      button,
      start: toPoint(event2)
    };
    event.bind(document, "mousemove", handleMove);
    event.bind(document, "mouseup", handleEnd);
    return true;
  }
  this.isActive = function() {
    return !!context;
  };
}
MoveCanvas.$inject = [
  "eventBus",
  "canvas"
];
function length(point) {
  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
}

// node_modules/diagram-js/lib/navigation/movecanvas/index.js
var movecanvas_default = {
  __init__: ["moveCanvas"],
  moveCanvas: ["type", MoveCanvas]
};

// node_modules/diagram-js/lib/features/touch/TouchInteractionEvents.js
var import_hammerjs = __toESM(require_hammer());
var MIN_ZOOM = 0.2;
var MAX_ZOOM = 4;
var mouseEvents = [
  "mousedown",
  "mouseup",
  "mouseover",
  "mouseout",
  "click",
  "dblclick"
];
function log() {
}
function get2(service, injector) {
  return injector.get(service, false);
}
function stopEvent(event2) {
  event2.preventDefault();
  if (typeof event2.stopPropagation === "function") {
    event2.stopPropagation();
  } else if (event2.srcEvent && typeof event2.srcEvent.stopPropagation === "function") {
    event2.srcEvent.stopPropagation();
  }
  if (typeof event2.stopImmediatePropagation === "function") {
    event2.stopImmediatePropagation();
  }
}
function createTouchRecognizer(node2) {
  function stopMouse(event2) {
    forEach(mouseEvents, function(e2) {
      event.bind(node2, e2, stopEvent, true);
    });
  }
  function allowMouse(event2) {
    setTimeout(function() {
      forEach(mouseEvents, function(e2) {
        event.unbind(node2, e2, stopEvent, true);
      });
    }, 500);
  }
  event.bind(node2, "touchstart", stopMouse, true);
  event.bind(node2, "touchend", allowMouse, true);
  event.bind(node2, "touchcancel", allowMouse, true);
  var recognizer = new import_hammerjs.default.Manager(node2, {
    inputClass: import_hammerjs.default.TouchInput,
    recognizers: [],
    domEvents: true
  });
  var tap = new import_hammerjs.default.Tap();
  var pan = new import_hammerjs.default.Pan({ threshold: 10 });
  var press = new import_hammerjs.default.Press();
  var pinch = new import_hammerjs.default.Pinch();
  var doubleTap = new import_hammerjs.default.Tap({ event: "doubletap", taps: 2 });
  pinch.requireFailure(pan);
  pinch.requireFailure(press);
  recognizer.add([pan, press, pinch, doubleTap, tap]);
  recognizer.reset = function(force) {
    var recognizers = this.recognizers, session = this.session;
    if (session.stopped) {
      return;
    }
    log("recognizer", "stop");
    recognizer.stop(force);
    setTimeout(function() {
      var i, r;
      log("recognizer", "reset");
      for (i = 0; r = recognizers[i]; i++) {
        r.reset();
        r.state = 8;
      }
      session.curRecognizer = null;
    }, 0);
  };
  recognizer.on("hammer.input", function(event2) {
    if (event2.srcEvent.defaultPrevented) {
      recognizer.reset(true);
    }
  });
  return recognizer;
}
function TouchInteractionEvents(injector, canvas, eventBus, elementRegistry, interactionEvents) {
  var dragging = get2("dragging", injector), move = get2("move", injector), contextPad = get2("contextPad", injector), palette = get2("palette", injector);
  var recognizer;
  function handler(type, buttonType) {
    return function(event2) {
      log("element", type, event2);
      var gfx = getGfx(event2.target), element = gfx && elementRegistry.get(gfx);
      if (buttonType) {
        event2.srcEvent.button = buttonType;
      }
      return interactionEvents.fire(type, event2, element);
    };
  }
  function getGfx(target) {
    var node2 = closest2(target, "svg, .djs-element", true);
    return node2;
  }
  function initEvents(svg) {
    recognizer = createTouchRecognizer(svg);
    function startGrabCanvas(event2) {
      log("canvas", "grab start");
      var lx = 0, ly = 0;
      function update(e2) {
        var dx = e2.deltaX - lx, dy = e2.deltaY - ly;
        canvas.scroll({ dx, dy });
        lx = e2.deltaX;
        ly = e2.deltaY;
      }
      function end(e2) {
        recognizer.off("panmove", update);
        recognizer.off("panend", end);
        recognizer.off("pancancel", end);
        log("canvas", "grab end");
      }
      recognizer.on("panmove", update);
      recognizer.on("panend", end);
      recognizer.on("pancancel", end);
    }
    function startGrab(event2) {
      var gfx = getGfx(event2.target), element = gfx && elementRegistry.get(gfx);
      if (move && canvas.getRootElement() !== element) {
        log("element", "move start", element, event2, true);
        return move.start(event2, element, true);
      } else {
        startGrabCanvas(event2);
      }
    }
    function startZoom(e2) {
      log("canvas", "zoom start");
      var zoom2 = canvas.zoom(), mid = e2.center;
      function update(e3) {
        var ratio = 1 - (1 - e3.scale) / 1.5, newZoom = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, ratio * zoom2));
        canvas.zoom(newZoom, mid);
        stopEvent(e3);
      }
      function end(e3) {
        recognizer.off("pinchmove", update);
        recognizer.off("pinchend", end);
        recognizer.off("pinchcancel", end);
        recognizer.reset(true);
        log("canvas", "zoom end");
      }
      recognizer.on("pinchmove", update);
      recognizer.on("pinchend", end);
      recognizer.on("pinchcancel", end);
    }
    recognizer.on("tap", handler("element.click"));
    recognizer.on("doubletap", handler("element.dblclick", 1));
    recognizer.on("panstart", startGrab);
    recognizer.on("press", startGrab);
    recognizer.on("pinchstart", startZoom);
  }
  if (dragging) {
    eventBus.on("drag.move", function(event2) {
      var originalEvent = event2.originalEvent;
      if (!originalEvent || originalEvent instanceof MouseEvent) {
        return;
      }
      var position = toPoint(originalEvent);
      var node2 = document.elementFromPoint(position.x, position.y), gfx = getGfx(node2), element = gfx && elementRegistry.get(gfx);
      if (element !== event2.hover) {
        if (event2.hover) {
          dragging.out(event2);
        }
        if (element) {
          dragging.hover({ element, gfx });
          event2.hover = element;
          event2.hoverGfx = gfx;
        }
      }
    });
  }
  if (contextPad) {
    eventBus.on("contextPad.create", function(event2) {
      var node2 = event2.pad.html;
      var padRecognizer = createTouchRecognizer(node2);
      padRecognizer.on("panstart", function(event3) {
        log("context-pad", "panstart", event3);
        contextPad.trigger("dragstart", event3, true);
      });
      padRecognizer.on("press", function(event3) {
        log("context-pad", "press", event3);
        contextPad.trigger("dragstart", event3, true);
      });
      padRecognizer.on("tap", function(event3) {
        log("context-pad", "tap", event3);
        contextPad.trigger("click", event3);
      });
    });
  }
  if (palette) {
    eventBus.on("palette.create", function(event2) {
      var node2 = event2.container;
      var padRecognizer = createTouchRecognizer(node2);
      padRecognizer.on("panstart", function(event3) {
        log("palette", "panstart", event3);
        palette.trigger("dragstart", event3, true);
      });
      padRecognizer.on("press", function(event3) {
        log("palette", "press", event3);
        palette.trigger("dragstart", event3, true);
      });
      padRecognizer.on("tap", function(event3) {
        log("palette", "tap", event3);
        palette.trigger("click", event3);
      });
    });
  }
  eventBus.on("canvas.init", function(event2) {
    initEvents(event2.svg);
  });
}
TouchInteractionEvents.$inject = [
  "injector",
  "canvas",
  "eventBus",
  "elementRegistry",
  "interactionEvents",
  "touchFix"
];

// node_modules/diagram-js/lib/features/touch/TouchFix.js
function TouchFix(canvas, eventBus) {
  var self2 = this;
  eventBus.on("canvas.init", function(e2) {
    self2.addBBoxMarker(e2.svg);
  });
}
TouchFix.$inject = ["canvas", "eventBus"];
TouchFix.prototype.addBBoxMarker = function(svg) {
  var markerStyle = {
    fill: "none",
    class: "outer-bound-marker"
  };
  var rect1 = create("rect");
  attr2(rect1, {
    x: -1e4,
    y: 1e4,
    width: 10,
    height: 10
  });
  attr2(rect1, markerStyle);
  append(svg, rect1);
  var rect2 = create("rect");
  attr2(rect2, {
    x: 1e4,
    y: 1e4,
    width: 10,
    height: 10
  });
  attr2(rect2, markerStyle);
  append(svg, rect2);
};

// node_modules/diagram-js/lib/features/touch/index.js
var touch_default = {
  __depends__: [interaction_events_default],
  __init__: ["touchInteractionEvents"],
  touchInteractionEvents: ["type", TouchInteractionEvents],
  touchFix: ["type", TouchFix]
};

// node_modules/diagram-js/lib/navigation/touch/index.js
var touch_default2 = {
  __depends__: [
    touch_default
  ]
};

// node_modules/dmn-js-drd/lib/NavigatedViewer.js
function NavigatedViewer(options2) {
  Viewer.call(this, options2);
}
e(NavigatedViewer, Viewer);
NavigatedViewer.prototype._navigationModules = [zoomscroll_default, movecanvas_default, touch_default2];
NavigatedViewer.prototype._modules = [].concat(NavigatedViewer.prototype._modules, NavigatedViewer.prototype._navigationModules);

// node_modules/table-js/node_modules/min-dash/dist/index.esm.js
var nativeToString4 = Object.prototype.toString;
function isNumber3(obj) {
  return nativeToString4.call(obj) === "[object Number]";
}
function isFunction3(obj) {
  const tag = nativeToString4.call(obj);
  return tag === "[object Function]" || tag === "[object AsyncFunction]" || tag === "[object GeneratorFunction]" || tag === "[object AsyncGeneratorFunction]" || tag === "[object Proxy]";
}
function throttle(fn, interval) {
  let throttling = false;
  return function(...args) {
    if (throttling) {
      return;
    }
    fn(...args);
    throttling = true;
    setTimeout(() => {
      throttling = false;
    }, interval);
  };
}
function assign4(target, ...others) {
  return Object.assign(target, ...others);
}

// node_modules/table-js/lib/model/index.js
var Base3 = class {
  constructor(attrs) {
    assign4(this, attrs);
    defineProperty2(this, "businessObject", {
      writable: true
    });
  }
};
var Root2 = class extends Base3 {
  constructor(attrs) {
    super(attrs);
    defineProperty2(this, "rows", {
      enumerable: true,
      value: this.rows || []
    });
    defineProperty2(this, "cols", {
      enumerable: true,
      value: this.cols || []
    });
  }
};
var Row = class extends Base3 {
  constructor(attrs) {
    super(attrs);
    defineProperty2(this, "root", {
      writable: true
    });
    defineProperty2(this, "cells", {
      enumerable: true,
      value: this.cells || []
    });
  }
};
var Col = class extends Base3 {
  constructor(attrs) {
    super(attrs);
    defineProperty2(this, "root", {
      writable: true
    });
    defineProperty2(this, "cells", {
      enumerable: true,
      value: this.cells || []
    });
  }
};
var Cell = class extends Base3 {
  constructor(attrs) {
    super(attrs);
    defineProperty2(this, "row", {
      writable: true
    });
    defineProperty2(this, "col", {
      writable: true
    });
  }
};
var TYPES = {
  root: Root2,
  row: Row,
  col: Col,
  cell: Cell
};
function create4(type, attrs) {
  const Type = TYPES[type];
  if (!Type) {
    throw new Error("unknown type " + type);
  }
  return new Type(attrs);
}
function defineProperty2(el, prop, options2) {
  Object.defineProperty(el, prop, options2);
}

// node_modules/table-js/lib/core/ElementFactory.js
var ElementFactory2 = class {
  constructor() {
    this._uid = 12;
  }
  create(type, attrs = {}) {
    if (!attrs.id) {
      attrs.id = type + "_" + this._uid++;
    }
    return create4(type, attrs);
  }
  createRoot(attrs) {
    return this.create("root", attrs);
  }
  createRow(attrs) {
    return this.create("row", attrs);
  }
  createCol(attrs) {
    return this.create("col", attrs);
  }
  createCell(attrs) {
    return this.create("cell", attrs);
  }
};

// node_modules/table-js/lib/core/ElementRegistry.js
var ElementRegistry2 = class {
  constructor(eventBus) {
    this._eventBus = eventBus;
    this._elements = {};
    eventBus.on("table.clear", this.clear.bind(this));
  }
  add(element, type) {
    const {
      id
    } = element;
    this._elements[id] = element;
  }
  remove(element) {
    const id = element.id || element;
    delete this._elements[id];
  }
  get(id) {
    return this._elements[id];
  }
  getAll() {
    return values(this._elements);
  }
  forEach(fn) {
    values(this._elements).forEach((element) => fn(element));
  }
  filter(fn) {
    return values(this._elements).filter((element) => fn(element));
  }
  clear() {
    this._elements = {};
  }
  updateId(element, newId) {
    this._validateId(newId);
    if (typeof element === "string") {
      element = this.get(element);
    }
    this._eventBus.fire("element.updateId", {
      element,
      newId
    });
    this.remove(element);
    element.id = newId;
    this.add(element);
  }
  _validateId(id) {
    if (!id) {
      throw new Error("element must have an id");
    }
    if (this._elements[id]) {
      throw new Error("element with id " + id + " already added");
    }
  }
};
ElementRegistry2.$inject = ["eventBus"];
function values(obj) {
  return Object.keys(obj).map(function(k) {
    return obj[k];
  });
}

// node_modules/table-js/lib/render/ChangeSupport.js
var ChangeSupport = class {
  constructor(eventBus) {
    this._listeners = {};
    eventBus.on("elements.changed", ({
      elements
    }) => {
      this.elementsChanged(elements);
    });
    eventBus.on("root.remove", (context) => {
      const oldRootId = context.root.id;
      if (this._listeners[oldRootId]) {
        eventBus.once("root.add", (context2) => {
          const newRootId = context2.root.id;
          this.updateId(oldRootId, newRootId);
        });
      }
    });
    eventBus.on("element.updateId", ({
      element,
      newId
    }) => {
      this.updateId(element.id, newId);
    });
  }
  elementsChanged(elements) {
    const invoked = {};
    const elementsLength = elements.length;
    for (let i = 0; i < elementsLength; i++) {
      const {
        id
      } = elements[i];
      if (invoked[id]) {
        return;
      }
      invoked[id] = true;
      const listenersLength = this._listeners[id] && this._listeners[id].length;
      if (listenersLength) {
        for (let j = 0; j < listenersLength; j++) {
          this._listeners[id][j] && this._listeners[id][j]();
        }
      }
    }
  }
  onElementsChanged(id, listener) {
    if (!this._listeners[id]) {
      this._listeners[id] = [];
    }
    this._listeners[id][this._listeners[id].length] = listener;
  }
  offElementsChanged(id, listener) {
    if (!this._listeners[id]) {
      return;
    }
    if (listener) {
      const idx = this._listeners[id].indexOf(listener);
      if (idx !== -1) {
        this._listeners[id].splice(idx, 1);
      }
    } else {
      this._listeners[id].length = 0;
    }
  }
  updateId(oldId, newId) {
    if (this._listeners[oldId]) {
      this._listeners[newId] = this._listeners[oldId];
      delete this._listeners[oldId];
    }
  }
};
ChangeSupport.$inject = ["eventBus"];

// node_modules/table-js/lib/render/Components.js
var DEFAULT_PRIORITY2 = 1e3;
var Components = class {
  constructor() {
    this._listeners = {};
  }
  getComponent(type, context) {
    const listeners = this._listeners[type];
    if (!listeners) {
      return;
    }
    let component;
    for (let i = 0; i < listeners.length; i++) {
      component = listeners[i].callback(context);
      if (component) {
        break;
      }
    }
    return component;
  }
  getComponents(type, context) {
    const listeners = this._listeners[type];
    const components = [];
    if (!listeners) {
      return components;
    }
    for (let i = 0; i < listeners.length; i++) {
      const component = listeners[i].callback(context);
      if (component) {
        components.push(component);
      }
    }
    if (!components.length) {
      return components;
    }
    return components;
  }
  onGetComponent(type, priority, callback) {
    if (isFunction3(priority)) {
      callback = priority;
      priority = DEFAULT_PRIORITY2;
    }
    if (!isNumber3(priority)) {
      throw new Error("priority must be a number");
    }
    const listeners = this._getListeners(type);
    let existingListener, idx;
    const newListener = {
      priority,
      callback
    };
    for (idx = 0; existingListener = listeners[idx]; idx++) {
      if (existingListener.priority < priority) {
        listeners.splice(idx, 0, newListener);
        return;
      }
    }
    listeners.push(newListener);
  }
  offGetComponent(type, callback) {
    const listeners = this._getListeners(type);
    let listener, listenerCallback, idx;
    if (callback) {
      for (idx = listeners.length - 1; listener = listeners[idx]; idx--) {
        listenerCallback = listener.callback;
        if (listenerCallback === callback) {
          listeners.splice(idx, 1);
        }
      }
    } else {
      listeners.length = 0;
    }
  }
  _getListeners(type) {
    let listeners = this._listeners[type];
    if (!listeners) {
      this._listeners[type] = listeners = [];
    }
    return listeners;
  }
};

// node_modules/inferno/dist/index.esm.js
var NO_OP = "$NO_OP";
var ERROR_MSG = "a runtime error occured! Use Inferno in development environment to find the error.";
var isBrowser = !!(typeof window !== "undefined" && window.document);
var isArray5 = Array.isArray;
function isStringOrNumber(o) {
  var type = typeof o;
  return type === "string" || type === "number";
}
function isNullOrUndef(o) {
  return isUndefined5(o) || isNull(o);
}
function isInvalid(o) {
  return isNull(o) || o === false || isTrue(o) || isUndefined5(o);
}
function isFunction4(o) {
  return typeof o === "function";
}
function isString3(o) {
  return typeof o === "string";
}
function isNumber4(o) {
  return typeof o === "number";
}
function isNull(o) {
  return o === null;
}
function isTrue(o) {
  return o === true;
}
function isUndefined5(o) {
  return o === void 0;
}
function throwError(message) {
  if (!message) {
    message = ERROR_MSG;
  }
  throw new Error("Inferno Error: " + message);
}
function combineFrom(first, second) {
  var out = {};
  if (first) {
    for (var key in first) {
      out[key] = first[key];
    }
  }
  if (second) {
    for (var key$1 in second) {
      out[key$1] = second[key$1];
    }
  }
  return out;
}
var keyPrefix = "$";
function getVNode(childFlags, children, className, flags, key, props, ref, type) {
  return {
    childFlags,
    children,
    className,
    dom: null,
    flags,
    key: key === void 0 ? null : key,
    parentVNode: null,
    props: props === void 0 ? null : props,
    ref: ref === void 0 ? null : ref,
    type
  };
}
function createVNode(flags, type, className, children, childFlags, props, key, ref) {
  var childFlag = childFlags === void 0 ? 1 : childFlags;
  var vNode = getVNode(childFlag, children, className, flags, key, props, ref, type);
  var optsVNode = options.createVNode;
  if (typeof optsVNode === "function") {
    optsVNode(vNode);
  }
  if (childFlag === 0) {
    normalizeChildren(vNode, vNode.children);
  }
  return vNode;
}
function createComponentVNode(flags, type, props, key, ref) {
  if ((flags & 2) > 0) {
    flags = type.prototype && isFunction4(type.prototype.render) ? 4 : 8;
  }
  var defaultProps = type.defaultProps;
  if (!isNullOrUndef(defaultProps)) {
    if (!props) {
      props = {};
    }
    for (var prop in defaultProps) {
      if (isUndefined5(props[prop])) {
        props[prop] = defaultProps[prop];
      }
    }
  }
  if ((flags & 8) > 0) {
    var defaultHooks = type.defaultHooks;
    if (!isNullOrUndef(defaultHooks)) {
      if (!ref) {
        ref = defaultHooks;
      } else {
        for (var prop$1 in defaultHooks) {
          if (isUndefined5(ref[prop$1])) {
            ref[prop$1] = defaultHooks[prop$1];
          }
        }
      }
    }
  }
  var vNode = getVNode(1, null, null, flags, key, props, ref, type);
  var optsVNode = options.createVNode;
  if (isFunction4(optsVNode)) {
    optsVNode(vNode);
  }
  return vNode;
}
function createTextVNode(text, key) {
  return getVNode(1, isNullOrUndef(text) ? "" : text, null, 16, key, null, null, null);
}
function normalizeProps(vNode) {
  var props = vNode.props;
  if (props) {
    var flags = vNode.flags;
    if (flags & 481) {
      if (props.children !== void 0 && isNullOrUndef(vNode.children)) {
        normalizeChildren(vNode, props.children);
      }
      if (props.className !== void 0) {
        vNode.className = props.className || null;
        props.className = void 0;
      }
    }
    if (props.key !== void 0) {
      vNode.key = props.key;
      props.key = void 0;
    }
    if (props.ref !== void 0) {
      if (flags & 8) {
        vNode.ref = combineFrom(vNode.ref, props.ref);
      } else {
        vNode.ref = props.ref;
      }
      props.ref = void 0;
    }
  }
  return vNode;
}
function directClone(vNodeToClone) {
  var newVNode;
  var flags = vNodeToClone.flags;
  if (flags & 14) {
    var props;
    var propsToClone = vNodeToClone.props;
    if (!isNull(propsToClone)) {
      props = {};
      for (var key in propsToClone) {
        props[key] = propsToClone[key];
      }
    }
    newVNode = createComponentVNode(flags, vNodeToClone.type, props, vNodeToClone.key, vNodeToClone.ref);
  } else if (flags & 481) {
    newVNode = createVNode(flags, vNodeToClone.type, vNodeToClone.className, vNodeToClone.children, vNodeToClone.childFlags, vNodeToClone.props, vNodeToClone.key, vNodeToClone.ref);
  } else if (flags & 16) {
    newVNode = createTextVNode(vNodeToClone.children, vNodeToClone.key);
  } else if (flags & 1024) {
    newVNode = vNodeToClone;
  }
  return newVNode;
}
function createVoidVNode() {
  return createTextVNode("", null);
}
function _normalizeVNodes(nodes, result, index2, currentKey) {
  for (var len = nodes.length; index2 < len; index2++) {
    var n = nodes[index2];
    if (!isInvalid(n)) {
      var newKey = currentKey + keyPrefix + index2;
      if (isArray5(n)) {
        _normalizeVNodes(n, result, 0, newKey);
      } else {
        if (isStringOrNumber(n)) {
          n = createTextVNode(n, newKey);
        } else {
          var oldKey = n.key;
          var isPrefixedKey = isString3(oldKey) && oldKey[0] === keyPrefix;
          if (!isNull(n.dom) || isPrefixedKey) {
            n = directClone(n);
          }
          if (isNull(oldKey) || isPrefixedKey) {
            n.key = newKey;
          } else {
            n.key = currentKey + oldKey;
          }
        }
        result.push(n);
      }
    }
  }
}
function normalizeChildren(vNode, children) {
  var newChildren;
  var newChildFlags = 1;
  if (isInvalid(children)) {
    newChildren = children;
  } else if (isString3(children)) {
    newChildFlags = 2;
    newChildren = createTextVNode(children);
  } else if (isNumber4(children)) {
    newChildFlags = 2;
    newChildren = createTextVNode(children + "");
  } else if (isArray5(children)) {
    var len = children.length;
    if (len === 0) {
      newChildren = null;
      newChildFlags = 1;
    } else {
      if (Object.isFrozen(children) || children["$"] === true) {
        children = children.slice();
      }
      newChildFlags = 8;
      for (var i = 0; i < len; i++) {
        var n = children[i];
        if (isInvalid(n) || isArray5(n)) {
          newChildren = newChildren || children.slice(0, i);
          _normalizeVNodes(children, newChildren, i, "");
          break;
        } else if (isStringOrNumber(n)) {
          newChildren = newChildren || children.slice(0, i);
          newChildren.push(createTextVNode(n, keyPrefix + i));
        } else {
          var key = n.key;
          var isNullDom = isNull(n.dom);
          var isNullKey = isNull(key);
          var isPrefixed = !isNullKey && isString3(key) && key[0] === keyPrefix;
          if (!isNullDom || isNullKey || isPrefixed) {
            newChildren = newChildren || children.slice(0, i);
            if (!isNullDom || isPrefixed) {
              n = directClone(n);
            }
            if (isNullKey || isPrefixed) {
              n.key = keyPrefix + i;
            }
            newChildren.push(n);
          } else if (newChildren) {
            newChildren.push(n);
          }
        }
      }
      newChildren = newChildren || children;
      newChildren.$ = true;
    }
  } else {
    newChildren = children;
    if (!isNull(children.dom)) {
      newChildren = directClone(children);
    }
    newChildFlags = 2;
  }
  vNode.children = newChildren;
  vNode.childFlags = newChildFlags;
  return vNode;
}
var options = {
  afterRender: null,
  beforeRender: null,
  createVNode: null,
  renderComplete: null
};
var xlinkNS = "http://www.w3.org/1999/xlink";
var xmlNS = "http://www.w3.org/XML/1998/namespace";
var svgNS = "http://www.w3.org/2000/svg";
var namespaces = {
  "xlink:actuate": xlinkNS,
  "xlink:arcrole": xlinkNS,
  "xlink:href": xlinkNS,
  "xlink:role": xlinkNS,
  "xlink:show": xlinkNS,
  "xlink:title": xlinkNS,
  "xlink:type": xlinkNS,
  "xml:base": xmlNS,
  "xml:lang": xmlNS,
  "xml:space": xmlNS
};
var EMPTY_OBJ = {};
var LIFECYCLE = [];
function appendChild(parentDom, dom) {
  parentDom.appendChild(dom);
}
function insertOrAppend(parentDom, newNode, nextNode) {
  if (isNullOrUndef(nextNode)) {
    appendChild(parentDom, newNode);
  } else {
    parentDom.insertBefore(newNode, nextNode);
  }
}
function documentCreateElement(tag, isSVG) {
  if (isSVG) {
    return document.createElementNS(svgNS, tag);
  }
  return document.createElement(tag);
}
function replaceChild(parentDom, newDom, lastDom) {
  parentDom.replaceChild(newDom, lastDom);
}
function removeChild(parentDom, dom) {
  parentDom.removeChild(dom);
}
function callAll(arrayFn) {
  var listener;
  while ((listener = arrayFn.shift()) !== void 0) {
    listener();
  }
}
var attachedEventCounts = {};
var attachedEvents = {};
function handleEvent(name2, nextEvent, dom) {
  var eventsLeft = attachedEventCounts[name2];
  var eventsObject = dom.$EV;
  if (nextEvent) {
    if (!eventsLeft) {
      attachedEvents[name2] = attachEventToDocument(name2);
      attachedEventCounts[name2] = 0;
    }
    if (!eventsObject) {
      eventsObject = dom.$EV = {};
    }
    if (!eventsObject[name2]) {
      attachedEventCounts[name2]++;
    }
    eventsObject[name2] = nextEvent;
  } else if (eventsObject && eventsObject[name2]) {
    attachedEventCounts[name2]--;
    if (eventsLeft === 1) {
      document.removeEventListener(normalizeEventName(name2), attachedEvents[name2]);
      attachedEvents[name2] = null;
    }
    eventsObject[name2] = nextEvent;
  }
}
function dispatchEvents(event2, target, isClick, name2, eventData) {
  var dom = target;
  while (!isNull(dom)) {
    if (isClick && dom.disabled) {
      return;
    }
    var eventsObject = dom.$EV;
    if (eventsObject) {
      var currentEvent = eventsObject[name2];
      if (currentEvent) {
        eventData.dom = dom;
        if (currentEvent.event) {
          currentEvent.event(currentEvent.data, event2);
        } else {
          currentEvent(event2);
        }
        if (event2.cancelBubble) {
          return;
        }
      }
    }
    dom = dom.parentNode;
  }
}
function normalizeEventName(name2) {
  return name2.substr(2).toLowerCase();
}
function stopPropagation() {
  this.cancelBubble = true;
  if (!this.immediatePropagationStopped) {
    this.stopImmediatePropagation();
  }
}
function attachEventToDocument(name2) {
  var docEvent = function(event2) {
    var type = event2.type;
    var isClick = type === "click" || type === "dblclick";
    if (isClick && event2.button !== 0) {
      event2.stopPropagation();
      return false;
    }
    event2.stopPropagation = stopPropagation;
    var eventData = {
      dom: document
    };
    Object.defineProperty(event2, "currentTarget", {
      configurable: true,
      get: function get3() {
        return eventData.dom;
      }
    });
    dispatchEvents(event2, event2.target, isClick, name2, eventData);
    return;
  };
  document.addEventListener(normalizeEventName(name2), docEvent);
  return docEvent;
}
function isSameInnerHTML(dom, innerHTML) {
  var tempdom = document.createElement("i");
  tempdom.innerHTML = innerHTML;
  return tempdom.innerHTML === dom.innerHTML;
}
function isSamePropsInnerHTML(dom, props) {
  return Boolean(props && props.dangerouslySetInnerHTML && props.dangerouslySetInnerHTML.__html && isSameInnerHTML(dom, props.dangerouslySetInnerHTML.__html));
}
function triggerEventListener(props, methodName, e2) {
  if (props[methodName]) {
    var listener = props[methodName];
    if (listener.event) {
      listener.event(listener.data, e2);
    } else {
      listener(e2);
    }
  } else {
    var nativeListenerName = methodName.toLowerCase();
    if (props[nativeListenerName]) {
      props[nativeListenerName](e2);
    }
  }
}
function createWrappedFunction(methodName, applyValue) {
  var fnMethod = function(e2) {
    e2.stopPropagation();
    var vNode = this.$V;
    if (!vNode) {
      return;
    }
    var props = vNode.props || EMPTY_OBJ;
    var dom = vNode.dom;
    if (isString3(methodName)) {
      triggerEventListener(props, methodName, e2);
    } else {
      for (var i = 0; i < methodName.length; i++) {
        triggerEventListener(props, methodName[i], e2);
      }
    }
    if (isFunction4(applyValue)) {
      var newVNode = this.$V;
      var newProps = newVNode.props || EMPTY_OBJ;
      applyValue(newProps, dom, false, newVNode);
    }
  };
  Object.defineProperty(fnMethod, "wrapped", {
    configurable: false,
    enumerable: false,
    value: true,
    writable: false
  });
  return fnMethod;
}
function isCheckedType(type) {
  return type === "checkbox" || type === "radio";
}
var onTextInputChange = createWrappedFunction("onInput", applyValueInput);
var wrappedOnChange = createWrappedFunction(["onClick", "onChange"], applyValueInput);
function emptywrapper(event2) {
  event2.stopPropagation();
}
emptywrapper.wrapped = true;
function inputEvents(dom, nextPropsOrEmpty) {
  if (isCheckedType(nextPropsOrEmpty.type)) {
    dom.onchange = wrappedOnChange;
    dom.onclick = emptywrapper;
  } else {
    dom.oninput = onTextInputChange;
  }
}
function applyValueInput(nextPropsOrEmpty, dom) {
  var type = nextPropsOrEmpty.type;
  var value = nextPropsOrEmpty.value;
  var checked = nextPropsOrEmpty.checked;
  var multiple = nextPropsOrEmpty.multiple;
  var defaultValue = nextPropsOrEmpty.defaultValue;
  var hasValue = !isNullOrUndef(value);
  if (type && type !== dom.type) {
    dom.setAttribute("type", type);
  }
  if (!isNullOrUndef(multiple) && multiple !== dom.multiple) {
    dom.multiple = multiple;
  }
  if (!isNullOrUndef(defaultValue) && !hasValue) {
    dom.defaultValue = defaultValue + "";
  }
  if (isCheckedType(type)) {
    if (hasValue) {
      dom.value = value;
    }
    if (!isNullOrUndef(checked)) {
      dom.checked = checked;
    }
  } else {
    if (hasValue && dom.value !== value) {
      dom.defaultValue = value;
      dom.value = value;
    } else if (!isNullOrUndef(checked)) {
      dom.checked = checked;
    }
  }
}
function updateChildOptionGroup(vNode, value) {
  var type = vNode.type;
  if (type === "optgroup") {
    var children = vNode.children;
    var childFlags = vNode.childFlags;
    if (childFlags & 12) {
      for (var i = 0, len = children.length; i < len; i++) {
        updateChildOption(children[i], value);
      }
    } else if (childFlags === 2) {
      updateChildOption(children, value);
    }
  } else {
    updateChildOption(vNode, value);
  }
}
function updateChildOption(vNode, value) {
  var props = vNode.props || EMPTY_OBJ;
  var dom = vNode.dom;
  dom.value = props.value;
  if (isArray5(value) && value.indexOf(props.value) !== -1 || props.value === value) {
    dom.selected = true;
  } else if (!isNullOrUndef(value) || !isNullOrUndef(props.selected)) {
    dom.selected = props.selected || false;
  }
}
var onSelectChange = createWrappedFunction("onChange", applyValueSelect);
function selectEvents(dom) {
  dom.onchange = onSelectChange;
}
function applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode) {
  var multiplePropInBoolean = Boolean(nextPropsOrEmpty.multiple);
  if (!isNullOrUndef(nextPropsOrEmpty.multiple) && multiplePropInBoolean !== dom.multiple) {
    dom.multiple = multiplePropInBoolean;
  }
  var childFlags = vNode.childFlags;
  if ((childFlags & 1) === 0) {
    var children = vNode.children;
    var value = nextPropsOrEmpty.value;
    if (mounting && isNullOrUndef(value)) {
      value = nextPropsOrEmpty.defaultValue;
    }
    if (childFlags & 12) {
      for (var i = 0, len = children.length; i < len; i++) {
        updateChildOptionGroup(children[i], value);
      }
    } else if (childFlags === 2) {
      updateChildOptionGroup(children, value);
    }
  }
}
var onTextareaInputChange = createWrappedFunction("onInput", applyValueTextArea);
var wrappedOnChange$1 = createWrappedFunction("onChange");
function textAreaEvents(dom, nextPropsOrEmpty) {
  dom.oninput = onTextareaInputChange;
  if (nextPropsOrEmpty.onChange) {
    dom.onchange = wrappedOnChange$1;
  }
}
function applyValueTextArea(nextPropsOrEmpty, dom, mounting) {
  var value = nextPropsOrEmpty.value;
  var domValue = dom.value;
  if (isNullOrUndef(value)) {
    if (mounting) {
      var defaultValue = nextPropsOrEmpty.defaultValue;
      if (!isNullOrUndef(defaultValue) && defaultValue !== domValue) {
        dom.defaultValue = defaultValue;
        dom.value = defaultValue;
      }
    }
  } else if (domValue !== value) {
    dom.defaultValue = value;
    dom.value = value;
  }
}
function processElement(flags, vNode, dom, nextPropsOrEmpty, mounting, isControlled) {
  if (flags & 64) {
    applyValueInput(nextPropsOrEmpty, dom);
  } else if (flags & 256) {
    applyValueSelect(nextPropsOrEmpty, dom, mounting, vNode);
  } else if (flags & 128) {
    applyValueTextArea(nextPropsOrEmpty, dom, mounting);
  }
  if (isControlled) {
    dom.$V = vNode;
  }
}
function addFormElementEventHandlers(flags, dom, nextPropsOrEmpty) {
  if (flags & 64) {
    inputEvents(dom, nextPropsOrEmpty);
  } else if (flags & 256) {
    selectEvents(dom);
  } else if (flags & 128) {
    textAreaEvents(dom, nextPropsOrEmpty);
  }
}
function isControlledFormElement(nextPropsOrEmpty) {
  return nextPropsOrEmpty.type && isCheckedType(nextPropsOrEmpty.type) ? !isNullOrUndef(nextPropsOrEmpty.checked) : !isNullOrUndef(nextPropsOrEmpty.value);
}
function remove6(vNode, parentDom) {
  unmount(vNode);
  if (parentDom && vNode.dom) {
    removeChild(parentDom, vNode.dom);
    vNode.dom = null;
  }
}
function unmount(vNode) {
  var flags = vNode.flags;
  if (flags & 481) {
    var ref = vNode.ref;
    var props = vNode.props;
    if (isFunction4(ref)) {
      ref(null);
    }
    var children = vNode.children;
    var childFlags = vNode.childFlags;
    if (childFlags & 12) {
      unmountAllChildren(children);
    } else if (childFlags === 2) {
      unmount(children);
    }
    if (!isNull(props)) {
      for (var name2 in props) {
        switch (name2) {
          case "onClick":
          case "onDblClick":
          case "onFocusIn":
          case "onFocusOut":
          case "onKeyDown":
          case "onKeyPress":
          case "onKeyUp":
          case "onMouseDown":
          case "onMouseMove":
          case "onMouseUp":
          case "onSubmit":
          case "onTouchEnd":
          case "onTouchMove":
          case "onTouchStart":
            handleEvent(name2, null, vNode.dom);
            break;
          default:
            break;
        }
      }
    }
  } else {
    var children$1 = vNode.children;
    if (children$1) {
      if (flags & 14) {
        var ref$1 = vNode.ref;
        if (flags & 4) {
          if (isFunction4(children$1.componentWillUnmount)) {
            children$1.componentWillUnmount();
          }
          if (isFunction4(ref$1)) {
            ref$1(null);
          }
          children$1.$UN = true;
          if (children$1.$LI) {
            unmount(children$1.$LI);
          }
        } else {
          if (!isNullOrUndef(ref$1) && isFunction4(ref$1.onComponentWillUnmount)) {
            ref$1.onComponentWillUnmount(vNode.dom, vNode.props || EMPTY_OBJ);
          }
          unmount(children$1);
        }
      } else if (flags & 1024) {
        remove6(children$1, vNode.type);
      }
    }
  }
}
function unmountAllChildren(children) {
  for (var i = 0, len = children.length; i < len; i++) {
    unmount(children[i]);
  }
}
function removeAllChildren(dom, children) {
  unmountAllChildren(children);
  dom.textContent = "";
}
function createLinkEvent(linkEvent, nextValue) {
  return function(e2) {
    linkEvent(nextValue.data, e2);
  };
}
function patchEvent(name2, nextValue, dom) {
  var nameLowerCase = name2.toLowerCase();
  if (!isFunction4(nextValue) && !isNullOrUndef(nextValue)) {
    var linkEvent = nextValue.event;
    if (linkEvent && isFunction4(linkEvent)) {
      dom[nameLowerCase] = createLinkEvent(linkEvent, nextValue);
    }
  } else {
    var domEvent = dom[nameLowerCase];
    if (!domEvent || !domEvent.wrapped) {
      dom[nameLowerCase] = nextValue;
    }
  }
}
function getNumberStyleValue(style, value) {
  switch (style) {
    case "animationIterationCount":
    case "borderImageOutset":
    case "borderImageSlice":
    case "borderImageWidth":
    case "boxFlex":
    case "boxFlexGroup":
    case "boxOrdinalGroup":
    case "columnCount":
    case "fillOpacity":
    case "flex":
    case "flexGrow":
    case "flexNegative":
    case "flexOrder":
    case "flexPositive":
    case "flexShrink":
    case "floodOpacity":
    case "fontWeight":
    case "gridColumn":
    case "gridRow":
    case "lineClamp":
    case "lineHeight":
    case "opacity":
    case "order":
    case "orphans":
    case "stopOpacity":
    case "strokeDasharray":
    case "strokeDashoffset":
    case "strokeMiterlimit":
    case "strokeOpacity":
    case "strokeWidth":
    case "tabSize":
    case "widows":
    case "zIndex":
    case "zoom":
      return value;
    default:
      return value + "px";
  }
}
function patchStyle(lastAttrValue, nextAttrValue, dom) {
  var domStyle = dom.style;
  var style;
  var value;
  if (isString3(nextAttrValue)) {
    domStyle.cssText = nextAttrValue;
    return;
  }
  if (!isNullOrUndef(lastAttrValue) && !isString3(lastAttrValue)) {
    for (style in nextAttrValue) {
      value = nextAttrValue[style];
      if (value !== lastAttrValue[style]) {
        domStyle[style] = isNumber4(value) ? getNumberStyleValue(style, value) : value;
      }
    }
    for (style in lastAttrValue) {
      if (isNullOrUndef(nextAttrValue[style])) {
        domStyle[style] = "";
      }
    }
  } else {
    for (style in nextAttrValue) {
      value = nextAttrValue[style];
      domStyle[style] = isNumber4(value) ? getNumberStyleValue(style, value) : value;
    }
  }
}
function patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode) {
  switch (prop) {
    case "onClick":
    case "onDblClick":
    case "onFocusIn":
    case "onFocusOut":
    case "onKeyDown":
    case "onKeyPress":
    case "onKeyUp":
    case "onMouseDown":
    case "onMouseMove":
    case "onMouseUp":
    case "onSubmit":
    case "onTouchEnd":
    case "onTouchMove":
    case "onTouchStart":
      handleEvent(prop, nextValue, dom);
      break;
    case "children":
    case "childrenType":
    case "className":
    case "defaultValue":
    case "key":
    case "multiple":
    case "ref":
      break;
    case "autoFocus":
      dom.autofocus = !!nextValue;
      break;
    case "allowfullscreen":
    case "autoplay":
    case "capture":
    case "checked":
    case "controls":
    case "default":
    case "disabled":
    case "hidden":
    case "indeterminate":
    case "loop":
    case "muted":
    case "novalidate":
    case "open":
    case "readOnly":
    case "required":
    case "reversed":
    case "scoped":
    case "seamless":
    case "selected":
      dom[prop] = !!nextValue;
      break;
    case "defaultChecked":
    case "value":
    case "volume":
      if (hasControlledValue && prop === "value") {
        return;
      }
      var value = isNullOrUndef(nextValue) ? "" : nextValue;
      if (dom[prop] !== value) {
        dom[prop] = value;
      }
      break;
    case "dangerouslySetInnerHTML":
      var lastHtml = lastValue && lastValue.__html || "";
      var nextHtml = nextValue && nextValue.__html || "";
      if (lastHtml !== nextHtml) {
        if (!isNullOrUndef(nextHtml) && !isSameInnerHTML(dom, nextHtml)) {
          if (!isNull(lastVNode)) {
            if (lastVNode.childFlags & 12) {
              unmountAllChildren(lastVNode.children);
            } else if (lastVNode.childFlags === 2) {
              unmount(lastVNode.children);
            }
            lastVNode.children = null;
            lastVNode.childFlags = 1;
          }
          dom.innerHTML = nextHtml;
        }
      }
      break;
    default:
      if (prop[0] === "o" && prop[1] === "n") {
        patchEvent(prop, nextValue, dom);
      } else if (isNullOrUndef(nextValue)) {
        dom.removeAttribute(prop);
      } else if (prop === "style") {
        patchStyle(lastValue, nextValue, dom);
      } else if (isSVG && namespaces[prop]) {
        dom.setAttributeNS(namespaces[prop], prop, nextValue);
      } else {
        dom.setAttribute(prop, nextValue);
      }
      break;
  }
}
function mountProps(vNode, flags, props, dom, isSVG) {
  var hasControlledValue = false;
  var isFormElement = (flags & 448) > 0;
  if (isFormElement) {
    hasControlledValue = isControlledFormElement(props);
    if (hasControlledValue) {
      addFormElementEventHandlers(flags, dom, props);
    }
  }
  for (var prop in props) {
    patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue, null);
  }
  if (isFormElement) {
    processElement(flags, vNode, dom, props, true, hasControlledValue);
  }
}
function createClassComponentInstance(vNode, Component3, props, context) {
  var instance = new Component3(props, context);
  vNode.children = instance;
  instance.$V = vNode;
  instance.$BS = false;
  instance.context = context;
  if (instance.props === EMPTY_OBJ) {
    instance.props = props;
  }
  instance.$UN = false;
  if (isFunction4(instance.componentWillMount)) {
    instance.$BR = true;
    instance.componentWillMount();
    if (instance.$PSS) {
      var state = instance.state;
      var pending = instance.$PS;
      if (isNull(state)) {
        instance.state = pending;
      } else {
        for (var key in pending) {
          state[key] = pending[key];
        }
      }
      instance.$PSS = false;
      instance.$PS = null;
    }
    instance.$BR = false;
  }
  if (isFunction4(options.beforeRender)) {
    options.beforeRender(instance);
  }
  var input = handleComponentInput(instance.render(props, instance.state, context), vNode);
  var childContext;
  if (isFunction4(instance.getChildContext)) {
    childContext = instance.getChildContext();
  }
  if (isNullOrUndef(childContext)) {
    instance.$CX = context;
  } else {
    instance.$CX = combineFrom(context, childContext);
  }
  if (isFunction4(options.afterRender)) {
    options.afterRender(instance);
  }
  instance.$LI = input;
  return instance;
}
function handleComponentInput(input, componentVNode) {
  if (isInvalid(input)) {
    input = createVoidVNode();
  } else if (isStringOrNumber(input)) {
    input = createTextVNode(input, null);
  } else {
    if (input.dom) {
      input = directClone(input);
    }
    if (input.flags & 14) {
      input.parentVNode = componentVNode;
    }
  }
  return input;
}
function mount(vNode, parentDom, context, isSVG) {
  var flags = vNode.flags;
  if (flags & 481) {
    return mountElement(vNode, parentDom, context, isSVG);
  }
  if (flags & 14) {
    return mountComponent(vNode, parentDom, context, isSVG, (flags & 4) > 0);
  }
  if (flags & 512 || flags & 16) {
    return mountText(vNode, parentDom);
  }
  if (flags & 1024) {
    mount(vNode.children, vNode.type, context, false);
    return vNode.dom = mountText(createVoidVNode(), parentDom);
  }
}
function mountText(vNode, parentDom) {
  var dom = vNode.dom = document.createTextNode(vNode.children);
  if (!isNull(parentDom)) {
    appendChild(parentDom, dom);
  }
  return dom;
}
function mountElement(vNode, parentDom, context, isSVG) {
  var flags = vNode.flags;
  var children = vNode.children;
  var props = vNode.props;
  var className = vNode.className;
  var ref = vNode.ref;
  var childFlags = vNode.childFlags;
  isSVG = isSVG || (flags & 32) > 0;
  var dom = documentCreateElement(vNode.type, isSVG);
  vNode.dom = dom;
  if (!isNullOrUndef(className) && className !== "") {
    if (isSVG) {
      dom.setAttribute("class", className);
    } else {
      dom.className = className;
    }
  }
  if (!isNull(parentDom)) {
    appendChild(parentDom, dom);
  }
  if ((childFlags & 1) === 0) {
    var childrenIsSVG = isSVG === true && vNode.type !== "foreignObject";
    if (childFlags === 2) {
      mount(children, dom, context, childrenIsSVG);
    } else if (childFlags & 12) {
      mountArrayChildren(children, dom, context, childrenIsSVG);
    }
  }
  if (!isNull(props)) {
    mountProps(vNode, flags, props, dom, isSVG);
  }
  if (isFunction4(ref)) {
    mountRef(dom, ref);
  }
  return dom;
}
function mountArrayChildren(children, dom, context, isSVG) {
  for (var i = 0, len = children.length; i < len; i++) {
    var child = children[i];
    if (!isNull(child.dom)) {
      children[i] = child = directClone(child);
    }
    mount(child, dom, context, isSVG);
  }
}
function mountComponent(vNode, parentDom, context, isSVG, isClass3) {
  var dom;
  var type = vNode.type;
  var props = vNode.props || EMPTY_OBJ;
  var ref = vNode.ref;
  if (isClass3) {
    var instance = createClassComponentInstance(vNode, type, props, context);
    vNode.dom = dom = mount(instance.$LI, null, instance.$CX, isSVG);
    mountClassComponentCallbacks(vNode, ref, instance);
    instance.$UPD = false;
  } else {
    var input = handleComponentInput(type(props, context), vNode);
    vNode.children = input;
    vNode.dom = dom = mount(input, null, context, isSVG);
    mountFunctionalComponentCallbacks(props, ref, dom);
  }
  if (!isNull(parentDom)) {
    appendChild(parentDom, dom);
  }
  return dom;
}
function createClassMountCallback(instance) {
  return function() {
    instance.$UPD = true;
    instance.componentDidMount();
    instance.$UPD = false;
  };
}
function mountClassComponentCallbacks(vNode, ref, instance) {
  if (isFunction4(ref)) {
    ref(instance);
  }
  if (isFunction4(instance.componentDidMount)) {
    LIFECYCLE.push(createClassMountCallback(instance));
  }
}
function createOnMountCallback(ref, dom, props) {
  return function() {
    return ref.onComponentDidMount(dom, props);
  };
}
function mountFunctionalComponentCallbacks(props, ref, dom) {
  if (!isNullOrUndef(ref)) {
    if (isFunction4(ref.onComponentWillMount)) {
      ref.onComponentWillMount(props);
    }
    if (isFunction4(ref.onComponentDidMount)) {
      LIFECYCLE.push(createOnMountCallback(ref, dom, props));
    }
  }
}
function mountRef(dom, value) {
  LIFECYCLE.push(function() {
    return value(dom);
  });
}
function hydrateComponent(vNode, dom, context, isSVG, isClass3) {
  var type = vNode.type;
  var ref = vNode.ref;
  var props = vNode.props || EMPTY_OBJ;
  if (isClass3) {
    var instance = createClassComponentInstance(vNode, type, props, context);
    var input = instance.$LI;
    hydrateVNode(input, dom, instance.$CX, isSVG);
    vNode.dom = input.dom;
    mountClassComponentCallbacks(vNode, ref, instance);
    instance.$UPD = false;
  } else {
    var input$1 = handleComponentInput(type(props, context), vNode);
    hydrateVNode(input$1, dom, context, isSVG);
    vNode.children = input$1;
    vNode.dom = input$1.dom;
    mountFunctionalComponentCallbacks(props, ref, dom);
  }
}
function hydrateElement(vNode, dom, context, isSVG) {
  var children = vNode.children;
  var props = vNode.props;
  var className = vNode.className;
  var flags = vNode.flags;
  var ref = vNode.ref;
  isSVG = isSVG || (flags & 32) > 0;
  if (dom.nodeType !== 1 || dom.tagName.toLowerCase() !== vNode.type) {
    var newDom = mountElement(vNode, null, context, isSVG);
    vNode.dom = newDom;
    replaceChild(dom.parentNode, newDom, dom);
  } else {
    vNode.dom = dom;
    var childNode = dom.firstChild;
    var childFlags = vNode.childFlags;
    if ((childFlags & 1) === 0) {
      var nextSibling = null;
      while (childNode) {
        nextSibling = childNode.nextSibling;
        if (childNode.nodeType === 8) {
          if (childNode.data === "!") {
            dom.replaceChild(document.createTextNode(""), childNode);
          } else {
            dom.removeChild(childNode);
          }
        }
        childNode = nextSibling;
      }
      childNode = dom.firstChild;
      if (childFlags === 2) {
        if (isNull(childNode)) {
          mount(children, dom, context, isSVG);
        } else {
          nextSibling = childNode.nextSibling;
          hydrateVNode(children, childNode, context, isSVG);
          childNode = nextSibling;
        }
      } else if (childFlags & 12) {
        for (var i = 0, len = children.length; i < len; i++) {
          var child = children[i];
          if (isNull(childNode)) {
            mount(child, dom, context, isSVG);
          } else {
            nextSibling = childNode.nextSibling;
            hydrateVNode(child, childNode, context, isSVG);
            childNode = nextSibling;
          }
        }
      }
      while (childNode) {
        nextSibling = childNode.nextSibling;
        dom.removeChild(childNode);
        childNode = nextSibling;
      }
    } else if (!isNull(dom.firstChild) && !isSamePropsInnerHTML(dom, props)) {
      dom.textContent = "";
      if (flags & 448) {
        dom.defaultValue = "";
      }
    }
    if (!isNull(props)) {
      mountProps(vNode, flags, props, dom, isSVG);
    }
    if (isNullOrUndef(className)) {
      if (dom.className !== "") {
        dom.removeAttribute("class");
      }
    } else if (isSVG) {
      dom.setAttribute("class", className);
    } else {
      dom.className = className;
    }
    if (isFunction4(ref)) {
      mountRef(dom, ref);
    }
  }
}
function hydrateText(vNode, dom) {
  if (dom.nodeType !== 3) {
    var newDom = mountText(vNode, null);
    vNode.dom = newDom;
    replaceChild(dom.parentNode, newDom, dom);
  } else {
    var text = vNode.children;
    if (dom.nodeValue !== text) {
      dom.nodeValue = text;
    }
    vNode.dom = dom;
  }
}
function hydrateVNode(vNode, dom, context, isSVG) {
  var flags = vNode.flags;
  if (flags & 14) {
    hydrateComponent(vNode, dom, context, isSVG, (flags & 4) > 0);
  } else if (flags & 481) {
    hydrateElement(vNode, dom, context, isSVG);
  } else if (flags & 16) {
    hydrateText(vNode, dom);
  } else if (flags & 512) {
    vNode.dom = dom;
  } else {
    throwError();
  }
}
function hydrate(input, parentDom, callback) {
  var dom = parentDom.firstChild;
  if (!isNull(dom)) {
    if (!isInvalid(input)) {
      hydrateVNode(input, dom, EMPTY_OBJ, false);
    }
    dom = parentDom.firstChild;
    while (dom = dom.nextSibling) {
      parentDom.removeChild(dom);
    }
  }
  if (LIFECYCLE.length > 0) {
    callAll(LIFECYCLE);
  }
  parentDom.$V = input;
  if (isFunction4(callback)) {
    callback();
  }
}
function replaceWithNewNode(lastNode, nextNode, parentDom, context, isSVG) {
  unmount(lastNode);
  replaceChild(parentDom, mount(nextNode, null, context, isSVG), lastNode.dom);
}
function patch(lastVNode, nextVNode, parentDom, context, isSVG) {
  var nextFlags = nextVNode.flags | 0;
  if (lastVNode.flags !== nextFlags || nextFlags & 2048) {
    replaceWithNewNode(lastVNode, nextVNode, parentDom, context, isSVG);
  } else if (nextFlags & 481) {
    patchElement(lastVNode, nextVNode, parentDom, context, isSVG, nextFlags);
  } else if (nextFlags & 14) {
    patchComponent(lastVNode, nextVNode, parentDom, context, isSVG, (nextFlags & 4) > 0);
  } else if (nextFlags & 16) {
    patchText(lastVNode, nextVNode);
  } else if (nextFlags & 512) {
    nextVNode.dom = lastVNode.dom;
  } else {
    patchPortal(lastVNode, nextVNode, context);
  }
}
function patchContentEditableChildren(dom, nextVNode) {
  if (dom.textContent !== nextVNode.children) {
    dom.textContent = nextVNode.children;
  }
}
function patchPortal(lastVNode, nextVNode, context) {
  var lastContainer = lastVNode.type;
  var nextContainer = nextVNode.type;
  var nextChildren = nextVNode.children;
  patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastVNode.children, nextChildren, lastContainer, context, false);
  nextVNode.dom = lastVNode.dom;
  if (lastContainer !== nextContainer && !isInvalid(nextChildren)) {
    var node2 = nextChildren.dom;
    lastContainer.removeChild(node2);
    nextContainer.appendChild(node2);
  }
}
function patchElement(lastVNode, nextVNode, parentDom, context, isSVG, nextFlags) {
  var nextTag = nextVNode.type;
  if (lastVNode.type !== nextTag) {
    replaceWithNewNode(lastVNode, nextVNode, parentDom, context, isSVG);
  } else {
    var dom = lastVNode.dom;
    var lastProps = lastVNode.props;
    var nextProps = nextVNode.props;
    var isFormElement = false;
    var hasControlledValue = false;
    var nextPropsOrEmpty;
    nextVNode.dom = dom;
    isSVG = isSVG || (nextFlags & 32) > 0;
    if (lastProps !== nextProps) {
      var lastPropsOrEmpty = lastProps || EMPTY_OBJ;
      nextPropsOrEmpty = nextProps || EMPTY_OBJ;
      if (nextPropsOrEmpty !== EMPTY_OBJ) {
        isFormElement = (nextFlags & 448) > 0;
        if (isFormElement) {
          hasControlledValue = isControlledFormElement(nextPropsOrEmpty);
        }
        for (var prop in nextPropsOrEmpty) {
          var lastValue = lastPropsOrEmpty[prop];
          var nextValue = nextPropsOrEmpty[prop];
          if (lastValue !== nextValue) {
            patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue, lastVNode);
          }
        }
      }
      if (lastPropsOrEmpty !== EMPTY_OBJ) {
        for (var prop$1 in lastPropsOrEmpty) {
          if (!nextPropsOrEmpty.hasOwnProperty(prop$1) && !isNullOrUndef(lastPropsOrEmpty[prop$1])) {
            patchProp(prop$1, lastPropsOrEmpty[prop$1], null, dom, isSVG, hasControlledValue, lastVNode);
          }
        }
      }
    }
    var lastChildren = lastVNode.children;
    var nextChildren = nextVNode.children;
    var nextRef = nextVNode.ref;
    var lastClassName = lastVNode.className;
    var nextClassName = nextVNode.className;
    if (nextFlags & 4096) {
      patchContentEditableChildren(dom, nextChildren);
    } else {
      patchChildren(lastVNode.childFlags, nextVNode.childFlags, lastChildren, nextChildren, dom, context, isSVG && nextTag !== "foreignObject");
    }
    if (isFormElement) {
      processElement(nextFlags, nextVNode, dom, nextPropsOrEmpty, false, hasControlledValue);
    }
    if (lastClassName !== nextClassName) {
      if (isNullOrUndef(nextClassName)) {
        dom.removeAttribute("class");
      } else if (isSVG) {
        dom.setAttribute("class", nextClassName);
      } else {
        dom.className = nextClassName;
      }
    }
    if (isFunction4(nextRef) && lastVNode.ref !== nextRef) {
      mountRef(dom, nextRef);
    }
  }
}
function patchChildren(lastChildFlags, nextChildFlags, lastChildren, nextChildren, parentDOM, context, isSVG) {
  switch (lastChildFlags) {
    case 2:
      switch (nextChildFlags) {
        case 2:
          patch(lastChildren, nextChildren, parentDOM, context, isSVG);
          break;
        case 1:
          remove6(lastChildren, parentDOM);
          break;
        default:
          remove6(lastChildren, parentDOM);
          mountArrayChildren(nextChildren, parentDOM, context, isSVG);
          break;
      }
      break;
    case 1:
      switch (nextChildFlags) {
        case 2:
          mount(nextChildren, parentDOM, context, isSVG);
          break;
        case 1:
          break;
        default:
          mountArrayChildren(nextChildren, parentDOM, context, isSVG);
          break;
      }
      break;
    default:
      if (nextChildFlags & 12) {
        var lastLength = lastChildren.length;
        var nextLength = nextChildren.length;
        if (lastLength === 0) {
          if (nextLength > 0) {
            mountArrayChildren(nextChildren, parentDOM, context, isSVG);
          }
        } else if (nextLength === 0) {
          removeAllChildren(parentDOM, lastChildren);
        } else if (nextChildFlags === 8 && lastChildFlags === 8) {
          patchKeyedChildren(lastChildren, nextChildren, parentDOM, context, isSVG, lastLength, nextLength);
        } else {
          patchNonKeyedChildren(lastChildren, nextChildren, parentDOM, context, isSVG, lastLength, nextLength);
        }
      } else if (nextChildFlags === 1) {
        removeAllChildren(parentDOM, lastChildren);
      } else if (nextChildFlags === 2) {
        removeAllChildren(parentDOM, lastChildren);
        mount(nextChildren, parentDOM, context, isSVG);
      }
      break;
  }
}
function updateClassComponent(instance, nextState, nextVNode, nextProps, parentDom, context, isSVG, force, fromSetState) {
  var lastState = instance.state;
  var lastProps = instance.props;
  nextVNode.children = instance;
  var renderOutput;
  if (instance.$UN) {
    return;
  }
  if (lastProps !== nextProps || nextProps === EMPTY_OBJ) {
    if (!fromSetState && isFunction4(instance.componentWillReceiveProps)) {
      instance.$BR = true;
      instance.componentWillReceiveProps(nextProps, context);
      if (instance.$UN) {
        return;
      }
      instance.$BR = false;
    }
    if (instance.$PSS) {
      nextState = combineFrom(nextState, instance.$PS);
      instance.$PSS = false;
      instance.$PS = null;
    }
  }
  var hasSCU = Boolean(instance.shouldComponentUpdate);
  if (force || !hasSCU || hasSCU && instance.shouldComponentUpdate(nextProps, nextState, context)) {
    if (isFunction4(instance.componentWillUpdate)) {
      instance.$BS = true;
      instance.componentWillUpdate(nextProps, nextState, context);
      instance.$BS = false;
    }
    instance.props = nextProps;
    instance.state = nextState;
    instance.context = context;
    if (isFunction4(options.beforeRender)) {
      options.beforeRender(instance);
    }
    renderOutput = instance.render(nextProps, nextState, context);
    if (isFunction4(options.afterRender)) {
      options.afterRender(instance);
    }
    var didUpdate = renderOutput !== NO_OP;
    var childContext;
    if (isFunction4(instance.getChildContext)) {
      childContext = instance.getChildContext();
    }
    if (isNullOrUndef(childContext)) {
      childContext = context;
    } else {
      childContext = combineFrom(context, childContext);
    }
    instance.$CX = childContext;
    if (didUpdate) {
      var lastInput = instance.$LI;
      var nextInput = handleComponentInput(renderOutput, nextVNode);
      patch(lastInput, nextInput, parentDom, childContext, isSVG);
      instance.$LI = nextInput;
      if (isFunction4(instance.componentDidUpdate)) {
        instance.componentDidUpdate(lastProps, lastState);
      }
    }
  } else {
    instance.props = nextProps;
    instance.state = nextState;
    instance.context = context;
  }
  nextVNode.dom = instance.$LI.dom;
}
function patchComponent(lastVNode, nextVNode, parentDom, context, isSVG, isClass3) {
  var nextType = nextVNode.type;
  var lastKey = lastVNode.key;
  var nextKey = nextVNode.key;
  if (lastVNode.type !== nextType || lastKey !== nextKey) {
    replaceWithNewNode(lastVNode, nextVNode, parentDom, context, isSVG);
  } else {
    var nextProps = nextVNode.props || EMPTY_OBJ;
    if (isClass3) {
      var instance = lastVNode.children;
      instance.$UPD = true;
      instance.$V = nextVNode;
      updateClassComponent(instance, instance.state, nextVNode, nextProps, parentDom, context, isSVG, false, false);
      instance.$UPD = false;
    } else {
      var shouldUpdate = true;
      var lastProps = lastVNode.props;
      var nextHooks = nextVNode.ref;
      var nextHooksDefined = !isNullOrUndef(nextHooks);
      var lastInput = lastVNode.children;
      nextVNode.dom = lastVNode.dom;
      nextVNode.children = lastInput;
      if (nextHooksDefined && isFunction4(nextHooks.onComponentShouldUpdate)) {
        shouldUpdate = nextHooks.onComponentShouldUpdate(lastProps, nextProps);
      }
      if (shouldUpdate !== false) {
        if (nextHooksDefined && isFunction4(nextHooks.onComponentWillUpdate)) {
          nextHooks.onComponentWillUpdate(lastProps, nextProps);
        }
        var nextInput = nextType(nextProps, context);
        if (nextInput !== NO_OP) {
          nextInput = handleComponentInput(nextInput, nextVNode);
          patch(lastInput, nextInput, parentDom, context, isSVG);
          nextVNode.children = nextInput;
          nextVNode.dom = nextInput.dom;
          if (nextHooksDefined && isFunction4(nextHooks.onComponentDidUpdate)) {
            nextHooks.onComponentDidUpdate(lastProps, nextProps);
          }
        }
      } else if (lastInput.flags & 14) {
        lastInput.parentVNode = nextVNode;
      }
    }
  }
}
function patchText(lastVNode, nextVNode) {
  var nextText = nextVNode.children;
  var dom = lastVNode.dom;
  if (nextText !== lastVNode.children) {
    dom.nodeValue = nextText;
  }
  nextVNode.dom = dom;
}
function patchNonKeyedChildren(lastChildren, nextChildren, dom, context, isSVG, lastChildrenLength, nextChildrenLength) {
  var commonLength = lastChildrenLength > nextChildrenLength ? nextChildrenLength : lastChildrenLength;
  var i = 0;
  var nextChild;
  var lastChild;
  for (; i < commonLength; i++) {
    nextChild = nextChildren[i];
    lastChild = lastChildren[i];
    if (nextChild.dom) {
      nextChild = nextChildren[i] = directClone(nextChild);
    }
    patch(lastChild, nextChild, dom, context, isSVG);
    lastChildren[i] = nextChild;
  }
  if (lastChildrenLength < nextChildrenLength) {
    for (i = commonLength; i < nextChildrenLength; i++) {
      nextChild = nextChildren[i];
      if (nextChild.dom) {
        nextChild = nextChildren[i] = directClone(nextChild);
      }
      mount(nextChild, dom, context, isSVG);
    }
  } else if (lastChildrenLength > nextChildrenLength) {
    for (i = commonLength; i < lastChildrenLength; i++) {
      remove6(lastChildren[i], dom);
    }
  }
}
function patchKeyedChildren(a, b, dom, context, isSVG, aLength, bLength) {
  var aEnd = aLength - 1;
  var bEnd = bLength - 1;
  var i;
  var j = 0;
  var aNode = a[j];
  var bNode = b[j];
  var nextPos;
  outer: {
    while (aNode.key === bNode.key) {
      if (bNode.dom) {
        b[j] = bNode = directClone(bNode);
      }
      patch(aNode, bNode, dom, context, isSVG);
      a[j] = bNode;
      j++;
      if (j > aEnd || j > bEnd) {
        break outer;
      }
      aNode = a[j];
      bNode = b[j];
    }
    aNode = a[aEnd];
    bNode = b[bEnd];
    while (aNode.key === bNode.key) {
      if (bNode.dom) {
        b[bEnd] = bNode = directClone(bNode);
      }
      patch(aNode, bNode, dom, context, isSVG);
      a[aEnd] = bNode;
      aEnd--;
      bEnd--;
      if (j > aEnd || j > bEnd) {
        break outer;
      }
      aNode = a[aEnd];
      bNode = b[bEnd];
    }
  }
  if (j > aEnd) {
    if (j <= bEnd) {
      nextPos = bEnd + 1;
      var nextNode = nextPos < bLength ? b[nextPos].dom : null;
      while (j <= bEnd) {
        bNode = b[j];
        if (bNode.dom) {
          b[j] = bNode = directClone(bNode);
        }
        j++;
        insertOrAppend(dom, mount(bNode, null, context, isSVG), nextNode);
      }
    }
  } else if (j > bEnd) {
    while (j <= aEnd) {
      remove6(a[j++], dom);
    }
  } else {
    var aStart = j;
    var bStart = j;
    var aLeft = aEnd - j + 1;
    var bLeft = bEnd - j + 1;
    var sources = [];
    for (i = 0; i < bLeft; i++) {
      sources.push(0);
    }
    var canRemoveWholeContent = aLeft === aLength;
    var moved = false;
    var pos = 0;
    var patched = 0;
    if (bLength < 4 || (aLeft | bLeft) < 32) {
      for (i = aStart; i <= aEnd; i++) {
        aNode = a[i];
        if (patched < bLeft) {
          for (j = bStart; j <= bEnd; j++) {
            bNode = b[j];
            if (aNode.key === bNode.key) {
              sources[j - bStart] = i + 1;
              if (canRemoveWholeContent) {
                canRemoveWholeContent = false;
                while (i > aStart) {
                  remove6(a[aStart++], dom);
                }
              }
              if (pos > j) {
                moved = true;
              } else {
                pos = j;
              }
              if (bNode.dom) {
                b[j] = bNode = directClone(bNode);
              }
              patch(aNode, bNode, dom, context, isSVG);
              patched++;
              break;
            }
          }
          if (!canRemoveWholeContent && j > bEnd) {
            remove6(aNode, dom);
          }
        } else if (!canRemoveWholeContent) {
          remove6(aNode, dom);
        }
      }
    } else {
      var keyIndex = {};
      for (i = bStart; i <= bEnd; i++) {
        keyIndex[b[i].key] = i;
      }
      for (i = aStart; i <= aEnd; i++) {
        aNode = a[i];
        if (patched < bLeft) {
          j = keyIndex[aNode.key];
          if (j !== void 0) {
            if (canRemoveWholeContent) {
              canRemoveWholeContent = false;
              while (i > aStart) {
                remove6(a[aStart++], dom);
              }
            }
            bNode = b[j];
            sources[j - bStart] = i + 1;
            if (pos > j) {
              moved = true;
            } else {
              pos = j;
            }
            if (bNode.dom) {
              b[j] = bNode = directClone(bNode);
            }
            patch(aNode, bNode, dom, context, isSVG);
            patched++;
          } else if (!canRemoveWholeContent) {
            remove6(aNode, dom);
          }
        } else if (!canRemoveWholeContent) {
          remove6(aNode, dom);
        }
      }
    }
    if (canRemoveWholeContent) {
      removeAllChildren(dom, a);
      mountArrayChildren(b, dom, context, isSVG);
    } else {
      if (moved) {
        var seq = lis_algorithm(sources);
        j = seq.length - 1;
        for (i = bLeft - 1; i >= 0; i--) {
          if (sources[i] === 0) {
            pos = i + bStart;
            bNode = b[pos];
            if (bNode.dom) {
              b[pos] = bNode = directClone(bNode);
            }
            nextPos = pos + 1;
            insertOrAppend(dom, mount(bNode, null, context, isSVG), nextPos < bLength ? b[nextPos].dom : null);
          } else if (j < 0 || i !== seq[j]) {
            pos = i + bStart;
            bNode = b[pos];
            nextPos = pos + 1;
            insertOrAppend(dom, bNode.dom, nextPos < bLength ? b[nextPos].dom : null);
          } else {
            j--;
          }
        }
      } else if (patched !== bLeft) {
        for (i = bLeft - 1; i >= 0; i--) {
          if (sources[i] === 0) {
            pos = i + bStart;
            bNode = b[pos];
            if (bNode.dom) {
              b[pos] = bNode = directClone(bNode);
            }
            nextPos = pos + 1;
            insertOrAppend(dom, mount(bNode, null, context, isSVG), nextPos < bLength ? b[nextPos].dom : null);
          }
        }
      }
    }
  }
}
function lis_algorithm(arr) {
  var p = arr.slice();
  var result = [0];
  var i;
  var j;
  var u;
  var v;
  var c;
  var len = arr.length;
  for (i = 0; i < len; i++) {
    var arrI = arr[i];
    if (arrI !== 0) {
      j = result[result.length - 1];
      if (arr[j] < arrI) {
        p[i] = j;
        result.push(i);
        continue;
      }
      u = 0;
      v = result.length - 1;
      while (u < v) {
        c = (u + v) / 2 | 0;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p[i] = result[u - 1];
        }
        result[u] = i;
      }
    }
  }
  u = result.length;
  v = result[u - 1];
  while (u-- > 0) {
    result[u] = v;
    v = p[v];
  }
  return result;
}
var documentBody = isBrowser ? document.body : null;
function render(input, parentDom, callback) {
  if (input === NO_OP) {
    return;
  }
  var rootInput = parentDom.$V;
  if (isNullOrUndef(rootInput)) {
    if (!isInvalid(input)) {
      if (input.dom) {
        input = directClone(input);
      }
      if (isNull(parentDom.firstChild)) {
        mount(input, parentDom, EMPTY_OBJ, false);
        parentDom.$V = input;
      } else {
        hydrate(input, parentDom);
      }
      rootInput = input;
    }
  } else {
    if (isNullOrUndef(input)) {
      remove6(rootInput, parentDom);
      parentDom.$V = null;
    } else {
      if (input.dom) {
        input = directClone(input);
      }
      patch(rootInput, input, parentDom, EMPTY_OBJ, false);
      rootInput = parentDom.$V = input;
    }
  }
  if (LIFECYCLE.length > 0) {
    callAll(LIFECYCLE);
  }
  if (isFunction4(callback)) {
    callback();
  }
  if (isFunction4(options.renderComplete)) {
    options.renderComplete(rootInput);
  }
  if (rootInput && rootInput.flags & 14) {
    return rootInput.children;
  }
}
var resolvedPromise = typeof Promise === "undefined" ? null : Promise.resolve();
var fallbackMethod = typeof requestAnimationFrame === "undefined" ? setTimeout : requestAnimationFrame.bind(window);
function nextTick(fn) {
  if (resolvedPromise) {
    return resolvedPromise.then(fn);
  }
  return fallbackMethod(fn);
}
function queueStateChanges(component, newState, callback, force) {
  if (isFunction4(newState)) {
    newState = newState(component.state, component.props, component.context);
  }
  var pending = component.$PS;
  if (isNullOrUndef(pending)) {
    component.$PS = newState;
  } else {
    for (var stateKey in newState) {
      pending[stateKey] = newState[stateKey];
    }
  }
  if (!component.$PSS && !component.$BR) {
    if (!component.$UPD) {
      component.$PSS = true;
      component.$UPD = true;
      applyState(component, force, callback);
      component.$UPD = false;
    } else {
      var queue = component.$QU;
      if (isNull(queue)) {
        queue = component.$QU = [];
        nextTick(promiseCallback(component, queue));
      }
      if (isFunction4(callback)) {
        queue.push(callback);
      }
    }
  } else {
    component.$PSS = true;
    if (component.$BR && isFunction4(callback)) {
      LIFECYCLE.push(callback.bind(component));
    }
  }
}
function promiseCallback(component, queue) {
  return function() {
    component.$QU = null;
    component.$UPD = true;
    applyState(component, false, function() {
      for (var i = 0, len = queue.length; i < len; i++) {
        queue[i].call(component);
      }
    });
    component.$UPD = false;
  };
}
function applyState(component, force, callback) {
  if (component.$UN) {
    return;
  }
  if (force || !component.$BR) {
    component.$PSS = false;
    var pendingState = component.$PS;
    var prevState = component.state;
    var nextState = combineFrom(prevState, pendingState);
    var props = component.props;
    var context = component.context;
    component.$PS = null;
    var vNode = component.$V;
    var lastInput = component.$LI;
    var parentDom = lastInput.dom && lastInput.dom.parentNode;
    updateClassComponent(component, nextState, vNode, props, parentDom, context, (vNode.flags & 32) > 0, force, true);
    if (component.$UN) {
      return;
    }
    if ((component.$LI.flags & 1024) === 0) {
      var dom = component.$LI.dom;
      while (!isNull(vNode = vNode.parentVNode)) {
        if ((vNode.flags & 14) > 0) {
          vNode.dom = dom;
        }
      }
    }
    if (LIFECYCLE.length > 0) {
      callAll(LIFECYCLE);
    }
  } else {
    component.state = component.$PS;
    component.$PS = null;
  }
  if (isFunction4(callback)) {
    callback.call(component);
  }
}
var Component = function Component2(props, context) {
  this.state = null;
  this.$BR = false;
  this.$BS = true;
  this.$PSS = false;
  this.$PS = null;
  this.$LI = null;
  this.$V = null;
  this.$UN = false;
  this.$CX = null;
  this.$UPD = true;
  this.$QU = null;
  this.props = props || EMPTY_OBJ;
  this.context = context || EMPTY_OBJ;
};
Component.prototype.forceUpdate = function forceUpdate(callback) {
  if (this.$UN) {
    return;
  }
  queueStateChanges(this, {}, callback, true);
};
Component.prototype.setState = function setState(newState, callback) {
  if (this.$UN) {
    return;
  }
  if (!this.$BS) {
    queueStateChanges(this, newState, callback, false);
  } else {
    return;
  }
};
Component.prototype.render = function render2(_nextProps, _nextState, _nextContext) {
};

// node_modules/inferno/index.esm.js
if (true) {
  console.warn("You are running production build of Inferno in development mode. Use dev:module entry point.");
}

// node_modules/table-js/lib/render/components/TableComponent.js
var TableComponent = class extends Component {
  constructor(props) {
    super(props);
    const injector = this._injector = props.injector;
    this._sheet = injector.get("sheet");
    this._changeSupport = injector.get("changeSupport");
    this._components = injector.get("components");
    this._eventBus = injector.get("eventBus");
    const throttle2 = injector.get("throttle");
    this.onElementsChanged = this.onElementsChanged.bind(this);
    this.onScroll = throttle2(this.onScroll.bind(this));
  }
  onElementsChanged() {
    this.forceUpdate();
  }
  onScroll() {
    this._eventBus.fire("sheet.scroll");
  }
  getChildContext() {
    return {
      changeSupport: this._changeSupport,
      components: this._components,
      injector: this._injector
    };
  }
  componentWillMount() {
    const {
      id
    } = this._sheet.getRoot();
    this._changeSupport.onElementsChanged(id, this.onElementsChanged);
  }
  componentWillUnmount() {
    const {
      id
    } = this._sheet.getRoot();
    this._changeSupport.offElementsChanged(id, this.onElementsChanged);
  }
  render() {
    const {
      rows,
      cols
    } = this._sheet.getRoot();
    const beforeTableComponents = this._components.getComponents("table.before");
    const afterTableComponents = this._components.getComponents("table.after");
    const Head = this._components.getComponent("table.head");
    const Body = this._components.getComponent("table.body");
    const Foot = this._components.getComponent("table.foot");
    return createVNode(1, "div", "tjs-container", [beforeTableComponents && beforeTableComponents.map((Component3, index2) => createComponentVNode(2, Component3, null, index2)), createVNode(1, "div", "tjs-table-container", createVNode(1, "table", "tjs-table", [Head && createComponentVNode(2, Head, {
      "rows": rows,
      "cols": cols
    }), Body && createComponentVNode(2, Body, {
      "rows": rows,
      "cols": cols
    }), Foot && createComponentVNode(2, Foot, {
      "rows": rows,
      "cols": cols
    })], 0), 2, {
      "onScroll": this.onScroll
    }), afterTableComponents && afterTableComponents.map((Component3, index2) => createComponentVNode(2, Component3, null, index2))], 0);
  }
};

// node_modules/table-js/lib/render/Renderer.js
var Renderer = class {
  constructor(changeSupport, components, config, eventBus, injector) {
    const {
      container
    } = config;
    this._container = container;
    eventBus.on("root.added", () => {
      render(createComponentVNode(2, TableComponent, {
        "injector": injector
      }), container);
    });
    eventBus.on("root.remove", () => {
      render(null, container);
    });
  }
  getContainer() {
    return this._container;
  }
};
Renderer.$inject = ["changeSupport", "components", "config.renderer", "eventBus", "injector"];

// node_modules/table-js/lib/render/index.js
var render_default = {
  __init__: ["changeSupport", "components", "renderer"],
  changeSupport: ["type", ChangeSupport],
  components: ["type", Components],
  renderer: ["type", Renderer]
};

// node_modules/table-js/lib/core/Sheet.js
var Sheet = class {
  constructor(elementRegistry, eventBus) {
    this._elementRegistry = elementRegistry;
    this._eventBus = eventBus;
    this._root = null;
    eventBus.on("table.clear", () => {
      this.setRoot(null);
    });
  }
  setRoot(root) {
    if (this._root) {
      const oldRoot = this._root;
      this._eventBus.fire("root.remove", {
        root: oldRoot
      });
      this._root = null;
      this._eventBus.fire("root.removed", {
        root: oldRoot
      });
    }
    if (root) {
      this._eventBus.fire("root.add", {
        root
      });
    }
    this._root = root;
    if (root) {
      this._eventBus.fire("root.added", {
        root
      });
    }
  }
  getRoot() {
    if (!this._root) {
      this.setRoot({
        id: "__implicitroot",
        rows: [],
        cols: []
      });
    }
    return this._root;
  }
  addRow(row, index2) {
    const root = this.getRoot();
    if (root.cols.length != row.cells.length) {
      throw new Error("number of cells is not equal to number of cols");
    }
    if (typeof index2 === "undefined") {
      index2 = root.rows.length;
    }
    addAtIndex(index2, root.rows, row);
    row.root = root;
    this._elementRegistry.add(row);
    row.cells.forEach((cell, idx) => {
      this._elementRegistry.add(cell);
      cell.row = row;
      cell.col = root.cols[idx];
      addAtIndex(index2, root.cols[idx].cells, cell);
    });
    this._eventBus.fire("row.add", {
      row
    });
    return row;
  }
  removeRow(row) {
    const root = this.getRoot();
    if (typeof row === "string") {
      row = this._elementRegistry.get(row);
    }
    const index2 = root.rows.indexOf(row);
    if (index2 === -1) {
      return;
    }
    removeAtIndex(index2, root.rows);
    row.root = void 0;
    this._elementRegistry.remove(row);
    row.cells.forEach((cell, idx) => {
      this._elementRegistry.remove(cell);
      cell.col = void 0;
      removeAtIndex(index2, root.cols[idx].cells);
    });
    this._eventBus.fire("row.remove", {
      row
    });
  }
  addCol(col, index2) {
    const root = this.getRoot();
    this._elementRegistry.add(col);
    if (root.rows.length != col.cells.length) {
      throw new Error("number of cells is not equal to number of rows");
    }
    if (typeof index2 === "undefined") {
      index2 = root.cols.length;
    }
    addAtIndex(index2, root.cols, col);
    col.root = root;
    col.cells.forEach((cell, idx) => {
      this._elementRegistry.add(cell);
      cell.col = col;
      cell.row = root.rows[idx];
      addAtIndex(index2, root.rows[idx].cells, cell);
    });
    this._eventBus.fire("col.add", {
      col
    });
    return col;
  }
  removeCol(col) {
    const root = this.getRoot();
    if (typeof col === "string") {
      col = this._elementRegistry.get(col);
    }
    const index2 = root.cols.indexOf(col);
    if (index2 === -1) {
      return;
    }
    removeAtIndex(index2, root.cols);
    col.root = void 0;
    this._elementRegistry.remove(col);
    col.cells.forEach((cell, idx) => {
      this._elementRegistry.remove(cell);
      cell.row = void 0;
      removeAtIndex(index2, root.rows[idx].cells);
    });
    this._eventBus.fire("col.remove", {
      col
    });
  }
  resized() {
    this._eventBus.fire("sheet.resized");
  }
};
Sheet.$inject = ["elementRegistry", "eventBus"];
function addAtIndex(index2, array, value) {
  return array.splice(index2, 0, value);
}
function removeAtIndex(index2, array) {
  return array.splice(index2, 1);
}

// node_modules/table-js/lib/core/Throttle.js
function ThrottleFactory(config = true) {
  const timeout = typeof config === "number" ? config : config ? 300 : 0;
  if (timeout) {
    return (fn) => throttle(fn, timeout);
  } else {
    return (fn) => fn;
  }
}
ThrottleFactory.$inject = ["config.throttle"];

// node_modules/table-js/lib/core/index.js
var core_default3 = {
  __depends__: [render_default],
  __init__: ["elementFactory", "sheet"],
  elementFactory: ["type", ElementFactory2],
  elementRegistry: ["type", ElementRegistry2],
  eventBus: ["type", EventBus],
  sheet: ["type", Sheet],
  throttle: ["factory", ThrottleFactory]
};

// node_modules/table-js/lib/Table.js
var Table = class {
  constructor(options2 = {}) {
    let {
      injector
    } = options2;
    if (!injector) {
      let {
        modules,
        config
      } = this._init(options2);
      injector = createInjector2(config, modules);
    }
    this.get = injector.get;
    this.invoke = injector.invoke;
    this.get("eventBus").fire("table.init");
    this.get("eventBus").fire("diagram.init");
  }
  _init(options2) {
    let {
      modules,
      ...config
    } = options2;
    return {
      modules,
      config
    };
  }
  destroy() {
    const eventBus = this.get("eventBus");
    eventBus.fire("table.destroy");
    eventBus.fire("diagram.destroy");
  }
  clear() {
    const eventBus = this.get("eventBus");
    eventBus.fire("table.clear");
    eventBus.fire("diagram.clear");
  }
};
function createInjector2(config, modules) {
  const bootstrapModules = [{
    config: ["value", config]
  }, core_default3].concat(modules || []);
  const injector = new Injector(bootstrapModules);
  injector.init();
  return injector;
}

// node_modules/table-js/lib/index.js
var lib_default = Table;

// node_modules/dmn-js-decision-table/lib/import/Util.js
function elementToString(element) {
  if (!element) {
    return "<null>";
  }
  const id = element.id ? ' id="'.concat(element.id, '"') : "";
  return "<".concat(element.$type).concat(id, " />");
}

// node_modules/dmn-js-decision-table/lib/import/TableTreeWalker.js
function TableTreeWalker(handler, options2) {
  function visit(element, ctx, definitions) {
    var gfx = element.gfx;
    if (gfx) {
      throw new Error("already rendered ".concat(elementToString(element)));
    }
    return handler.element(element, ctx, definitions);
  }
  function visitTable(element) {
    return handler.table(element);
  }
  function handleDecision(decision) {
    if (!decision.id) {
      decision.id = "decision";
    }
    const table = decision.decisionLogic;
    if (table) {
      if (!table.output) {
        throw new Error("missing output for ".concat(elementToString(table)));
      }
      const ctx = visitTable(table);
      if (table.input) {
        handleClauses(table.input, ctx, table);
      }
      handleClauses(table.output, ctx, table);
      handleRules(table.rule, ctx, table);
    } else {
      throw new Error("no table for ".concat(elementToString(decision)));
    }
  }
  function handleClauses(clauses, context, definitions) {
    forEach2(clauses, function(e2) {
      visit(e2, context, definitions);
    });
  }
  function handleRules(rules, context, definitions) {
    forEach2(rules, function(e2) {
      visit(e2, context, definitions);
      handleEntry(e2.inputEntry, e2);
      handleEntry(e2.outputEntry, e2);
    });
  }
  function handleEntry(entry, context, definitions) {
    forEach2(entry, function(e2) {
      visit(e2, context, definitions);
    });
  }
  return {
    handleDecision
  };
}

// node_modules/dmn-js-decision-table/lib/import/Importer.js
function importDecision(decisionTable, decision, done) {
  const importer = decisionTable.get("tableImporter"), eventBus = decisionTable.get("eventBus"), sheet = decisionTable.get("sheet");
  let hasModeling = decisionTable.get("modeling", false);
  let error3, warnings = [];
  function render3(decision2) {
    const visitor = {
      create(type, parent, clause, rule) {
        return importer.create(type, parent, clause, rule);
      },
      table(element) {
        return importer.add(element);
      },
      element(element, parentShape, definitions) {
        return importer.add(element, parentShape, definitions);
      },
      error(message, context) {
        warnings.push({
          message,
          context
        });
      }
    };
    const walker = new TableTreeWalker(visitor, {
      canAddMissingEntries: hasModeling
    });
    walker.handleDecision(decision2);
  }
  eventBus.fire("import.render.start", {
    decision
  });
  try {
    render3(decision);
  } catch (e2) {
    error3 = e2;
  }
  eventBus.fire("import.render.complete", {
    error: error3,
    warnings
  });
  eventBus.fire("elements.changed", {
    elements: [sheet.getRoot()]
  });
  done(error3, warnings);
}

// node_modules/table-js/lib/components/utils/classNames.js
function newSet() {
  return {
    elements: [],
    index: {}
  };
}
function add2(set3, element) {
  const {
    elements,
    index: index2
  } = set3;
  if (index2[element]) {
    return set3;
  } else {
    return {
      elements: [...elements, element],
      index: {
        ...index2,
        [element]: true
      }
    };
  }
}
function join(set3, separator) {
  return set3.elements.join(separator);
}
function classNames(...args) {
  let set3 = newSet();
  args.forEach(function(item) {
    const type = typeof item;
    if (type === "string" && item.length > 0) {
      set3 = add2(set3, item);
    } else if (type === "object" && item !== null) {
      Object.keys(item).forEach(function(key) {
        const value = item[key];
        if (value) {
          set3 = add2(set3, key);
        }
      });
    }
  });
  return join(set3, " ");
}

// node_modules/table-js/lib/components/utils/inject.js
function inject(component) {
  const Type = component.constructor;
  return injectType(Type, component);
}
function injectType(Type, component) {
  const annotation = Type.$inject;
  if (!annotation) {
    return;
  }
  const {
    injector
  } = component.context;
  const setupFn = [...annotation, function(...args) {
    for (const idx in args) {
      const name2 = annotation[idx];
      const value = args[idx];
      component[name2] = value;
    }
  }];
  injector.invoke(setupFn);
}

// node_modules/table-js/lib/components/utils/compose.js
function compose(self2, ...fns) {
  return function(...args) {
    let result;
    fns.forEach(function(fn) {
      result = fn.call(self2, ...args);
      if (typeof result !== "undefined") {
        return false;
      }
    });
    return result;
  }.bind(self2);
}

// node_modules/table-js/lib/components/utils/mixin.js
function mixin(component, mixinDef) {
  Object.keys(mixinDef).forEach(function(key) {
    if (key === "$inject" || key === "__init") {
      return;
    }
    const mixinFn = mixinDef[key];
    if (key === "constructor") {
      mixinFn.call(component, component.props, component.context);
    }
    const componentFn = component[key];
    if (typeof componentFn !== "undefined") {
      if (typeof componentFn !== "function") {
        throw new Error(`failed to mixin <${key}>: cannot combine with non-fn component value`);
      }
      component[key] = compose(component, componentFn, mixinFn);
    } else {
      component[key] = mixinFn.bind(component);
    }
  });
  if ("$inject" in mixinDef) {
    injectType(mixinDef, component);
  }
  if ("__init" in mixinDef) {
    mixinDef.__init.call(component, component.props, component.context);
  }
}

// node_modules/table-js/lib/components/mixins/SelectionAware.js
var SelectionAware = {
  getSelectionClasses() {
    const {
      selected,
      selectedSecondary,
      focussed
    } = this.state;
    return classNames({
      "selected": selected,
      "selected-secondary": selectedSecondary,
      "focussed": focussed
    });
  },
  selectionChanged(newSelection) {
    this.setState(newSelection);
  },
  componentWillUpdate(newProps) {
    if (newProps.elementId !== this.props.elementId) {
      this.updateSelectionSubscription(false);
    }
  },
  componentDidUpdate(oldProps) {
    if (oldProps.elementId !== this.props.elementId) {
      this.updateSelectionSubscription(true);
    }
  },
  componentDidMount() {
    this.updateSelectionSubscription(true);
  },
  componentWillUnmount() {
    this.updateSelectionSubscription(false);
  },
  updateSelectionSubscription(enable) {
    const {
      elementId
    } = this.props;
    if (!elementId) {
      return;
    }
    if (elementId) {
      this.eventBus[enable ? "on" : "off"](`selection.${elementId}.changed`, this.selectionChanged);
    }
  }
};
var SelectionAware_default = SelectionAware;
SelectionAware.$inject = ["eventBus"];

// node_modules/table-js/lib/components/BaseCell.js
var BaseCell = class extends Component {
  constructor(props, context) {
    super(props, context);
    mixin(this, SelectionAware_default);
    inject(this);
  }
  getRenderProps(...cls) {
    const {
      className,
      elementId,
      coords,
      ...props
    } = this.props;
    const baseProps = {
      className: classNames(...cls, this.getSelectionClasses(), className)
    };
    if (elementId) {
      baseProps["data-element-id"] = elementId;
    }
    if (coords) {
      baseProps["data-coords"] = coords;
    }
    return {
      ...baseProps,
      ...props
    };
  }
};

// node_modules/table-js/lib/components/Cell.js
var HeaderCell = class extends BaseCell {
  constructor(props, context) {
    super(props, context);
    this.state = {};
  }
  render() {
    const {
      children
    } = this.props;
    const props = this.getRenderProps("cell");
    return normalizeProps(createVNode(1, "td", null, children, 0, {
      ...props
    }));
  }
};

// node_modules/dmn-js-shared/lib/components/mixins/ComponentWithSlots.js
var _excluded2 = ["type", "context"];
var _excluded22 = ["type", "context"];
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties2(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var ComponentWithSlots = {
  slotFill(slotProps, DefaultFill) {
    const type = slotProps.type, context = slotProps.context, props = _objectWithoutProperties2(slotProps, _excluded2);
    const Fill = this.components.getComponent(type, context) || DefaultFill;
    if (Fill) {
      return normalizeProps(createComponentVNode(2, Fill, _objectSpread3(_objectSpread3({}, context), props)));
    }
    return null;
  },
  slotFills(slotProps) {
    const type = slotProps.type, context = slotProps.context, props = _objectWithoutProperties2(slotProps, _excluded22);
    const fills = this.components.getComponents(type, context);
    return fills.map((Fill) => normalizeProps(createComponentVNode(2, Fill, _objectSpread3(_objectSpread3({}, context), props))));
  }
};
var ComponentWithSlots_default = ComponentWithSlots;
ComponentWithSlots.$inject = ["components"];

// node_modules/dmn-js-decision-table/lib/features/annotations/components/AnnotationHeader.js
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var MIN_WIDTH = 400;
var AnnotationHeader = class extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty4(this, "onElementsChanged", () => {
      this.forceUpdate();
    });
    mixin(this, ComponentWithSlots_default);
    inject(this);
  }
  componentDidMount() {
    this.changeSupport.onElementsChanged(this.getRoot(), this.onElementsChanged);
  }
  componentWillUnmount() {
    this.changeSupport.offElementsChanged(this.getRoot(), this.onElementsChanged);
  }
  getRoot() {
    return this.sheet.getRoot();
  }
  render() {
    const decisionTable = this.getRoot();
    const annotationsWidth = decisionTable.businessObject.get("annotationsWidth");
    const width = (annotationsWidth || MIN_WIDTH) + "px";
    return createVNode(1, "th", "annotation header", [this.slotFills({
      type: "cell-inner",
      context: {
        cellType: "annotations",
        col: this.sheet.getRoot(),
        minWidth: MIN_WIDTH
      }
    }), this.translate("Annotations")], 0, {
      "style": {
        width
      }
    });
  }
};
AnnotationHeader.$inject = ["changeSupport", "sheet", "translate"];

// node_modules/dmn-js-decision-table/lib/features/annotations/components/AnnotationCell.js
function AnnotationCell(props) {
  const row = props.row;
  const _row$businessObject = row.businessObject, id = _row$businessObject.id, description = _row$businessObject.description;
  return createComponentVNode(2, HeaderCell, {
    "className": "annotation",
    "elementId": id,
    children: description || "-"
  });
}

// node_modules/dmn-js-decision-table/lib/features/annotations/AnnotationsProvider.js
function AnnotationsProvider(components) {
  components.onGetComponent("cell", (_ref) => {
    let cellType = _ref.cellType;
    if (cellType === "after-label-cells") {
      return AnnotationHeader;
    } else if (cellType === "after-rule-cells") {
      return AnnotationCell;
    }
  });
}
AnnotationsProvider.$inject = ["components"];

// node_modules/dmn-js-decision-table/lib/features/annotations/index.js
var annotations_default = {
  __init__: ["annotationsProvider"],
  annotationsProvider: ["type", AnnotationsProvider]
};

// node_modules/dmn-js-decision-table/lib/import/TableImporter.js
function elementData2(semantic, attrs) {
  return assign2({
    id: semantic.id,
    type: semantic.$type,
    businessObject: semantic
  }, attrs);
}
var TableImporter = class {
  constructor(elementFactory, eventBus, sheet) {
    this._elementFactory = elementFactory;
    this._eventBus = eventBus;
    this._sheet = sheet;
  }
  add(semantic) {
    let element;
    if (is(semantic, "dmn:DecisionTable")) {
      element = this._elementFactory.createRoot(elementData2(semantic));
      this._sheet.setRoot(element);
    } else if (is(semantic, "dmn:InputClause")) {
      element = this._elementFactory.createCol(elementData2(semantic));
      this._sheet.addCol(element);
    } else if (is(semantic, "dmn:OutputClause")) {
      element = this._elementFactory.createCol(elementData2(semantic));
      this._sheet.addCol(element);
    } else if (is(semantic, "dmn:DecisionRule")) {
      if (!semantic.inputEntry) {
        semantic.inputEntry = [];
      }
      if (!semantic.outputEntry) {
        semantic.outputEntry = [];
      }
      const cells = [...semantic.inputEntry, ...semantic.outputEntry].map((entry) => {
        return this._elementFactory.createCell(elementData2(entry));
      });
      element = this._elementFactory.createRow(assign2(elementData2(semantic), {
        cells
      }));
      this._sheet.addRow(element);
    }
    this._eventBus.fire("dmnElement.added", {
      element
    });
    return element;
  }
};
TableImporter.$inject = ["elementFactory", "eventBus", "sheet"];

// node_modules/dmn-js-decision-table/lib/import/index.js
var import_default2 = {
  __depends__: [translate_default],
  tableImporter: ["type", TableImporter]
};

// node_modules/dmn-js-decision-table/lib/core/index.js
var core_default4 = {
  __depends__: [import_default2, render_default]
};

// node_modules/dmn-js-decision-table/lib/features/decision-table-head/components/DecisionTableHead.js
function _defineProperty5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DecisionTableHead = class extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty5(this, "onElementsChanged", () => {
      this.forceUpdate();
    });
    mixin(this, ComponentWithSlots_default);
    this._sheet = context.injector.get("sheet");
    this._changeSupport = context.changeSupport;
  }
  componentWillMount() {
    const root = this._sheet.getRoot();
    this._changeSupport.onElementsChanged(root.id, this.onElementsChanged);
  }
  componentWillUnmount() {
    const root = this._sheet.getRoot();
    this._changeSupport.offElementsChanged(root.id, this.onElementsChanged);
  }
  render() {
    const root = this._sheet.getRoot();
    if (!is(root, "dmn:DMNElement")) {
      return null;
    }
    const businessObject = getBusinessObject(root);
    const inputs = businessObject.input, outputs = businessObject.output;
    return createVNode(1, "thead", null, createVNode(1, "tr", null, [createVNode(1, "th", "index-column"), this.slotFills({
      type: "cell",
      context: {
        cellType: "before-label-cells"
      }
    }), inputs && inputs.map((input, index2) => {
      const width = input.width || "192px";
      return this.slotFill({
        type: "cell",
        context: {
          cellType: "input-header",
          input,
          index: index2,
          inputsLength: inputs.length,
          width
        },
        key: input.id
      }, DefaultInputHeaderCell);
    }), outputs.map((output, index2) => {
      return this.slotFill({
        type: "cell",
        context: {
          cellType: "output-header",
          output,
          index: index2,
          outputsLength: outputs.length
        },
        key: output.id
      }, DefaultOutputHeaderCell);
    }), this.slotFills({
      type: "cell",
      context: {
        cellType: "after-label-cells"
      }
    })], 0), 2);
  }
};
function DefaultInputHeaderCell(props, context) {
  const input = props.input, className = props.className, index2 = props.index;
  const label = input.label, inputExpression = input.inputExpression, inputValues = input.inputValues;
  const translate3 = context.injector.get("translate");
  const actualClassName = (className || "") + " input-cell";
  return createVNode(1, "th", actualClassName, [createVNode(1, "div", "clause", index2 === 0 ? translate3("When") : translate3("And"), 0), label ? createVNode(1, "div", "input-label", label, 0, {
    "title": translate3("Input Label")
  }) : createVNode(1, "div", "input-expression", inputExpression.text, 0, {
    "title": translate3("Input Expression")
  }), createVNode(1, "div", "input-variable", inputValues && inputValues.text || inputExpression.typeRef, 0, {
    "title": inputValues && inputValues.text ? translate3("Input Values") : translate3("Input Type")
  })], 0, {
    "data-col-id": input.id
  }, input.id);
}
function DefaultOutputHeaderCell(props, context) {
  const output = props.output, className = props.className, index2 = props.index;
  const label = output.label, name2 = output.name, outputValues = output.outputValues, typeRef = output.typeRef;
  const translate3 = context.injector.get("translate");
  const actualClassName = (className || "") + " output-cell";
  return createVNode(1, "th", actualClassName, [createVNode(1, "div", "clause", index2 === 0 ? translate3("Then") : translate3("And"), 0), label ? createVNode(1, "div", "output-label", label, 0, {
    "title": translate3("Output Label")
  }) : createVNode(1, "div", "output-name", name2, 0, {
    "title": translate3("Output Name")
  }), createVNode(1, "div", "output-variable", outputValues && outputValues.text || typeRef, 0, {
    "title": outputValues && outputValues.text ? translate3("Output Values") : translate3("Output Type")
  })], 0, null, output.id);
}

// node_modules/dmn-js-decision-table/lib/features/decision-table-head/DecisionTableHeadProvider.js
function DecisionTableHeadProvider(components) {
  components.onGetComponent("table.head", () => DecisionTableHead);
}
DecisionTableHeadProvider.$inject = ["components"];

// node_modules/dmn-js-decision-table/lib/features/decision-table-head/index.js
var decision_table_head_default = {
  __init__: ["decisionTableHeadProvider"],
  decisionTableHeadProvider: ["type", DecisionTableHeadProvider]
};

// node_modules/dmn-js-decision-table/lib/features/decision-table-properties/components/DecisionTablePropertiesComponent.js
var DecisionTablePropertiesComponent = class extends Component {
  constructor(props, context) {
    super(props, context);
    this._translate = context.injector.get("translate");
    inject(this);
  }
  render() {
    const root = this.sheet.getRoot();
    if (!is(root, "dmn:DMNElement")) {
      return null;
    }
    const name2 = root.businessObject.$parent.name;
    const HitPolicy2 = this.components.getComponent("hit-policy") || NullComponent;
    return createVNode(1, "div", "decision-table-properties", [createVNode(1, "div", "decision-table-name", name2, 0, {
      "title": this._translate("Decision Name: ") + name2
    }), createVNode(1, "div", "decision-table-header-separator"), createComponentVNode(2, HitPolicy2)], 4);
  }
};
DecisionTablePropertiesComponent.$inject = ["sheet", "components"];
function NullComponent() {
  return null;
}

// node_modules/dmn-js-decision-table/lib/features/decision-table-properties/DecisionTableProperties.js
var LOW_PRIORITY4 = 500;
var DecisionTableProperties = class {
  constructor(components) {
    components.onGetComponent("table.before", LOW_PRIORITY4, () => {
      return DecisionTablePropertiesComponent;
    });
  }
};
DecisionTableProperties.$inject = ["components"];

// node_modules/dmn-js-decision-table/lib/features/decision-table-properties/index.js
var decision_table_properties_default = {
  __init__: ["decisionTableProperties"],
  decisionTableProperties: ["type", DecisionTableProperties]
};

// node_modules/dmn-js-decision-table/lib/features/decision-rule-indices/components/DecisionRuleIndexCellComponent.js
var DecisionRulesIndexCellComponent = class extends Component {
  render() {
    const _this$props = this.props, row = _this$props.row, rowIndex = _this$props.rowIndex;
    const components = this.context.components;
    const innerComponents = components.getComponents("cell-inner", {
      cellType: "rule-index",
      row,
      rowIndex
    });
    return createVNode(1, "td", "rule-index", [innerComponents && innerComponents.map((InnerComponent) => createComponentVNode(2, InnerComponent, {
      "row": row,
      "rowIndex": rowIndex
    })), rowIndex + 1], 0, {
      "data-element-id": row.id,
      "data-row-id": row.id
    });
  }
};

// node_modules/dmn-js-decision-table/lib/features/decision-rule-indices/DecisionRuleIndices.js
var DecisionRuleIndices = class {
  constructor(components) {
    components.onGetComponent("cell", (_ref) => {
      let cellType = _ref.cellType;
      if (cellType === "before-rule-cells") {
        return DecisionRulesIndexCellComponent;
      }
    });
  }
};
DecisionRuleIndices.$inject = ["components"];

// node_modules/dmn-js-decision-table/lib/features/decision-rule-indices/index.js
var decision_rule_indices_default = {
  __init__: ["decisionRuleIndices"],
  decisionRuleIndices: ["type", DecisionRuleIndices]
};

// node_modules/dmn-js-shared/lib/features/expression-languages/ExpressionLanguages.js
var EXPRESSION_LANGUAGE_OPTIONS = [{
  label: "FEEL",
  value: "feel"
}];
var ExpressionLanguages = class {
  constructor(injector) {
    this._injector = injector;
    const config = injector.get("config.expressionLanguages") || {};
    this._config = {
      options: EXPRESSION_LANGUAGE_OPTIONS,
      defaults: {
        editor: "feel"
      }
    };
    if (config.options) {
      this._config.options = config.options;
    }
    const legacyDefaults = this._getLegacyDefaults();
    assign2(this._config.defaults, legacyDefaults, config.defaults);
  }
  getDefault(componentName) {
    const defaults = this._config.defaults;
    const defaultFromConfig = defaults[componentName] || defaults.editor;
    return this._getLanguageByValue(defaultFromConfig) || this.getAll()[0];
  }
  getLabel(expressionLanguageValue) {
    const langauge = this._getLanguageByValue(expressionLanguageValue);
    return langauge ? langauge.label : expressionLanguageValue;
  }
  getAll() {
    return this._config.options;
  }
  _getLegacyDefaults() {
    const defaults = {}, injector = this._injector;
    const inputCellValue = injector.get("config.defaultInputExpressionLanguage");
    const outputCellValue = injector.get("config.defaultOutputExpressionLanguage");
    if (inputCellValue) {
      defaults.inputCell = inputCellValue;
    }
    if (outputCellValue) {
      defaults.outputCell = outputCellValue;
    }
    return defaults;
  }
  _getLanguageByValue(value) {
    return find2(this.getAll(), (language) => value === language.value);
  }
};
ExpressionLanguages.$inject = ["injector"];

// node_modules/dmn-js-shared/lib/features/expression-languages/index.js
var expression_languages_default = {
  __init__: ["expressionLanguages"],
  expressionLanguages: ["type", ExpressionLanguages]
};

// node_modules/dmn-js-decision-table/lib/features/decision-rules/components/DecisionRulesBodyComponent.js
var DecisionRulesBodyComponent = class extends Component {
  render(_ref) {
    let rows = _ref.rows, cols = _ref.cols;
    const components = this.context.components;
    return createVNode(1, "tbody", null, rows.map((row, rowIndex) => {
      const RowComponent = components.getComponent("row", {
        rowType: "rule"
      });
      return RowComponent && createComponentVNode(2, RowComponent, {
        "row": row,
        "rowIndex": rowIndex,
        "cols": cols
      }, row.id);
    }), 0);
  }
};

// node_modules/dmn-js-decision-table/lib/features/decision-rules/components/DecisionRulesRowComponent.js
var DecisionRulesRowComponent = class extends Component {
  constructor(props, context) {
    super(props, context);
    mixin(this, ComponentWithSlots_default);
  }
  render() {
    const _this$props = this.props, row = _this$props.row, rowIndex = _this$props.rowIndex, cols = _this$props.cols;
    const cells = row.cells;
    return createVNode(1, "tr", null, [this.slotFills({
      type: "cell",
      context: {
        cellType: "before-rule-cells",
        row,
        rowIndex
      }
    }), cells.map((cell, colIndex) => {
      return this.slotFill({
        type: "cell",
        context: {
          cellType: "rule",
          cell,
          rowIndex,
          colIndex
        },
        key: cell.id,
        row,
        col: cols[colIndex]
      });
    }), this.slotFills({
      type: "cell",
      context: {
        cellType: "after-rule-cells",
        row,
        rowIndex
      }
    })], 0);
  }
};

// node_modules/dmn-js-decision-table/lib/features/decision-rules/components/DecisionRulesCellComponent.js
var DecisionRulesCellComponent = class extends Component {
  render() {
    const _this$props = this.props, cell = _this$props.cell, row = _this$props.row, col = _this$props.col;
    if (is(cell, "dmn:UnaryTests")) {
      return createComponentVNode(2, HeaderCell, {
        "className": "input-cell",
        "elementId": cell.id,
        "data-row-id": row.id,
        "data-col-id": col.id,
        children: cell.businessObject.text
      });
    } else {
      return createComponentVNode(2, HeaderCell, {
        "className": "output-cell",
        "elementId": cell.id,
        "data-row-id": row.id,
        "data-col-id": col.id,
        children: cell.businessObject.text
      });
    }
  }
};

// node_modules/dmn-js-decision-table/lib/features/decision-rules/DecisionRules.js
var Rules = class {
  constructor(components) {
    components.onGetComponent("table.body", () => DecisionRulesBodyComponent);
    components.onGetComponent("row", (_ref) => {
      let rowType = _ref.rowType;
      if (rowType === "rule") {
        return DecisionRulesRowComponent;
      }
    });
    components.onGetComponent("cell", (_ref2) => {
      let cellType = _ref2.cellType;
      if (cellType === "rule") {
        return DecisionRulesCellComponent;
      }
    });
  }
};
Rules.$inject = ["components"];

// node_modules/dmn-js-decision-table/lib/features/decision-rules/index.js
var decision_rules_default = {
  __depends__: [expression_languages_default],
  __init__: ["decisionRules"],
  decisionRules: ["type", Rules]
};

// node_modules/dmn-js-decision-table/lib/features/hit-policy/HitPolicies.js
var HIT_POLICIES = [{
  label: "Unique",
  value: {
    hitPolicy: "UNIQUE",
    aggregation: void 0
  },
  explanation: "No overlap is possible and all rules are disjoint. Only a single rule can be matched"
}, {
  label: "First",
  value: {
    hitPolicy: "FIRST",
    aggregation: void 0
  },
  explanation: "Rules may overlap. The first matching rule will be chosen"
}, {
  label: "Priority",
  value: {
    hitPolicy: "PRIORITY",
    aggregation: void 0
  },
  explanation: "Rules may overlap. The one with the highest priority will be chosen"
}, {
  label: "Any",
  value: {
    hitPolicy: "ANY",
    aggregation: void 0
  },
  explanation: "Rules may overlap. Their output have to match"
}, {
  label: "Collect",
  value: {
    hitPolicy: "COLLECT",
    aggregation: void 0
  },
  explanation: "Collects the values of all matching rules"
}, {
  label: "Collect (Sum)",
  value: {
    hitPolicy: "COLLECT",
    aggregation: "SUM"
  },
  explanation: "Collects the values of all matching rules and sums up to a single value"
}, {
  label: "Collect (Min)",
  value: {
    hitPolicy: "COLLECT",
    aggregation: "MIN"
  },
  explanation: "Collects the values of all matching rules and uses the lowest value"
}, {
  label: "Collect (Max)",
  value: {
    hitPolicy: "COLLECT",
    aggregation: "MAX"
  },
  explanation: "Collects the values of all matching rules and uses the highest value"
}, {
  label: "Collect (Count)",
  value: {
    hitPolicy: "COLLECT",
    aggregation: "COUNT"
  },
  explanation: "Collects the values of all matching rules and counts the number of them"
}, {
  label: "Rule order",
  value: {
    hitPolicy: "RULE ORDER",
    aggregation: void 0
  },
  explanation: "Collects the values of all matching rules in rule order"
}, {
  label: "Output order",
  value: {
    hitPolicy: "OUTPUT ORDER",
    aggregation: void 0
  },
  explanation: "Collects the values of all matching rules in decreasing output priority order"
}];

// node_modules/dmn-js-decision-table/lib/features/hit-policy/components/HitPolicy.js
var HitPolicy = class extends Component {
  constructor(props, context) {
    super(props, context);
    this._translate = context.injector.get("translate");
    inject(this);
  }
  getRoot() {
    return this.sheet.getRoot();
  }
  render() {
    const root = this.getRoot(), businessObject = root.businessObject;
    const aggregation = businessObject.aggregation, hitPolicy = businessObject.hitPolicy;
    const hitPolicyEntry = find2(HIT_POLICIES, (entry) => {
      return isEqualHitPolicy(entry.value, {
        aggregation,
        hitPolicy
      });
    });
    return createVNode(1, "div", "hit-policy header", [createVNode(1, "label", "dms-label", this._translate("Hit Policy:"), 0), createVNode(1, "span", "hit-policy-value", this._translate(hitPolicyEntry.label), 0)], 4, {
      "title": this._translate(hitPolicyEntry.explanation)
    });
  }
};
HitPolicy.$inject = ["sheet"];
function isEqualHitPolicy(a, b) {
  return a.hitPolicy === b.hitPolicy && a.aggregation === b.aggregation;
}

// node_modules/dmn-js-decision-table/lib/features/hit-policy/HitPolicyProvider.js
function HitPolicyProvider(components) {
  components.onGetComponent("hit-policy", () => {
    return HitPolicy;
  });
}
HitPolicyProvider.$inject = ["components"];

// node_modules/dmn-js-decision-table/lib/features/hit-policy/index.js
var hit_policy_default = {
  __init__: ["hitPolicyProvider"],
  hitPolicyProvider: ["type", HitPolicyProvider]
};

// node_modules/dmn-js-decision-table/lib/features/view-drd/components/ViewDrdComponent.js
function _defineProperty6(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ViewDrdComponent = class extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty6(this, "onClick", () => {
      this._eventBus.fire("showDrd");
    });
    const injector = context.injector;
    this._translate = injector.get("translate");
    this._eventBus = injector.get("eventBus");
  }
  render() {
    return createVNode(1, "div", "view-drd", createVNode(1, "button", "view-drd-button", this._translate("View DRD"), 0, {
      "type": "button",
      "onClick": this.onClick
    }), 2, null, null, (node2) => this.node = node2);
  }
};

// node_modules/dmn-js-decision-table/lib/features/view-drd/ViewDrd.js
var ViewDrd = class {
  constructor(components, eventBus, injector, sheet) {
    this._injector = injector;
    this._sheet = sheet;
    components.onGetComponent("table.before", () => {
      if (this.canViewDrd()) {
        return ViewDrdComponent;
      }
    });
    eventBus.on("showDrd", () => {
      const parent = injector.get("_parent", false);
      const root = sheet.getRoot();
      const definitions = getDefinitions(root);
      if (!definitions) {
        return;
      }
      const view = parent.getView(definitions);
      parent.open(view);
    });
  }
  canViewDrd() {
    const parent = this._injector.get("_parent", false);
    if (!parent) {
      return false;
    }
    const root = this._sheet.getRoot();
    const definitions = getDefinitions(root);
    return !!parent.getView(definitions);
  }
};
ViewDrd.$inject = ["components", "eventBus", "injector", "sheet"];
function getDefinitions(root) {
  const businessObject = root.businessObject;
  if (!businessObject) {
    return;
  }
  const decision = businessObject.$parent;
  const definitions = decision.$parent;
  return definitions;
}

// node_modules/dmn-js-decision-table/lib/features/view-drd/index.js
var view_drd_default = {
  __init__: ["viewDrd"],
  viewDrd: ["type", ViewDrd]
};

// node_modules/dmn-js-shared/lib/components/Logo.js
function Logo() {
  return createVNode(32, "svg", null, [createVNode(1, "path", null, null, 1, {
    "fill": "#000000",
    "d": "M1.88.92v.14c0 .41-.13.68-.4.8.33.14.46.44.46.86v.33c0 .61-.33.95-.95.95H0V0h.95c.65 0 .93.3.93.92zM.63.57v1.06h.24c.24 0 .38-.1.38-.43V.98c0-.28-.1-.4-.32-.4zm0 1.63v1.22h.36c.2 0 .32-.1.32-.39v-.35c0-.37-.12-.48-.4-.48H.63zM4.18.99v.52c0 .64-.31.98-.94.98h-.3V4h-.62V0h.92c.63 0 .94.35.94.99zM2.94.57v1.35h.3c.2 0 .3-.09.3-.37v-.6c0-.29-.1-.38-.3-.38h-.3zm2.89 2.27L6.25 0h.88v4h-.6V1.12L6.1 3.99h-.6l-.46-2.82v2.82h-.55V0h.87zM8.14 1.1V4h-.56V0h.79L9 2.4V0h.56v4h-.64zm2.49 2.29v.6h-.6v-.6zM12.12 1c0-.63.33-1 .95-1 .61 0 .95.37.95 1v2.04c0 .64-.34 1-.95 1-.62 0-.95-.37-.95-1zm.62 2.08c0 .28.13.39.33.39s.32-.1.32-.4V.98c0-.29-.12-.4-.32-.4s-.33.11-.33.4z"
  }), createVNode(1, "path", null, null, 1, {
    "fill": "#000000",
    "d": "M0 4.53h14.02v1.04H0zM11.08 0h.63v.62h-.63zm.63 4V1h-.63v2.98z"
  })], 4, {
    "xmlns": "http://www.w3.org/2000/svg",
    "viewBox": "0 0 14.02 5.57",
    "width": "53",
    "height": "21",
    "style": "vertical-align:middle"
  });
}

// node_modules/dmn-js-decision-table/lib/features/powered-by/components/PoweredByLogoComponent.js
function _defineProperty7(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var PoweredByLogoComponent = class extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty7(this, "onClick", () => {
      this._eventBus.fire("poweredBy.show");
    });
    const injector = context.injector;
    this._eventBus = injector.get("eventBus");
  }
  render() {
    return createVNode(1, "div", "powered-by", createVNode(1, "div", "powered-by__logo", createComponentVNode(2, Logo), 2, {
      "title": "Powered by bpmn.io",
      "onClick": this.onClick
    }, null, (node2) => this.node = node2), 2);
  }
};

// node_modules/dmn-js-decision-table/lib/features/powered-by/components/PoweredByOverlayComponent.js
var PoweredByOverlayComponent = class extends Component {
  constructor(props) {
    super(props);
    this.state = {
      show: false
    };
    this.onClick = this.onClick.bind(this);
    this.onShow = this.onShow.bind(this);
  }
  onClick() {
    this.setState({
      show: false
    });
  }
  onShow() {
    this.setState({
      show: true
    });
  }
  componentWillMount() {
    const eventBus = this._eventBus = this.context.injector.get("eventBus");
    eventBus.on("poweredBy.show", this.onShow);
  }
  componentWillUnmount() {
    this._eventBus.off("poweredBy.show", this.onShow);
  }
  render() {
    const show = this.state.show;
    return show && createVNode(1, "div", "powered-by-overlay", createVNode(1, "div", "powered-by-overlay-content", [createVNode(1, "a", "logo", createComponentVNode(2, Logo), 2, {
      "href": "https://bpmn.io",
      "target": "_blank",
      "rel": "noopener"
    }), createVNode(1, "span", null, [createTextVNode("Web-based tooling for BPMN, DMN and CMMN diagrams powered by "), createVNode(1, "a", null, createTextVNode("bpmn.io"), 2, {
      "href": "http://bpmn.io",
      "target": "_blank"
    }), createTextVNode(".")], 4)], 4, {
      "onClick": (e2) => e2.stopPropagation()
    }), 2, {
      "onClick": this.onClick
    });
  }
};

// node_modules/dmn-js-decision-table/lib/features/powered-by/PoweredBy.js
var PoweredBy = class {
  constructor(components, eventBus) {
    components.onGetComponent("table.before", () => {
      return PoweredByLogoComponent;
    });
    components.onGetComponent("table.before", () => {
      return PoweredByOverlayComponent;
    });
  }
};
PoweredBy.$inject = ["components", "eventBus"];

// node_modules/dmn-js-decision-table/lib/features/powered-by/index.js
var powered_by_default = {
  __init__: ["poweredBy"],
  poweredBy: ["type", PoweredBy]
};

// node_modules/dmn-js-decision-table/lib/Viewer.js
var _excluded3 = ["modules", "additionalModules"];
function _objectWithoutProperties3(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose3(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Viewer2 = class extends lib_default {
  constructor() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const container = Viewer2._createContainer();
    super(assign2(options2, {
      renderer: {
        container
      }
    }));
    this._container = container;
  }
  open(decision) {
    var self2 = this;
    return new Promise((resolve, reject) => {
      var err;
      try {
        if (self2._decision) {
          self2.clear();
        }
        self2._decision = decision;
        return importDecision(self2, decision, function(err2, warnings) {
          if (err2) {
            err2.warnings = warnings || [];
            reject(err2);
          } else {
            resolve({
              warnings: warnings || []
            });
          }
        });
      } catch (e2) {
        err = e2;
      }
      if (err) {
        err.warnings = err.warnings || [];
        reject(err);
      } else {
        resolve({
          warnings: []
        });
      }
    });
  }
  _init(options2) {
    let modules = options2.modules, additionalModules = options2.additionalModules, config = _objectWithoutProperties3(options2, _excluded3);
    let baseModules = modules || this.getModules();
    let extraModules = additionalModules || [];
    let staticModules = [{
      decisionTable: ["value", this]
    }];
    let allModules = [powered_by_default, ...baseModules, ...extraModules, ...staticModules];
    return {
      modules: allModules,
      config
    };
  }
  on(event2, priority, callback, target) {
    return this.get("eventBus").on(event2, priority, callback, target);
  }
  off(event2, callback) {
    this.get("eventBus").off(event2, callback);
  }
  _emit(type, event2) {
    return this.get("eventBus").fire(type, event2);
  }
  attachTo(parentNode) {
    if (!parentNode) {
      throw new Error("parentNode required");
    }
    this.detach();
    const container = this._container;
    parentNode.appendChild(container);
    this._emit("attach", {});
  }
  detach() {
    const container = this._container, parentNode = container.parentNode;
    if (!parentNode) {
      return;
    }
    this._emit("detach", {});
    remove(container);
  }
  destroy() {
    super.destroy();
    this.detach();
  }
  getModules() {
    return Viewer2._getModules();
  }
  static _getModules() {
    return [annotations_default, core_default4, translate_default, decision_table_head_default, decision_table_properties_default, decision_rule_indices_default, decision_rules_default, hit_policy_default, view_drd_default];
  }
  static _createContainer() {
    return domify('<div class="dmn-decision-table-container"></div>');
  }
};

// node_modules/dmn-js-shared/node_modules/didi/dist/index.esm.js
var CLASS_PATTERN2 = /^class[ {]/;
function isClass2(fn) {
  return CLASS_PATTERN2.test(fn.toString());
}
function isArray6(obj) {
  return Object.prototype.toString.call(obj) === "[object Array]";
}
function hasOwnProp2(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
function annotate2() {
  var args = Array.prototype.slice.call(arguments);
  if (args.length === 1 && isArray6(args[0])) {
    args = args[0];
  }
  var fn = args.pop();
  fn.$inject = args;
  return fn;
}
var CONSTRUCTOR_ARGS2 = /constructor\s*[^(]*\(\s*([^)]*)\)/m;
var FN_ARGS2 = /^(?:async\s+)?(?:function\s*[^(]*)?(?:\(\s*([^)]*)\)|(\w+))/m;
var FN_ARG2 = /\/\*([^*]*)\*\//m;
function parseAnnotations2(fn) {
  if (typeof fn !== "function") {
    throw new Error('Cannot annotate "' + fn + '". Expected a function!');
  }
  var match2 = fn.toString().match(isClass2(fn) ? CONSTRUCTOR_ARGS2 : FN_ARGS2);
  if (!match2) {
    return [];
  }
  var args = match2[1] || match2[2];
  return args && args.split(",").map(function(arg) {
    var argMatch = arg.match(FN_ARG2);
    return (argMatch && argMatch[1] || arg).trim();
  }) || [];
}
function Injector2(modules, parent) {
  parent = parent || {
    get: function(name2, strict) {
      currentlyResolving.push(name2);
      if (strict === false) {
        return null;
      } else {
        throw error3('No provider for "' + name2 + '"!');
      }
    }
  };
  var currentlyResolving = [];
  var providers = this._providers = Object.create(parent._providers || null);
  var instances = this._instances = /* @__PURE__ */ Object.create(null);
  var self2 = instances.injector = this;
  var error3 = function(msg) {
    var stack = currentlyResolving.join(" -> ");
    currentlyResolving.length = 0;
    return new Error(stack ? msg + " (Resolving: " + stack + ")" : msg);
  };
  function get3(name2, strict) {
    if (!providers[name2] && name2.indexOf(".") !== -1) {
      var parts = name2.split(".");
      var pivot = get3(parts.shift());
      while (parts.length) {
        pivot = pivot[parts.shift()];
      }
      return pivot;
    }
    if (hasOwnProp2(instances, name2)) {
      return instances[name2];
    }
    if (hasOwnProp2(providers, name2)) {
      if (currentlyResolving.indexOf(name2) !== -1) {
        currentlyResolving.push(name2);
        throw error3("Cannot resolve circular dependency!");
      }
      currentlyResolving.push(name2);
      instances[name2] = providers[name2][0](providers[name2][1]);
      currentlyResolving.pop();
      return instances[name2];
    }
    return parent.get(name2, strict);
  }
  function fnDef(fn, locals) {
    if (typeof locals === "undefined") {
      locals = {};
    }
    if (typeof fn !== "function") {
      if (isArray6(fn)) {
        fn = annotate2(fn.slice());
      } else {
        throw new Error('Cannot invoke "' + fn + '". Expected a function!');
      }
    }
    var inject2 = fn.$inject || parseAnnotations2(fn);
    var dependencies = inject2.map(function(dep) {
      if (hasOwnProp2(locals, dep)) {
        return locals[dep];
      } else {
        return get3(dep);
      }
    });
    return {
      fn,
      dependencies
    };
  }
  function instantiate(Type) {
    var def = fnDef(Type);
    var fn = def.fn, dependencies = def.dependencies;
    var Constructor = Function.prototype.bind.apply(fn, [null].concat(dependencies));
    return new Constructor();
  }
  function invoke(func, context, locals) {
    var def = fnDef(func, locals);
    var fn = def.fn, dependencies = def.dependencies;
    return fn.apply(context, dependencies);
  }
  function createPrivateInjectorFactory(childInjector) {
    return annotate2(function(key) {
      return childInjector.get(key);
    });
  }
  function createChild(modules2, forceNewInstances) {
    if (forceNewInstances && forceNewInstances.length) {
      var fromParentModule = /* @__PURE__ */ Object.create(null);
      var matchedScopes = /* @__PURE__ */ Object.create(null);
      var privateInjectorsCache = [];
      var privateChildInjectors = [];
      var privateChildFactories = [];
      var provider;
      var cacheIdx;
      var privateChildInjector;
      var privateChildInjectorFactory;
      for (var name2 in providers) {
        provider = providers[name2];
        if (forceNewInstances.indexOf(name2) !== -1) {
          if (provider[2] === "private") {
            cacheIdx = privateInjectorsCache.indexOf(provider[3]);
            if (cacheIdx === -1) {
              privateChildInjector = provider[3].createChild([], forceNewInstances);
              privateChildInjectorFactory = createPrivateInjectorFactory(privateChildInjector);
              privateInjectorsCache.push(provider[3]);
              privateChildInjectors.push(privateChildInjector);
              privateChildFactories.push(privateChildInjectorFactory);
              fromParentModule[name2] = [privateChildInjectorFactory, name2, "private", privateChildInjector];
            } else {
              fromParentModule[name2] = [privateChildFactories[cacheIdx], name2, "private", privateChildInjectors[cacheIdx]];
            }
          } else {
            fromParentModule[name2] = [provider[2], provider[1]];
          }
          matchedScopes[name2] = true;
        }
        if ((provider[2] === "factory" || provider[2] === "type") && provider[1].$scope) {
          forceNewInstances.forEach(function(scope) {
            if (provider[1].$scope.indexOf(scope) !== -1) {
              fromParentModule[name2] = [provider[2], provider[1]];
              matchedScopes[scope] = true;
            }
          });
        }
      }
      forceNewInstances.forEach(function(scope) {
        if (!matchedScopes[scope]) {
          throw new Error('No provider for "' + scope + '". Cannot use provider from the parent!');
        }
      });
      modules2.unshift(fromParentModule);
    }
    return new Injector2(modules2, self2);
  }
  var factoryMap = {
    factory: invoke,
    type: instantiate,
    value: function(value) {
      return value;
    }
  };
  function createInitializer(moduleDefinition, injector) {
    var initializers = moduleDefinition.__init__ || [];
    return function() {
      initializers.forEach(function(initializer) {
        if (typeof initializer === "string") {
          injector.get(initializer);
        } else {
          injector.invoke(initializer);
        }
      });
    };
  }
  function loadModule(moduleDefinition) {
    var moduleExports = moduleDefinition.__exports__;
    if (moduleExports) {
      var nestedModules = moduleDefinition.__modules__;
      var clonedModule = Object.keys(moduleDefinition).reduce(function(clonedModule2, key) {
        if (key !== "__exports__" && key !== "__modules__" && key !== "__init__" && key !== "__depends__") {
          clonedModule2[key] = moduleDefinition[key];
        }
        return clonedModule2;
      }, /* @__PURE__ */ Object.create(null));
      var childModules = (nestedModules || []).concat(clonedModule);
      var privateInjector = createChild(childModules);
      var getFromPrivateInjector = annotate2(function(key) {
        return privateInjector.get(key);
      });
      moduleExports.forEach(function(key) {
        providers[key] = [getFromPrivateInjector, key, "private", privateInjector];
      });
      var initializers = (moduleDefinition.__init__ || []).slice();
      initializers.unshift(function() {
        privateInjector.init();
      });
      moduleDefinition = Object.assign({}, moduleDefinition, {
        __init__: initializers
      });
      return createInitializer(moduleDefinition, privateInjector);
    }
    Object.keys(moduleDefinition).forEach(function(key) {
      if (key === "__init__" || key === "__depends__") {
        return;
      }
      if (moduleDefinition[key][2] === "private") {
        providers[key] = moduleDefinition[key];
        return;
      }
      var type = moduleDefinition[key][0];
      var value = moduleDefinition[key][1];
      providers[key] = [factoryMap[type], arrayUnwrap2(type, value), type];
    });
    return createInitializer(moduleDefinition, self2);
  }
  function resolveDependencies(moduleDefinitions, moduleDefinition) {
    if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
      return moduleDefinitions;
    }
    moduleDefinitions = (moduleDefinition.__depends__ || []).reduce(resolveDependencies, moduleDefinitions);
    if (moduleDefinitions.indexOf(moduleDefinition) !== -1) {
      return moduleDefinitions;
    }
    return moduleDefinitions.concat(moduleDefinition);
  }
  function bootstrap2(moduleDefinitions) {
    var initializers = moduleDefinitions.reduce(resolveDependencies, []).map(loadModule);
    var initialized = false;
    return function() {
      if (initialized) {
        return;
      }
      initialized = true;
      initializers.forEach(function(initializer) {
        return initializer();
      });
    };
  }
  this.get = get3;
  this.invoke = invoke;
  this.instantiate = instantiate;
  this.createChild = createChild;
  this.init = bootstrap2(modules);
}
function arrayUnwrap2(type, value) {
  if (type !== "value" && isArray6(value)) {
    value = annotate2(value.slice());
  }
  return value;
}

// node_modules/dmn-js-shared/lib/base/viewer/core/ChangeSupport.js
var ChangeSupport2 = class {
  constructor(eventBus) {
    this._listeners = {};
    eventBus.on("elements.changed", (_ref) => {
      let elements = _ref.elements;
      this.elementsChanged(elements);
    });
    eventBus.on("element.updateId", (_ref2) => {
      let element = _ref2.element, newId = _ref2.newId;
      this.updateId(element.id, newId);
    });
  }
  elementsChanged(elements) {
    const invoked = {};
    const elementsLength = elements.length;
    for (let i = 0; i < elementsLength; i++) {
      const id = elements[i].id;
      if (invoked[id]) {
        return;
      }
      invoked[id] = true;
      const listenersLength = this._listeners[id] && this._listeners[id].length;
      if (listenersLength) {
        for (let j = 0; j < listenersLength; j++) {
          this._listeners[id][j] && this._listeners[id][j]();
        }
      }
    }
  }
  onElementsChanged(id, listener) {
    if (!this._listeners[id]) {
      this._listeners[id] = [];
    }
    this._listeners[id][this._listeners[id].length] = listener;
  }
  offElementsChanged(id, listener) {
    if (!this._listeners[id]) {
      return;
    }
    if (listener) {
      const idx = this._listeners[id].indexOf(listener);
      if (idx !== -1) {
        this._listeners[id].splice(idx, 1);
      }
    } else {
      this._listeners[id].length = 0;
    }
  }
  updateId(oldId, newId) {
    if (this._listeners[oldId]) {
      this._listeners[newId] = this._listeners[oldId];
      delete this._listeners[oldId];
    }
  }
};
ChangeSupport2.$inject = ["eventBus"];

// node_modules/dmn-js-shared/lib/base/viewer/core/Components.js
var DEFAULT_PRIORITY3 = 1e3;
var Components2 = class {
  constructor() {
    this._listeners = {};
  }
  getComponent(type, context) {
    const listeners = this._listeners[type];
    if (!listeners) {
      return;
    }
    let component;
    for (let i = 0; i < listeners.length; i++) {
      component = listeners[i].callback(context);
      if (component) {
        break;
      }
    }
    return component;
  }
  getComponents(type, context) {
    const listeners = this._listeners[type];
    if (!listeners) {
      return;
    }
    const components = [];
    for (let i = 0; i < listeners.length; i++) {
      const component = listeners[i].callback(context);
      if (component) {
        components.push(component);
      }
    }
    if (!components.length) {
      return;
    }
    return components;
  }
  onGetComponent(type, priority, callback) {
    if (isFunction2(priority)) {
      callback = priority;
      priority = DEFAULT_PRIORITY3;
    }
    if (!isNumber2(priority)) {
      throw new Error("priority must be a number");
    }
    const listeners = this._getListeners(type);
    let existingListener, idx;
    const newListener = {
      priority,
      callback
    };
    for (idx = 0; existingListener = listeners[idx]; idx++) {
      if (existingListener.priority < priority) {
        listeners.splice(idx, 0, newListener);
        return;
      }
    }
    listeners.push(newListener);
  }
  offGetComponent(type, callback) {
    const listeners = this._getListeners(type);
    let listener, listenerCallback, idx;
    if (callback) {
      for (idx = listeners.length - 1; listener = listeners[idx]; idx--) {
        listenerCallback = listener.callback;
        if (listenerCallback === callback) {
          listeners.splice(idx, 1);
        }
      }
    } else {
      listeners.length = 0;
    }
  }
  _getListeners(type) {
    let listeners = this._listeners[type];
    if (!listeners) {
      this._listeners[type] = listeners = [];
    }
    return listeners;
  }
};

// node_modules/dmn-js-shared/lib/base/viewer/core/components/ViewerComponent.js
var ViewerComponent = class extends Component {
  constructor(props) {
    super(props);
    const injector = this._injector = props.injector;
    this._changeSupport = injector.get("changeSupport");
    this._components = injector.get("components");
    this._renderer = injector.get("renderer");
  }
  getChildContext() {
    return {
      changeSupport: this._changeSupport,
      components: this._components,
      renderer: this._renderer,
      injector: this._injector
    };
  }
  render() {
    const components = this._components.getComponents("viewer");
    return createVNode(1, "div", "viewer-container", components && components.map((Component3, index2) => createComponentVNode(2, Component3, null, index2)), 0);
  }
};

// node_modules/dmn-js-shared/lib/base/viewer/core/Renderer.js
var Renderer2 = class {
  constructor(changeSupport, components, config, eventBus, injector) {
    const container = config.container;
    this._container = container;
    eventBus.on("renderer.mount", () => {
      render(createComponentVNode(2, ViewerComponent, {
        "injector": injector
      }), container);
    });
    eventBus.on("renderer.unmount", () => {
      render(null, container);
    });
  }
  getContainer() {
    return this._container;
  }
};
Renderer2.$inject = ["changeSupport", "components", "config.renderer", "eventBus", "injector"];

// node_modules/dmn-js-shared/lib/base/viewer/core/index.js
var core_default5 = {
  __init__: ["changeSupport", "components", "renderer"],
  changeSupport: ["type", ChangeSupport2],
  components: ["type", Components2],
  eventBus: ["type", EventBus],
  renderer: ["type", Renderer2]
};

// node_modules/dmn-js-shared/lib/base/viewer/Viewer.js
var _excluded4 = ["modules"];
function _objectWithoutProperties4(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose4(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Viewer3 = class {
  constructor() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let injector = options2.injector;
    if (!injector) {
      let _this$_init = this._init(options2), modules = _this$_init.modules, config = _this$_init.config;
      injector = createInjector3(config, modules);
    }
    this.get = injector.get;
    this.invoke = injector.invoke;
    this.get("eventBus").fire("viewer.init");
  }
  _init(options2) {
    let modules = options2.modules, config = _objectWithoutProperties4(options2, _excluded4);
    return {
      modules,
      config
    };
  }
  destroy() {
    const eventBus = this.get("eventBus");
    eventBus.fire("viewer.destroy");
  }
  clear() {
    const eventBus = this.get("eventBus");
    eventBus.fire("viewer.clear");
  }
};
function createInjector3(config, modules) {
  const bootstrapModules = [{
    config: ["value", config]
  }, core_default5].concat(modules || []);
  const injector = new Injector2(bootstrapModules);
  injector.init();
  return injector;
}

// node_modules/dmn-js-literal-expression/lib/core/ElementRegistry.js
var ElementRegistry3 = class {
  constructor(viewer, eventBus) {
    this._eventBus = eventBus;
    this._viewer = viewer;
  }
  getDecision() {
    return this._viewer.getDecision();
  }
  updateId(element, newId) {
    var decision = this.getDecision();
    if (element !== decision) {
      throw new Error("element !== decision");
    }
    this._eventBus.fire("element.updateId", {
      element,
      newId
    });
    element.id = newId;
  }
};
ElementRegistry3.$inject = ["viewer", "eventBus"];

// node_modules/dmn-js-literal-expression/lib/core/index.js
var core_default6 = {
  __init__: ["elementRegistry"],
  elementRegistry: ["type", ElementRegistry3]
};

// node_modules/dmn-js-literal-expression/lib/features/decision-properties/components/DecisionPropertiesComponent.js
var DecisionPropertiesComponent = class extends Component {
  constructor(props, context) {
    super(props, context);
    this._viewer = context.injector.get("viewer");
  }
  render() {
    const _this$_viewer$getDeci = this._viewer.getDecision(), name2 = _this$_viewer$getDeci.name;
    return createVNode(1, "div", "decision-properties", createVNode(1, "h3", "decision-name", name2, 0), 2);
  }
};

// node_modules/dmn-js-literal-expression/lib/features/decision-properties/DecisionProperties.js
var HIGH_PRIORITY = 1500;
var DecisionProperties = class {
  constructor(components) {
    components.onGetComponent("viewer", HIGH_PRIORITY, () => DecisionPropertiesComponent);
  }
};
DecisionProperties.$inject = ["components"];

// node_modules/dmn-js-literal-expression/lib/features/decision-properties/index.js
var decision_properties_default = {
  __init__: ["decisionProperties"],
  decisionProperties: ["type", DecisionProperties]
};

// node_modules/dmn-js-literal-expression/lib/features/literal-expression-properties/components/LiteralExpressionPropertiesComponent.js
var LiteralExpressionPropertiesComponent = class extends Component {
  constructor(props, context) {
    super(props, context);
    this._translate = context.injector.get("translate");
    this._viewer = context.injector.get("viewer");
  }
  render() {
    const _this$_viewer$getDeci = this._viewer.getDecision(), literalExpression = _this$_viewer$getDeci.decisionLogic, variable = _this$_viewer$getDeci.variable;
    return createVNode(1, "div", "literal-expression-properties", createVNode(1, "table", null, [createVNode(1, "tr", null, [createVNode(1, "td", null, this._translate("Variable Name:"), 0), createVNode(1, "td", null, createVNode(1, "span", null, variable.name || "-", 0), 2)], 4), createVNode(1, "tr", null, [createVNode(1, "td", null, this._translate("Variable Type:"), 0), createVNode(1, "td", null, createVNode(1, "span", null, this._translate(variable.typeRef) || "-", 0), 2)], 4), createVNode(1, "tr", null, [createVNode(1, "td", null, this._translate("Expression Language:"), 0), createVNode(1, "td", null, createVNode(1, "span", null, literalExpression.expressionLanguage || "-", 0), 2)], 4)], 4), 2);
  }
};

// node_modules/dmn-js-literal-expression/lib/features/literal-expression-properties/LiteralExpressionProperties.js
var LOW_PRIORITY5 = 500;
var DecisionProperties2 = class {
  constructor(components) {
    components.onGetComponent("viewer", LOW_PRIORITY5, () => {
      return LiteralExpressionPropertiesComponent;
    });
  }
};
DecisionProperties2.$inject = ["components"];

// node_modules/dmn-js-literal-expression/lib/features/literal-expression-properties/index.js
var literal_expression_properties_default = {
  __depends__: [],
  __init__: ["literalExpressionProperties"],
  literalExpressionProperties: ["type", DecisionProperties2]
};

// node_modules/dmn-js-literal-expression/lib/features/powered-by/components/PoweredByLogoComponent.js
function _defineProperty8(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var PoweredByLogoComponent2 = class extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty8(this, "onClick", () => {
      this._eventBus.fire("poweredBy.show");
    });
    const injector = context.injector;
    this._eventBus = injector.get("eventBus");
  }
  render() {
    return createVNode(1, "div", "powered-by", createVNode(1, "div", "powered-by__logo", createComponentVNode(2, Logo), 2), 2, {
      "onClick": this.onClick,
      "title": "Powered by bpmn.io"
    }, null, (node2) => this.node = node2);
  }
};

// node_modules/dmn-js-literal-expression/lib/features/powered-by/components/PoweredByOverlayComponent.js
var PoweredByOverlayComponent2 = class extends Component {
  constructor(props) {
    super(props);
    this.state = {
      show: false
    };
    this.onClick = this.onClick.bind(this);
    this.onShow = this.onShow.bind(this);
  }
  onClick() {
    this.setState({
      show: false
    });
  }
  onShow() {
    this.setState({
      show: true
    });
  }
  componentWillMount() {
    const eventBus = this._eventBus = this.context.injector.get("eventBus");
    eventBus.on("poweredBy.show", this.onShow);
  }
  componentWillUnmount() {
    this._eventBus.off("poweredBy.show", this.onShow);
  }
  render() {
    const show = this.state.show;
    return show && createVNode(1, "div", "powered-by-overlay", createVNode(1, "div", "powered-by-overlay-content", [createVNode(1, "a", "logo", createComponentVNode(2, Logo), 2, {
      "href": "https://bpmn.io",
      "target": "_blank",
      "rel": "noopener"
    }), createVNode(1, "span", null, [createTextVNode("Web-based tooling for BPMN, DMN and CMMN diagrams powered by "), createVNode(1, "a", null, createTextVNode("bpmn.io"), 2, {
      "href": "http://bpmn.io",
      "target": "_blank"
    }), createTextVNode(".")], 4)], 4, {
      "onClick": (e2) => e2.stopPropagation()
    }), 2, {
      "onClick": this.onClick
    });
  }
};

// node_modules/dmn-js-literal-expression/lib/features/powered-by/PoweredBy.js
var HIGHER_PRIORITY = 2e3;
var PoweredBy2 = class {
  constructor(components, eventBus) {
    components.onGetComponent("viewer", HIGHER_PRIORITY, () => {
      return PoweredByLogoComponent2;
    });
    components.onGetComponent("viewer", () => {
      return PoweredByOverlayComponent2;
    });
  }
};
PoweredBy2.$inject = ["components", "eventBus"];

// node_modules/dmn-js-literal-expression/lib/features/powered-by/index.js
var powered_by_default2 = {
  __init__: ["poweredBy"],
  poweredBy: ["type", PoweredBy2]
};

// node_modules/dmn-js-literal-expression/lib/features/textarea/components/TextareaComponent.js
var TextareaComponent = class extends Component {
  constructor(props, context) {
    super(props, context);
    this._viewer = context.injector.get("viewer");
  }
  render() {
    const text = this._viewer.getDecision().decisionLogic.text;
    return createVNode(1, "div", "textarea", createVNode(1, "div", "content", text, 0), 2);
  }
};

// node_modules/dmn-js-literal-expression/lib/features/textarea/Textarea.js
var Textarea = class {
  constructor(components) {
    components.onGetComponent("viewer", () => TextareaComponent);
  }
};
Textarea.$inject = ["components"];

// node_modules/dmn-js-literal-expression/lib/features/textarea/index.js
var textarea_default = {
  __init__: ["textarea"],
  textarea: ["type", Textarea]
};

// node_modules/dmn-js-literal-expression/lib/features/view-drd/components/ViewDrdComponent.js
function _defineProperty9(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var ViewDrdComponent2 = class extends Component {
  constructor(props, context) {
    super(props, context);
    _defineProperty9(this, "onClick", () => {
      this._eventBus.fire("showDrd");
    });
    const injector = context.injector;
    this._translate = injector.get("translate");
    this._eventBus = injector.get("eventBus");
  }
  render() {
    return createVNode(1, "div", "view-drd", createVNode(1, "button", "view-drd-button", this._translate("View DRD"), 0, {
      "type": "button",
      "onClick": this.onClick
    }), 2, null, null, (node2) => this.node = node2);
  }
};
ViewDrdComponent2.$inject = ["translate"];

// node_modules/dmn-js-literal-expression/lib/features/view-drd/ViewDrd.js
var VERY_HIGH_PRIORITY = 2e3;
var ViewDrd2 = class {
  constructor(components, viewer, eventBus, injector) {
    this._injector = injector;
    this._viewer = viewer;
    components.onGetComponent("viewer", VERY_HIGH_PRIORITY, () => {
      if (this.canViewDrd()) {
        return ViewDrdComponent2;
      }
    });
    eventBus.on("showDrd", () => {
      const parent = injector.get("_parent", false);
      const definitions = this.getDefinitions();
      const view = parent.getView(definitions);
      parent.open(view);
    });
  }
  canViewDrd() {
    const parent = this._injector.get("_parent", false);
    if (!parent) {
      return;
    }
    const definitions = this.getDefinitions();
    return !!parent.getView(definitions);
  }
  getDefinitions() {
    return getDefinitions2(this._viewer.getDecision());
  }
};
ViewDrd2.$inject = ["components", "viewer", "eventBus", "injector"];
function getDefinitions2(decision) {
  const definitions = decision.$parent;
  return definitions;
}

// node_modules/dmn-js-literal-expression/lib/features/view-drd/index.js
var view_drd_default2 = {
  __init__: ["viewDrd"],
  viewDrd: ["type", ViewDrd2]
};

// node_modules/dmn-js-literal-expression/lib/Viewer.js
var _excluded5 = ["modules", "additionalModules"];
function _objectWithoutProperties5(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose5(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Viewer4 = class extends Viewer3 {
  constructor() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const container = Viewer4._createContainer();
    super(assign2(options2, {
      renderer: {
        container
      }
    }));
    this._container = container;
  }
  open(decision) {
    var self2 = this;
    return new Promise(function(resolve, reject) {
      var err;
      try {
        if (self2._decision) {
          self2.clear();
          self2.get("eventBus").fire("renderer.unmount");
        }
        self2._decision = decision;
        self2.get("eventBus").fire("import", decision);
        self2.get("eventBus").fire("renderer.mount");
      } catch (e2) {
        err = e2;
      }
      if (err) {
        err.warnings = err.warnings || [];
        reject(err);
      } else {
        resolve({
          warnings: []
        });
      }
    });
  }
  _init(options2) {
    let modules = options2.modules, additionalModules = options2.additionalModules, config = _objectWithoutProperties5(options2, _excluded5);
    let baseModules = modules || this.getModules();
    let extraModules = additionalModules || [];
    let staticModules = [{
      viewer: ["value", this]
    }];
    let allModules = [...baseModules, ...extraModules, ...staticModules];
    return {
      modules: allModules,
      config
    };
  }
  on(event2, priority, callback, target) {
    return this.get("eventBus").on(event2, priority, callback, target);
  }
  off(event2, callback) {
    this.get("eventBus").off(event2, callback);
  }
  _emit(type, event2) {
    return this.get("eventBus").fire(type, event2);
  }
  getDecision() {
    return this._decision;
  }
  attachTo(parentNode) {
    if (!parentNode) {
      throw new Error("parentNode required");
    }
    this.detach();
    parentNode.appendChild(this._container);
    this._emit("attach", {});
  }
  detach() {
    const container = this._container, parentNode = container.parentNode;
    if (!parentNode) {
      return;
    }
    this._emit("detach", {});
    remove(container);
  }
  destroy() {
    super.destroy();
    this.detach();
  }
  getModules() {
    return Viewer4._getModules();
  }
  static _getModules() {
    return [core_default6, translate_default, decision_properties_default, literal_expression_properties_default, powered_by_default2, textarea_default, view_drd_default2];
  }
  static _createContainer() {
    return domify('<div class="dmn-literal-expression-container"></div>');
  }
};

// node_modules/dmn-js-shared/lib/util/DiUtil.js
function containsDi(definitions) {
  return definitions.dmnDI && definitions.dmnDI.diagrams && definitions.dmnDI.diagrams[0];
}

// node_modules/dmn-js/lib/NavigatedViewer.js
var Viewer5 = class extends Manager {
  _getViewProviders() {
    return [{
      id: "drd",
      constructor: NavigatedViewer,
      opens(element) {
        return is(element, "dmn:Definitions") && containsDi(element);
      }
    }, {
      id: "decisionTable",
      constructor: Viewer2,
      opens(element) {
        return is(element, "dmn:Decision") && is(element.decisionLogic, "dmn:DecisionTable");
      }
    }, {
      id: "literalExpression",
      constructor: Viewer4,
      opens(element) {
        return is(element, "dmn:Decision") && is(element.decisionLogic, "dmn:LiteralExpression");
      }
    }];
  }
};

// main.ts
var ObsidianDmnPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    console.log("DMN loading...");
    this.settings = Object.assign(new ObsidianDmnPluginSettings(), await this.loadData());
    this.addSettingTab(new ObsidianDmnPluginSettingsTab(this.app, this));
    this.registerMarkdownCodeBlockProcessor("dmn", async (src, el, ctx) => {
      let parameters = null;
      try {
        parameters = this.readParameters(src);
      } catch (e2) {
        el.createEl("h3", { text: "DMN parameters invalid: \n" + e2.message });
        return;
      }
      console.log("Try to render a DMN");
      try {
        if (parameters.url.startsWith("./")) {
          const filePath = ctx.sourcePath;
          const folderPath = filePath.substring(0, filePath.lastIndexOf("/"));
          parameters.url = folderPath + "/" + parameters.url.substring(2, parameters.url.length);
        }
        const rootDiv = el.createEl("div");
        if (parameters.opendiagram) {
          const href = rootDiv.createEl("a", { text: "Open DMN" });
          href.href = parameters.url;
          href.className = "internal-link";
        }
        const dmnDiv = rootDiv.createEl("div", { cls: "dmn-view" });
        if (parameters.forcewhitebackground) {
          dmnDiv.addClass("dmn-view-white-background");
        } else {
          const theme = app.getTheme();
          if (theme === "obsidian") {
            dmnDiv.addClass("dmn-view-obsidian-theme");
          } else if (theme === "moonstone") {
            dmnDiv.addClass("dmn-view-moonstone-theme");
          }
        }
        const xml2 = await this.app.vault.adapter.read(parameters.url);
        dmnDiv.setAttribute("style", "height: " + parameters.height + "px;");
        const dmnViewer = new Viewer5({
          container: dmnDiv,
          keyboard: {
            bindTo: dmnDiv.win
          }
        });
        const p_zoom = parameters.zoom;
        const p_x = parameters.x;
        const p_y = parameters.y;
        const decisionId = parameters.decisionid;
        dmnViewer.importXML(xml2).then(function(result) {
          if (decisionId !== void 0) {
            dmnViewer.getViews().forEach(function(view) {
              if (view.element.id === (parameters == null ? void 0 : parameters.decisionid)) {
                dmnViewer.open(view);
              }
            });
          }
          const activeView = dmnViewer.getActiveView();
          if (activeView.type === "drd") {
            const activeEditor = dmnViewer.getActiveViewer();
            const canvas = activeEditor.get("canvas");
            if (p_zoom === void 0) {
              canvas.zoom("fit-viewport");
            } else {
              canvas.zoom(p_zoom, { x: p_x, y: p_y });
            }
          }
        }).catch(function(err) {
          const { warnings, message } = err;
          console.log("something went wrong:", warnings, message);
          dmnViewer.destroy();
          rootDiv.createEl("h3", { text: warnings + " " + message });
        });
        if (parameters.showzoom) {
          const zoomDiv = rootDiv.createEl("div");
          const zoomInBtn = zoomDiv.createEl("button", { "text": "+" });
          zoomInBtn.addEventListener("click", (e2) => {
            if (dmnViewer.getActiveView().type === "drd") {
              dmnViewer.getActiveViewer().get("zoomScroll").stepZoom(0.5);
            }
          });
          const zoomOutBtn = zoomDiv.createEl("button", { "text": "-" });
          zoomOutBtn.addEventListener("click", (e2) => {
            if (dmnViewer.getActiveView().type === "drd") {
              dmnViewer.getActiveViewer().get("zoomScroll").stepZoom(-0.5);
            }
          });
        }
      } catch (error3) {
        el.createEl("h3", { text: error3 });
      }
    });
  }
  readParameters(jsonString) {
    if (jsonString.contains("[[") && !jsonString.contains('"[[')) {
      jsonString = jsonString.replace("[[", '"[[');
      jsonString = jsonString.replace("]]", ']]"');
    }
    const parameters = (0, import_obsidian2.parseYaml)(jsonString);
    if (parameters.url.startsWith("[[")) {
      parameters.url = parameters.url.substring(2, parameters.url.length - 2);
      parameters.url = this.app.metadataCache.getFirstLinkpathDest(parameters.url, "").path;
    }
    if (parameters.showzoom === void 0) {
      parameters.showzoom = this.settings.showzoom_by_default;
    }
    if (parameters.opendiagram === void 0) {
      parameters.opendiagram = this.settings.opendiagram_by_default;
    }
    if (parameters.height === void 0) {
      parameters.height = this.settings.height_by_default;
    }
    if (parameters.x === void 0) {
      parameters.x = 0;
    }
    parameters.x *= 10;
    if (parameters.y === void 0) {
      parameters.y = 0;
    }
    parameters.y *= 10;
    if (parameters.forcewhitebackground === void 0) {
      parameters.forcewhitebackground = this.settings.force_white_background_by_default;
    }
    return parameters;
  }
  onunload() {
    console.log("Unloading DMN plugin...");
  }
};
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
